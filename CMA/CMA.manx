{************************************************************}
{                                                            }
{  Blaise 5. A Survey Processing System                      }
{  Copyright (c) 1992, 2022 Statistics Netherlands           }
{  CMA - Case Management Application for use by interviewers }
{  version:  2.606 for Blaise 5.12 and greater               }
{  date:     16-November-2023                                }
{  author: Lon Hofman & Loek Rouschen,                       }
{          Team Blaise, Statistics Netherlands               }
{                                                            }
{************************************************************}
PROCESS CMA 
{$DEFINE MultiDevice}
{.$DEFINE UseDateTimeType}
{.$DEFINE 5_10} //when enabled this version will also prepare & run in 5.10
SETTINGS 
  CONNECT=NO
  ADDDATETIMETOMESSAGEFILE=YES
CONST 
  cmaVersion = '2.606'
  
//- 2.5.   
//  - Initial release for 5.12, June 30, 2022
//- 2.501
//  - Fix for datamodel not starting when mixed with survey package based on Manipula Dialogs application 
//  - Fix for removing selected survey during sync. Selected survey is now set to 'All'
//- 2.502
//  - Handling of surveys data file improved
//- 2.503
//  - Improved handling of Manipula dialog survey package
//  - Parent is now always first case in group dialog 
//  - Locating of details template improved
//  - Fixed bug with filter when using device specific surveys
//  - Fixed bug with not showing wave survey in dropdown
//- 2.504
//  - Changing style on group dialog improved
//  - cma_settings.xml handling improved.
//  - Fixed bug with filter when using device specific surveys (2)
//  - Download interceptor improved
//- 2.505
//  - Improved handling of Manipula dialog survey package
//  - Solved issue with log file upload
//  - Improved release of case
//- 2.6
//  - Improved handling of Manipula dialog survey package
//  - Support fot $Survey_CustomData in templates added
//  - Trace for synchronization added
//  - Support for CMA settings sUseEndDateInFilter & sDaysToShowAfter added
//  - Support for AtSync setup added
//  - CMA now automatically selects first survey When only one survey available
//  - Support for various file related instructions added
//- 2.605
//  - FIX - GetListOfSurveysX does not log the correct error code
//  - Sync process now checks that GetListOfSurveysX did not fail
//- 2.606
//  - FIX - Mapping after manually adding an attempt

LANGUAGES = EN "English"
ROLES = TOOLTIP, DISABLED

USES
  Launcher//installed survey that defines data structure for a case assignment
  Attempts (VAR) //installed survey that defines data structure for an attempt
  Logging //installed survey that defines data structure for upload of loggings
  CMA_SettingsMeta
  CMA_SurveySettings
{$IFDEF MultiDevice}
  ClientInfo
{$ENDIF}  
  LogMeta
  Surveys  
  SyncTrace
  
  TopicMeta (VAR) //to allow access to topic data that corresponds with specific case assignment
  
  DATAMODEL locCases //used for temporary file displayed in cases overview dialog
  PRIMARY
    tMainSurveyID, tIdentifier
  SECONDARY 
    secSort = TheSortValue
  LANGUAGES = EN "English"
  FIELDS
    TheSortValue: STRING[255] 
    tSurveyName EN "Survey" : STRING[30]
    tMainSurveyID: STRING[36]  //GUID of survey. Could be a WAVE
    tIdentifier EN "Key" : STRING[219]
    tLastResult EN "Result" : STRING[80],EMPTY //happenings code as string
    tAppointment EN "Appointment" : STRING[30], EMPTY
    tAppForToday: (yes),EMPTY
    tStartDate "Start date": DATETYPE, EMPTY
    tEndDate "End date": DATETYPE,EMPTY
    tContactInfoShort EN "Contact info" : STRING,EMPTY
    tContactData: OPEN, EMPTY
    tLastAttempt EN "Last attempt" : STRING[24],EMPTY
    tCaseNote EN "Case note" : OPEN,EMPTY
    tFinal: (no (0), yes),EMPTY
    tInterviewStart: STRING[24],EMPTY
    tInterviewEnd: STRING[24],EMPTY
    tAllowSpawning: (no(0), yes), EMPTY
    tSpawnCount "#Created": STRING[3], EMPTY
    tGroupType: (parent,child),EMPTY
    tStatus EN "Status": STRING[20],EMPTY
    tCaseStatus EN "Interview status" : STRING[20],EMPTY
    tGroupStatus EN "Group status":   STRING[20],EMPTY
    tGroupSummary: STRING[100]
    tGroupID "Group ID": STRING,EMPTY
    tIsDonorCase: (yes), EMPTY
    tAttemptsCount EN "#Attempts": STRING[3], EMPTY
    tAttemptsRoute: STRING[5],EMPTY
    tContactInfoGUID: STRING[36], EMPTY
    tDetailsTemplate: STRING[10]
    tGeoLocation EN "Geo Position": STRING[22], EMPTY
    tHasImage: (yes),EMPTY
    tAttemptsGUID: STRING[36], EMPTY
    tGroupSort: STRING[5], EMPTY
    tHasInterview: (yes),EMPTY
    tDoneAllowed: (yes),EMPTY
    tCustomUse: OPEN,EMPTY
    tCustomCol1  "CustomCol1": STRING,EMPTY  
    tCustomCol2  "CustomCol2": STRING,EMPTY  
    tCustomCol3  "CustomCol3": STRING,EMPTY  
    tCustomCol4  "CustomCol4": STRING,EMPTY  
    tCustomCol5  "CustomCol5": STRING,EMPTY  
    tCustomCol6  "CustomCol6": STRING,EMPTY  
    tCustomCol7  "CustomCol7": STRING,EMPTY  
    tCustomCol8  "CustomCol8": STRING,EMPTY  
    tCustomCol9  "CustomCol9": STRING,EMPTY  
    tCustomCol10 "CustomCol10": STRING,EMPTY  
    tActiveLanguage: STRING[5] //to keep track what the language was when the case was written
  ENDMODEL
  
  DATAMODEL locAttempts //used for temporary file displayed in attempts dialog
  PRIMARY
     atMainSurveyID, atID, SeqNr
  LANGUAGES = EN "English"
  FIELDS
    atMainSurveyID: STRING[36]  //GUID of survey. Could be a WAVE
    atID EN "Key" : STRING[219]
    SeqNr "#": 1..99
    When EN "When" : STRING[25]
    HappeningsStr EN "Result" : STRING[80]
    atApptDate : STRING[20]
    atApptTime : STRING[20]    
    atAppointment EN "Appointment" : STRING[20], EMPTY
    TheLastOne: 0..1
  ENDMODEL
  
  DATAMODEL ToHandleMeta
  PRIMARY SurveyGUID
  FIELDS
     SurveyGUID: STRING[36]
     IDs: OPEN
     IDsCount: INTEGER
     Handled: (yes), EMPTY
  ENDMODEL
  
  DATAMODEL Text
  FIELDS
    line: STRING
  ENDMODEL 
  
  DATAMODEL mId
  FIELDS
    NewID: STRING
  ENDMODEL 
  
  DATAMODEL CustomFilterMeta
  PRIMARY cCustomV
  FIELDS
    cCustomV: STRING   
  ENDMODEL    
  
  DATAMODEL DependencyMeta
  PRIMARY ParentGUID,ChildGUID
  SECONDARY ChildGUID sec2=ParentGUID
  FIELDS
    ParentGUID: STRING[36]
    ChildGUID: STRING[36]
    DependencyType: (dtWave,dtChild,dtAttempt,dtContact)
  ENDMODEL
  
  
INPUTFILE iSettings: CMA_SettingsMeta (XML)  
SETTINGS
  OPEN=NO
  
SURVEYLIST 
  srvList //lists all available surveys
  
INPUTFILE iSurveySettings:CMA_SurveySettings (XML)
SETTINGS
  OPEN=NO
    
INPUTFILE iAttempts:Attempts (XML)
SETTINGS
  OPEN=NO
  AUTOCOPY=NO
  CONTAINSCHECKS=YES

INPUTFILE iTopic: TopicMeta (XML) 
SETTINGS
  OPEN=NO
  CONTAINSCHECKS=YES
  
INPUTFILE uiTopic: TopicMeta (BDIX) // database of a topic instrument on client. Meta set just-in-time
SETTINGS
  OPEN=NO
  
INPUTFILE iDetailsTemplate:Text (ASCII) //used for reading the active details template
SETTINGS
  OPEN=NO
  
{$IFDEF MultiDevice}
INPUTFILE iClientInfo:ClientInfo (BDIX)
SETTINGS
  OPEN=NO
{$ENDIF}  
  
UPDATEFILE uSurveys:Surveys(BLAISE)
SETTINGS
  OPEN=NO
  
UPDATEFILE ufServerLogging:Logging (BLAISE)  //used for uploading loggings to server
SETTINGS
  OPEN=NO  
  
UPDATEFILE ufServerAttempts:Attempts (BLAISE)  //used for exchanging attempt records between client and server and for the .EDIT of an entry
SETTINGS
  OPEN=NO 

UPDATEFILE ufServerCases:Launcher (BLAISE)  //used for exchanging case assignment records between client and server and for the .EDIT of an entry
SETTINGS
  OPEN=NO  
  
UPDATEFILE ufLocalCases:Launcher (BLAISE)  //database on client to store case assignment records 
SETTINGS
  OPEN=NO  
  
UPDATEFILE ufLocalAttempts:Attempts (BLAISE) //database on client to to attempt records
SETTINGS
  OPEN=NO
  
UPDATEFILE uTopic:TopicMeta (BDIX) // database of a topic instrument on client. Meta set just-in-time
SETTINGS
  OPEN=NO

INPUTFILE iLog:LogMeta (ASCII) // to display the content of the log file
SETTINGS
  OPEN=NO
  SEPARATOR=';'

TEMPORARYFILE tTopic:TopicMeta //used as intermediate file when downloading topic cases to enable listing them in log

TEMPORARYFILE tCase:locCases //used for dialog that shows case assignemt records. Populated using ufLocalCases
SETTINGS
  KEY=SECONDARY(secSort) 
  
TEMPORARYFILE tMainCase:locCases //used for dialog dCase. Populated using ufLocalCases
SETTINGS
  KEY=SECONDARY(secSort) 

TEMPORARYFILE tGroupCase:locCases //used for dialog dGroup. Populated using ufLocalCases
SETTINGS
  KEY=SECONDARY(secSort) 
  
TEMPORARYFILE tCaseCache:locCases //used as cache to speed up refreshing

TEMPORARYFILE tAttempt:locAttempts  //used for dialog that shows attempts for a specific case assignment record. Populated using ufLocalAttempts

TEMPORARYFILE tToHandleD:ToHandleMeta //registration of cases to be downloaded
  
TEMPORARYFILE tToHandleU:ToHandleMeta  //registration of case to be uploaded
  
TEMPORARYFILE tToHandleR:ToHandleMeta  //registration of cases to be deleted after upload
  
TEMPORARYFILE tDependency:DependencyMeta  
  
TEMPORARYFILE tCustomFilter:CustomFilterMeta

TEMPORARYFILE tSpawnID:mID   

TEMPORARYFILE tSyncTrace:SyncTrace 

OUTPUTFILE oSettings:CMA_SettingsMeta (XML) //to keep track of last used language etc in UI
SETTINGS
  OPEN=NO
  MAKENEWFILE=YES
  CREATEBDIX=NO
  
OUTPUTFILE oLog:logMeta (ASCII) //the actual log file
SETTINGS
  MAKENEWFILE=NO  
  OPEN=NO
  SEPARATOR=';'
  TRAILINGSPACES=NO
  CREATEBDIX=NO
  
OUTPUTFILE oLogBackup:logMeta (ASCII) 
SETTINGS
  MAKENEWFILE=NO  
  OPEN=NO
  SEPARATOR=';'
  TRAILINGSPACES=NO
  CREATEBDIX=NO  
    
OUTPUTFILE uoTopic:TopicMeta (BLAISE) 
SETTINGS
  OPEN=NO

OUTPUTFILE oTopic:TopicMeta (XML) 
SETTINGS
  OPEN=NO
  CREATEBDIX=NO
  CONTAINSCHECKS=YES
  
OUTPUTFILE oAttempts:Attempts (XML) 
SETTINGS
  OPEN=NO
  CREATEBDIX=NO
  CONTAINSCHECKS=YES
  
OUTPUTFILE osyncTrace:SyncTrace (ASCII)
SETTINGS
  OPEN=NO
  SEPARATOR=';'
  DELIMITER='"'
  TRAILINGSPACES=NO
  CREATEBDIX=NO
  
AUXFIELDS
  DefaultLanguage: STRING[5]
  aConnected: (Yes, No)
  index: INTEGER
  sync_msg: OPEN
  cases_loc: STRING //filename of local cases file
  attempts_loc: STRING //filename of local attempts file
  aCasesFileName: STRING
  aAttemptsFileName: STRING
  AttemptsUploadC: INTEGER
  AttemptsUploadA: ARRAY[1..25] OF STRING[36]  //should be enough...
  initOK: INTEGER
  aGeoLocation: STRING[22]
  DeleteLocalData: (yes),EMPTY
  NotApp: (yes),EMPTY
  aLastSync: STRING
  aLastChange: STRING
  aStyleNr: INTEGER
  aStyleCount: INTEGER
//settings that influence CMA app
  CurrentLanguage: STRING
  CurLan "Select language": TLanguage
  LanguageCount: 0..3
  LanguageId: ARRAY[1..3] of INTEGER
  LanguageID1, LanguageID2, LanguageID3: STRING[10]
  LanguageImage: ARRAY[1..3] of STRING
  LanguageEnum: (flag1 "<img src=^LanguageImage[1]>", 
                 flag2 "<img src=^LanguageImage[2]>", 
                 flag3 "<img src=^LanguageImage[3]>")
  SetupPath: STRING
  CMAServerparkName: STRING
  LauncherServerParkName: STRING
  CMAContactInfoPath: STRING
  CMAAttemptsPath: STRING
  ClientSpecificSync: (yes),EMPTY
//settings 
  UploadChanges: (yes)
  TrackGeoPosition: (yes)
  TrackTimeUsed: (yes)
  SyncWhenConnected: (yes),EMPTY
  AskSync: (yes),EMPTY
  DaysToAutoRelease: 1..99, EMPTY 
  RemoveSurveyWhenNoCasesLeft: (yes),EMPTY
  LastLogUpload: DATETYPE
  DeviceInfoLogged: (yes),EMPTY
  DeviceType: STRING[20]
  ShowResult: (rCodeOnly,rStrOnly,rBoth,rLabOnly,rCodeLab),EMPTY
  DoNotMaximizeEditWindow: (yes),EMPTY
  Orientation: (portrait,landscape,both),empty
  SelectedStyle: 1..10
  SelectedSortOn: 1..10,EMPTY
  SelectedSortGrpOn: 1..10,EMPTY
  SelectedSurvey: STRING[36],EMPTY
  SelectedSurveyAtStart: STRING[36],EMPTY
  SelectedCasesToShow: 0..2,EMPTY
//  LanguageFlags: (LanFlag1 "<img src=^LanguageFlagstr[1]>", 
//                  LanFlag2 "<img src=^LanguageFlagstr[2]>", 
//                  LanFlag3 "<img src=^LanguageFlagstr[3]>")
//  LanguageFlagstr: ARRAY[1..3] of STRING
  
  DefaultCMA_AttemptsGUID: STRING //original GUID. To be used when no other information is available
  CurrentContactTemplateID: STRING
  CurrentAttemptsTemplateID: STRING
  CurrentTemplateInfo: STRING
  CurrentAttemptsTemplateInfo: STRING
  CurrentSurveyGUID: STRING
  CurrentSurveySettings: STRING
  CurrentContactTemplate: OPEN 
  CurrentAttemptsTemplate: OPEN
  CurrentCaseGuid: STRING
  CurrentCaseID: STRING
  CurrentAttemptsGUID: STRING
  CurrentContactInfoShort: STRING
  CurrentGroupID: STRING
  CurrentGroupGUID: STRING //parent GUID
  CurrentTheSortValue: STRING
  CurrentTheSortGrpValue: STRING
  CurrentGroupSort: STRING
  auxAccuracy: STRING
  SurveysWithoutSettings: OPEN
  SurveysDuringSync: OPEN


  cTab: STRING[1]
  customDataSep1,customDataSep2: STRING[1]
  contactDataSep1,contactDataSep2: STRING[1]
  auxDisplaySetting: STRING
  auxNotActiveSurveys: OPEN
  auxRefreshSurveyList: (yes),EMPTY //to work around a bug where essential variable SetupFileName is empty...

CONST //CMA system consts. DO NOT CHANGE. Can not be translated!
  cNullGUID = '00000000-0000-0000-0000-000000000000'
  cNull = 'NULL'
  cMaxRetryDownload = 3
  cRetryDelay = 1000 //ms
  cmaLogName = 'cma_logging.txt'
  cmaLogBackup = 'cma_logbackup.txt'
  cmaLocSettings = 'settings.xml'
  cmaSettings = 'CMA_settings.xml'
  cmaSyncTrace = 'CMA_synctrace.csv'
  cmaSyncTraceAll = 'CMA_synctraceAll.csv'
  cmaGetFiles = 'getfiles.zip'
  cmaPutFiles = 'putfiles.zip'
  srvSurveys = 'Surveys'
  cGeoWaitTime = 6000 //msec
  cGeoPosTreshold = 20 //seconds

  srvCases = 'cma_launcher'
  srvAttempts = 'cma_attempts'
  srvLogging = 'cma_logging'
  srvContactInfo = 'cma_contactinfo'
  srvClientInfo = 'cma_clientinfo'
  cDateTimeFormat = 'yyyyMMdd,HH:mm:sszzz'
  cDateTimeFormatMS = 'yyyyMMdd HH:mm:ss.fff'
  cmaMessageName = 'cma_messages.txt'
  cmaDetailsTemplate = 'detailstemplate_'
  cmaDefaultTemplate = 'detailstemplate_cma_'
  cmaAttemptsTemplate = 'attemptstemplate_'
  cmaDefaultAttemptsTemplate = 'attemptstemplate_cma_'
  cDefaultFieldFilter = 'tContactInfoShort,tSurveyName,tStatus,tAttemptsCount,tLastResult,tAppointment,tIdentifier,tLastAttempt'
  cDefaultFieldFilterTopic = 'tContactInfoShort,tStatus,tAttemptsCount,tLastResult,tAppointment,tIdentifier,tLastAttempt'
  cDefaultFieldFilterGroup = 'tSurveyName,tStatus,tAttemptsCount,tLastResult,tAppointment,tIdentifier,tSpawnCount,tLastAttempt'
  cTrigramForHeaven = '☰' //menu symbol
  cDisplayMessage = '<B><FONT SIZE={FontSize}>'
  cPortraitSeparator = '<!--$Portrait-->'
  cLandscapeSeparator = '<!--$Landscape-->'
  //Trace consts
  cTraceSkipped    = 'Skipped'
  cTraceUnhandled  = 'Unhandled'
  cTraceChanged    = 'Changed'
  cTraceClosed     = 'Closed'
  cTraceError      = 'Error'
  cTraceConfirmed  = 'Confirmed'
  cTracePresent    = 'Present'
  cTraceFailed     = 'Failed'
  cTraceMissing    = 'Missing'
  cTraceGroup      = 'Group'
  
CONST //CMA language consts
  cAttemptsTemplate = EN "<table borderwidth=1 bordercolor=black grid=both gridwidth=1><column width=auto><column width=*><row><cell margin=\"4,2,4,2\"><left>When made:</left></cell><cell margin=\"4,2,4,2\" background=lightgray><left>$Att_When</left></cell></row><row><cell margin=\"4,2,4,2\"><left>Result:</left></cell><cell margin=\"4,2,4,2\" background=lightgray><left>$Att_Result</left></cell></row><row><cell margin=\"4,2,4,2\"><left>Appointment:</left></cell><cell margin=\"4,2,4,2\" background=lightgray><left>$Att_Appointment</left></cell></row><row><cell margin=\"4,2,4,2\"><left>Note:</left></cell><cell margin=\"4,2,4,2\" background=lightgray><left>$Att_Note</left></cell></row></table>"
  cNotStarted = EN "Not started"
  cAdded = EN "Added"
  cCompleted = EN "Completed"
  cInterrupted = EN "Interrupted"
  cInterruptedDone = EN "Stopped"
  cUploaded = EN "Uploaded"
  cStarted = EN "Started"
  cFinalized = EN "Finalized"
  cReopened = EN "Reopened"
  cDone = EN "Done"
  cClosed = EN "Closed" //translate
  cShowImage = EN "Click to show image..."
  msgSaveChangedNote = EN "Save changed note?" 
  msgNoCases = EN "No cases available! Press Sync to Synchronize" 
  msgAfterEndDate = EN "Action not possible because after end date of case" 
  msgBeforeStartDate = EN "Action not possible because before start date of case" 
  msgNothingToUpload = EN "Nothing to upload!" 
  msgNothingToDownload = EN "Nothing to download!" 
  msgCompletedCases = EN "# Completed cases uploaded: " 
  msgBackupCases = EN "# Non-Completed cases uploaded: " 
  msgSurvey = EN "Survey" 
  msgRemoved = EN "removed from device" 
  msgInstallOfSurvey = EN "Install of survey" 
  msgUpdateOfSurvey = EN "Update of survey"
  msgFailed = EN "failed. Error: " 
  msgSucceeded = EN "Succeeded!" 
  msgNotPresent = EN "needed but not available for download on server" 
  msgNewCases = EN "# New cases downloaded: " 
  msgRestoredCases = EN "# Restored cases: " 
  msgCasesTransferred = EN "# Cases transferred: " 
  msgReleasedCases = EN "# Cases released: " 
  msgReopenedCases = EN "# Cases reopened: "
  msgClosedCases = EN "# Cases closed: "
  msgSyncNotPossible = EN "Synchronize was not possible. Error=" 
  msgStartFailed = EN "CMA failed to initialize. Please contact the help desk." 
  msgSurveyNotPresent = EN "Survey not present on the device" 
  msgNotConnected = EN "Synchronize not possible because you are not connected to the Internet." 
  msgSynchronize = EN "Synchronize?" 
  msgSyncing = EN "Syncing..." 
  msgInitializing = EN "Initializing..." 
  msgProcessing = EN "Processing..."
  msgSpawnNotPossible = EN "Adding case is not possible" 
  msgConfirmSpawn = EN "Are you sure you want to add a case?" 
  msgCreateAndInterview = EN "Are you sure you want to add case for \"$contactinfoshort\" and start an interview?"
  msgConfirmGeoLocCollect = EN "Are you sure you want to collect the geo position?"
  msgAllCasesHandled = EN "All cases have been handled of survey" 
  msgStartInterview = EN "Are you sure you want to start an interview for" 
  mgStartAttempt = EN "Are you sure you want to add an attempt?"
  msgContinueInterview = EN "Are you sure you want to continue the interview for" 
  msgCaseNotPresent = EN "Interview cannot start because preload is missing"
  msgAttemptsForCase = EN "Attempts for case" 
  msgUnableToStartInterview = EN "Unable to start interview. Please contact the help desk"
  msgNotAuthenticatedUser = EN "You are currently working in disconnected mode without authentication"
  msgError1001 = EN "Error 1001: Install of LAUNCHER-survey failed! Code:" 
  msgError1002 = EN "Error 1002: Install of LAUNCHER-survey not complete!" 
  msgError1003 = EN "Error 1003: Install of ATTEMPTS-survey failed! Code:" 
  msgError1004 = EN "Error 1004: Install of ATTEMPTS-survey not complete!" 
  msgError1005 = EN "Error 1005: CMA will be halted. Launcher survey needs to be updated on the server"
  msgError1006 = EN "Error 1006: Install of CONTACTINFO-survey failed! Code:" 
  msgError1007 = EN "Error 1007: Install of CONTACTINFO-survey not complete!" 
  msgError1008 = EN "Error 1008: CMA needs to be installed in server park with 'Sync surveys when connected' set to TRUE" 
  msgError1009 = EN "Error 1009: Error initializing CMA. Try restarting the Blaise program" 
  
  msgGeoLocationFailed = EN "Geo position could not be determined" 
  msgGeoLocationDetermined = EN "Geo position has been determined. Accuracy is $accuracy m" 
  msgReopenedHandled = EN "Has this reopened case been handled completely?" 
  msgLogUploadOKay = EN "The log has been uploaded"
  msgLogUploadFailed = EN "The upload of the log failed"
  msgDownloadCase = EN "Case not present. Download case now?"
  msgDownloadFailed = EN "Download of case failed"
  msgUploadFailed = EN "Upload of cases failed!"
  msgSyncErrorMinus10 = EN "No network access"
  msgSyncErrorMinus2 = EN "Downloading failed"
  msgSyncErrorMinus4 = EN "The user is not authorized to perform the requested action"
  msgUnexpectedSyncError = EN "An unexpected error occurred while preparing to sync. If this issue persists, try restarting the application."
  msgConfirmSetGroupToDone = EN "Are you sure the group needs to be set to Done?"
  msgServerMaintenance = EN "Server maintenance. Synchronizing currently not possible!" 
  
  //for portrait mode in menu
  txtAll = EN "<All surveys>"
  txtNonCompleted = EN "Non-completed"
  txtCompleted = EN "Completed"
  
FUNCTION NowDT: STRING
INSTRUCTIONS
  RESULT:= TIMETOSTR(SYSTIME,cDateTimeFormat)
ENDFUNCTION

FUNCTION NowDTMS: STRING
INSTRUCTIONS
  RESULT:= TIMETOSTR(SYSTIME,cDateTimeFormatMS)
ENDFUNCTION


FUNCTION SysDateStr: STRING
INSTRUCTIONS
  RESULT:= TIMETOSTR(SYSTIME,'yyyyMMdd')
ENDFUNCTION 

PROCEDURE AddToLog
PARAMETERS pTextToLog: STRING
INSTRUCTIONS
  oLog.OPEN(SetupPath+cmaLogName,APPEND)
  oLog.LogWhen:= NowDT
  oLog.LogText:= pTextToLog
  oLog.WRITE
  oLog.RELEASE
ENDPROCEDURE

PROCEDURE ShowLog
INSTRUCTIONS
  iLog.OPEN(SetupPath+cmaLogName)
  dShowTheLogging
  iLog.RELEASE
ENDPROCEDURE

PROCEDURE CopyLog
INSTRUCTIONS
  iLog.OPEN(SetupPath+cmaLogName)
  oLogBackup.OPEN(SetupPath+cmaLogBackup)
  REPEAT
    iLog.READNEXT
    oLogBackup:= iLog
    oLogBackUp.WRITE
  UNTIL iLog.LASTRECORD  
  iLog.RELEASE
  oLogBackup.RELEASE
ENDPROCEDURE 

PROCEDURE EraseLog
AUXFIELDS iRes: INTEGER
INSTRUCTIONS
  IF iSettings.sPreserveLogfileOnClient=yes THEN
    CopyLog
  ENDIF  
  iRes:= DELETEFILE(SetupPath+cmaLogName)
ENDPROCEDURE 

PROCEDURE EraseMessageFile
AUXFIELDS iRes: INTEGER
INSTRUCTIONS
  IF FILEEXISTS(SetupPath+cmaMessageName) THEN
    iRes:= DELETEFILE(SetupPath+cmaMessageName)
  ENDIF  
ENDPROCEDURE 

PROCEDURE DisplayOnScreen
PARAMETERS pS: OPEN Mode: INTEGER
INSTRUCTIONS
  AddToLog('Display: '+pS)
  IF Mode=1 THEN
    DISPLAY(auxDisplaySetting+pS,WAIT)
  ELSEIF Mode=2 THEN
    DISPLAY(auxDisplaySetting+pS,PERMANENT)
  ELSEIF Mode=3 THEN
    DISPLAY(auxDisplaySetting+pS,HOURGLASS)
  ENDIF
ENDPROCEDURE

FUNCTION DateForDisplay: STRING
PARAMETERS pDT: STRING
INSTRUCTIONS
  IF pDT<>'' THEN
    RESULT:= DATETOSTR(STRTODATE(pDT,cDateTimeFormat))+', '+TIMETOSTR(STRTOTIME(pDT,cDateTimeFormat),'H:mm:ss')
  ELSE
    RESULT:= ''
  ENDIF    
ENDFUNCTION

//general usage procedures/functions
FUNCTION GetTitleFromMeta: STRING
PARAMETERS
  pMeta: METATYPE
  pFieldName: STRING
  pLanguage: STRING
AUXFIELDS
  tmp: STRING
INSTRUCTIONS  
  IF [[pMeta.GetField(pFieldName).RoleTexts.Contains('Question')]]='True' THEN
    IF [[pMeta.GetField(pFieldName).RoleTexts.GetItem('Question').Texts.Contains(pLanguage)]]='True' THEN
      tmp:= [[pMeta.GetField(pFieldName).RoleTexts.GetItem('Question').Texts.GetItem(pLanguage).ToFormattedString(SourceCode)]]
    ENDIF
  ENDIF
  tmp:= REPLACE(tmp, CHAR(13)+CHAR(10),' ')
  RESULT:= tmp
ENDFUNCTION

FUNCTION GetCategoryText: STRING
PARAMETERS 
  pMeta: METATYPE 
  pName: STRING
  pLanguage: STRING
  pCode: INTEGER
AUXFIELDS
  i: INTEGER  
  aLan: STRING
INSTRUCTIONS
  RESULT:= ''
  FOR i:= 1 TO VAL([[pmeta.GetField(pName).Type.Categories.Count]]) DO
    IF VAL([[pmeta.GetField(pName).Type.Categories[i-1].Code]])=pCode THEN
      IF [[pmeta.GetField(pname).Type.Categories[i-1].Texts.Contains(pLanguage)]]='True' THEN
        RESULT:= [[pmeta.GetField(pname).Type.Categories[i-1].Texts.GetItem(pLanguage).Text]]
      ENDIF
      IF RESULT='' THEN //revert to first language of datamodel
        aLan:= [[pMeta.languages[0].name]]
        IF [[pmeta.GetField(pname).Type.Categories[i-1].Texts.Contains(aLan)]]='True' THEN
          RESULT:= [[pmeta.GetField(pname).Type.Categories[i-1].Texts.GetItem(aLan).Text]]
        ENDIF  
      ENDIF
      EXITFOR
    ENDIF  
  ENDDO
ENDFUNCTION

FUNCTION GetCategoryNameForCode: STRING
PARAMETERS 
  pMeta: METATYPE
  pName: STRING
  pCode: INTEGER
AUXFIELDS
  i: INTEGER  
INSTRUCTIONS
  RESULT:= ''
  FOR i:= 1 TO VAL([[pmeta.GetField(pName).Type.Categories.Count]]) DO
    IF VAL([[pmeta.GetField(pName).Type.Categories[i-1].Code]])=pCode THEN
      RESULT:= [[pmeta.GetField(pname).Type.Categories[i-1].Name]]
    ENDIF  
  ENDDO
ENDFUNCTION

FUNCTION SystemSurvey: INTEGER
PARAMETERS srv: STRING
INSTRUCTIONS
  IF LOWERCASE(srv)=srvCases OR 
     LOWERCASE(srv)=srvAttempts OR 
     LOWERCASE(srv)=srvLogging OR
     LOWERCASE(srv)=srvContactInfo OR
     LOWERCASE(srv)=srvClientInfo
  THEN
    RESULT:= 1
  ELSE
    RESULT:= 0
  ENDIF    
ENDFUNCTION

FUNCTION GetEntryOnName: OPEN
PARAMETERS
  pText: OPEN
  pName: STRING
  pSep1: STRING
  pSep2: STRING
AUXFIELDS 
  p, p_sep: INTEGER
INSTRUCTIONS
  p:= POSITION(pSep2+UPPERCASE(pName)+pSep1,pSep2+UPPERCASE(pText))
  IF p>0 THEN
    IF SUBSTRING(pText,p+LEN(pName)+1,1)='"' THEN
      p_sep:= p+LEN(pName)+1 //search next not-escaped "...
      REPEAT
        p_sep:= POSITION('"',pText,p_sep+1)
      UNTIL SUBSTRING(pText,p_sep-1,1)<>'\\' OR p_sep=0
      IF p_sep=0 THEN p_sep:= LEN(pText)+1 ENDIF
      RESULT:= SUBSTRING(pText,p+LEN(pName)+2,p_sep-(p+LEN(pName))-2)
    ELSE
      p_sep:= POSITION(pSep2,pText,p+LEN(pName)+1)
      IF p_sep=0 THEN p_sep:= LEN(pText)+1 ENDIF
      RESULT:= SUBSTRING(pText,p+LEN(pName)+1,p_sep-(p+LEN(pName))-1)
    ENDIF  
  ELSE
    RESULT:= ''  
  ENDIF  
  RESULT:= REPLACE(RESULT,'\"','"')
ENDFUNCTION

PROCEDURE ReplaceEntryOnName
PARAMETERS
  TRANSIT pText: OPEN
  IMPORT pName: STRING
  IMPORT pValue: OPEN
  IMPORT pSep1: STRING
  IMPORT pSep2: STRING
AUXFIELDS 
  p, p_sep: INTEGER
  aValue: OPEN
INSTRUCTIONS
  IF pName<>'' THEN
    p:= POSITION(pSep2+UPPERCASE(pName)+pSep1,pSep2+UPPERCASE(pText))
    aValue:= pValue
    IF POSITION(pSep2,aValue)>0 THEN //requires "" around aValue
      aValue:= REPLACE(aValue,'\"',CHAR(99999))  
      aValue:= REPLACE(aValue,'"','\"')
      aValue:= REPLACE(aValue,CHAR(99999),'\"')  
      aValue:= '"'+aValue+'"' //final value to be stored
    ENDIF
    IF p>0 THEN
      IF SUBSTRING(pText,p+LEN(pName)+1,1)='"' THEN
        p_sep:= p+LEN(pName)+1 //search next not-escaped "...
        REPEAT
          p_sep:= POSITION('"',pText,p_sep+1)
        UNTIL SUBSTRING(pText,p_sep-1,1)<>'\\' OR p_sep=0
        IF p_sep=0 THEN p_sep:= LEN(pText)+1 ELSE p_sep:= p_sep+1 ENDIF
        pText:= SUBSTRING(pText,1,p+LEN(pName))+aValue+SUBSTRING(pText,p_sep,LEN(pText))
      ELSE  
        p_sep:= POSITION(pSep2,pText,p+LEN(pName)+1)
        IF p_sep=0 THEN p_sep:= LEN(pText)+1 ENDIF
        pText:= SUBSTRING(pText,1,p+LEN(pName))+aValue+SUBSTRING(pText,p_sep,LEN(pText))
      ENDIF  
    ELSE
      IF pText<>'' THEN
        IF SUBSTRING(pText,len(pText),1)<>pSep2 THEN pText:= pText+pSep2 ENDIF
      ENDIF  
      pText:= pText+pName+pSep1+aValue+pSep2 
    ENDIF
  ENDIF    
ENDPROCEDURE  

FUNCTION GetNextPair: OPEN
PARAMETERS
  pText: OPEN
  pSep1: STRING
  pSep2: STRING
  TRANSIT pStartAt: INTEGER
AUXFIELDS 
  p, p_sep1, p_sep2, pDoubleQ, p_sep: INTEGER
  HasDoubleQuote: (yes),EMPTY
INSTRUCTIONS
  RESULT:= ''  
  p:= pStartAt
  p_sep1:= POSITION(pSep1,pText,p)
  IF p_sep1>0 THEN
    IF SUBSTRING(pText,p_sep1,2)=pSep1+'"' THEN
      HasDoubleQuote:= yes
      pDoubleQ:= p_sep1+1
      p_sep:= p_sep1+2 //search next not-escaped "...
      REPEAT
        p_sep:= POSITION('"',pText,p_sep+1)
      UNTIL SUBSTRING(pText,p_sep-1,1)<>'\\' OR p_sep=0
      p_sep2:= p_sep
      IF p_Sep2=0 THEN p_Sep2:= len(pText)+1
      ELSE p_Sep2:= p_Sep2+1
      ENDIF
    ELSE  
      p_sep2:= POSITION(pSep2,pText,p_sep1+1)
    ENDIF
    IF p_sep2>0 THEN 
      IF HasDoubleQuote=yes THEN
        RESULT:= SUBSTRING(pText,p,pDoubleQ-p)+SUBSTRING(pText,pDoubleQ+1,p_sep2-pDoubleq-2)
      ELSE
        RESULT:= SUBSTRING(pText,p,p_sep2-p)
      ENDIF
      pStartAt:= p_sep2+1
    ELSE  
      RESULT:= SUBSTRING(pText,p,LEN(pText)-p+1)
      pStartAt:= -1
    ENDIF 
  ELSE
   pStartAt:= -2
  ENDIF  
  RESULT:= REPLACE(RESULT,'\"','"') 
ENDFUNCTION

FUNCTION GetEntry: OPEN
//retrieves the from string with separator pChar the pIndex-th entry
PARAMETERS 
  pText: OPEN
  pIndex: INTEGER
  pSepChar: STRING
AUXFIELDS
  i, p, next: INTEGER
INSTRUCTIONS
  p:= 0
  RESULT:= ''
  FOR i:= 1 TO pIndex-1 DO 
    p:= POSITION(pSepChar,pText,p+1) 
  ENDDO
  IF p<>0 OR pIndex=1 THEN
    next:=  POSITION(pSepChar,pText,p+1) 
    IF next=0 THEN
      RESULT:= SUBSTRING(pText,p+1,LEN(pText))
    ELSE
      RESULT:= SUBSTRING(pText,p+1,next-p-1)   
    ENDIF
  ENDIF
ENDFUNCTION

FUNCTION LastPosition : INTEGER
PARAMETERS 
  pSub: STRING
  pString: STRING 
AUXFIELDS
  p, next: INTEGER  
INSTRUCTIONS  
  p:= POSITION(pSub,pString)
  IF p=0 THEN
    RESULT:= 0
  ELSE
    REPEAT
      next:= POSITION(pSub,pString,p+1)
      IF next<>0 THEN p:= next eNdif
    UNTIL next=0
    RESULT:= p
  ENDIF      
ENDFUNCTION
  
FUNCTION MakePrimaryKeyFilter: STRING
PARAMETERS
  pKeyCount: INTEGER
  pKeyNames: STRING
  pID: STRING
AUXFIELDS
  index: integer
INSTRUCTIONS
  RESULT:= ''
  FOR index:= 1 TO pKeyCount DO
    IF index<>1 then RESULT:= RESULT + ' AND ' ENDIF
    RESULT:= RESULT + GetEntry(pKeyNames,index,';')+'='+ '\''+GetEntry(pID,index,',')+'\''
  ENDDO   
ENDFUNCTION

FUNCTION GetPrimaryKeyNames: STRING
PARAMETERS
  pMeta: METATYPE 
AUXFIELDS
  i, c: integer
INSTRUCTIONS
  RESULT:= ''
  c:= VAL([[pMeta.Keys.GetItem('primary').Fields.Count]])
  FOR i:= 0 TO c-1 DO
    RESULT:= RESULT+[[pMeta.Keys.GetItem('primary').Fields[i].Name]]
    IF i<>c-1 THEN RESULT:= RESULT +';' ENDIF    
  ENDDO
ENDFUNCTION  

//Function to extract a path from a full file path string
FUNCTION ExtractFilePath: OPEN
PARAMETERS pFilename: OPEN
INSTRUCTIONS
  RESULT:= REGEXSTRING('.*(\\\\|/)',pFileName)
ENDFUNCTION 

FUNCTION ExtractFileName: OPEN
PARAMETERS pFilename: OPEN
AUXFIELDS tmp: OPEN
INSTRUCTIONS
  tmp:= ExtractFilePath(pFileName)
  RESULT:= REPLACE(pFileName,tmp,'')
ENDFUNCTION 

FUNCTION IsConnected: INTEGER
INSTRUCTIONS
   IF NETWORKCONNECTIVITYTYPE IN ['Wifi', 'Mobile', 'Ethernet'] THEN 
     RESULT:= 1 
   ELSE  
     RESULT:= 0
   ENDIF
ENDFUNCTION

AUXFIELDS
  auxAutoSizeBtns: (yes),EMPTY
  QuitLogging: (Synchronize EN "<img src=Synchronize>", OK EN "<img src=BackButton2>")
  CurrentVersion: STRING
  VersionInfo "^{CurrentVersion}": STRING
  
PROCEDURE UploadLogging
PARAMETERS pForced: INTEGER
AUXFIELDS 
  iRes: INTEGER
  iBlob: BLOBTYPE MAXSIZE=10MB
INSTRUCTIONS
  IF IsConnected=1 THEN
    IF (SYSDATE<>LastLogUpload) OR (pForced=1) OR FILEEXISTS(SetupPath+cmaMessageName) THEN
      srvList.GET(SECONDARY,srvLogging) 
      IF srvList.RESULTOK THEN //Monitoring survey is installed
        iRes:= DELETEFILE(REPLACE(srvList.GetSurveyDataFilename,'.bdix','.bdbx',IGNORE))
        iRes:= DELETEFILE(srvList.GetSurveyDataFilename)
        iRes:= ufServerLogging.OPEN(REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE))
        IF iRes=0 THEN
          ufServerLogging.INITRECORD
          ufServerLogging.UserID:= USERNAME
          ufServerLogging.LogWhen:= NowDT
          iRes:= iBlob.LOADFROMDISK(SetupPath+cmaLogName)
          ufServerLogging.Logging:= iBlob
          IF FILEEXISTS(SetupPath+cmaMessageName) THEN
            iRes:= iBlob.LOADFROMDISK(SetupPath+cmaMessageName)
            ufServerLogging.Extra:= iBlob
          ENDIF  
          ufServerLogging.WRITE
          ufServerLogging.RELEASE
          iRes:= srvList.UPLOADDATA
          IF iRes>=1 THEN //1 or more records uploaded; should be only 1...
            EraseLog
            EraseMessageFile
            ufServerLogging.ERASE
            LastLogUpload:= SYSDATE
            WriteSettings
            AddToLog('Logging uploaded')
            IF pForced=1 THEN
              DisplayOnScreen(msgLogUploadOKay,1)
            ENDIF  
          ELSE
            AddToLog('Upload of logging failed. Result: '+str(iRes)) 
            IF pForced=1 THEN
              DisplayOnScreen(msgLogUploadFailed,1)
            ENDIF 
            ufServerLogging.ERASE 
          ENDIF  
        ELSE
          AddToLog('Open of logging database failed. Result: '+str(iRes))  
        ENDIF  
      ENDIF 
    ENDIF  
  ELSE
    IF pForced=1 THEN DisplayOnScreen(msgNotConnected,1) ENDIF 
  ENDIF
ENDPROCEDURE

PROCEDURE ChangeStyle
INSTRUCTIONS
  IF auxStyleNr<auxStyleCount THEN
    auxStyleNr:= auxStyleNr+1
  ELSE
    auxStyleNr:= 1
  ENDIF    
  auxStyle:= iSettings.sStyle[auxStyleNr]
  IF iSettings.sTextFontSize[auxStyleNr]<>EMPTY THEN
    auxTextFontSize:= iSettings.sTextFontSize[auxStyleNr]
  ENDIF 
  IF auxIsNonWindows=EMPTY THEN //no support for this on Android/iOS
    auxDisplaySetting:= REPLACE(cDisplayMessage,'{FontSize}',STR(auxTextFontSize)) 
  ENDIF  
  SelectedStyle:= auxStyleNr
  AddToLog('Selected style: '+auxStyle)
ENDPROCEDURE

FUNCTION TimeDifferenceInSeconds: INTEGER
PARAMETERS
  pFirst, pLast: STRING
AUXFIELDS
  ds,dt: DATETIMETYPE
INSTRUCTIONS
  IF pFirst<>'' AND pLast<>'' THEN
    dt:= STRTODATETIME(pFirst,'yyyy-MM-ddTHH:mm:ss.fffzzz')
    ds:= STRTODATETIME(pLast,'yyyy-MM-ddTHH:mm:ss.fffzzz')
    RESULT:= 
      (ds.julian-dt.julian)*24*60*60+ 
      ((ds.hour*60*60+ds.minute*60+ds.second)-(dt.hour*60*60+dt.minute*60+dt.second))
  ELSE
    RESULT:= -1
  ENDIF 
ENDFUNCTION

FUNCTION GetGeoExSubValue:STRING
PARAMETERS pGeo,pSub: STRING
//TimeStamp=2021-10-22T17:20:52.551+03:00,Updated=True,PositionTimeStamp=2021-10-22T17:20:38.746+03:00
AUXFIELDS
  p1, p2: integer
INSTRUCTIONS
  p1:= POSITION(pSub,pGeo)
  IF p1>0 THEN
  p2:= POSITION(',',pGeo,p1) 
  IF p2=0 THEN p2:= LEN(pGeo)+1 ENDIF
  RESULT:= SUBSTRING(pGeo,p1+LEN(Psub)+1,p2-p1-LEN(Psub)-1)
  ELSE
    RESULT:= ''
  ENDIF    
ENDFUNCTION     

FUNCTION GetCurrentLocation: STRING
AUXFIELDS
  aGeoLocEx, aGeoLoc: STRING
  Lat,Lon: STRING
  diff: INTEGER
  aGeoSet: STRING
INSTRUCTIONS
  aGeoSet:= 'Best'
  IF auxIsNonWindows=EMPTY THEN aGeoSet:= 'High' ENDIF 
  aGeoLocEx:= GETGEOPOSITION(aGeoSet,cGeoWaitTime,True)
  Lat:= GetGeoExSubValue(aGeoLocEx,'Latitude')
  Lon:= GetGeoExSubValue(aGeoLocEx,'Longitude')
  diff:= TimeDifferenceInSeconds(GetGeoExSubValue(aGeoLocEx,'PositionTimeStamp'),GetGeoExSubValue(aGeoLocEx,'TimeStamp'))
  aGeoLoc:= ''
  IF lat<>'' and lon<>'' THEN
    IF diff<=cGeoPosTreshold THEN
      aGeoLoc:= lat+','+lon
    ELSE  
      AddToLog('GeoEx not okay')  
    ENDIF  
  ELSE
    aGeoLocEx:= GETGEOPOSITION('Medium',cGeoWaitTime,True)
    Lat:= GetGeoExSubValue(aGeoLocEx,'Latitude')
    Lon:= GetGeoExSubValue(aGeoLocEx,'Longitude')
    diff:= TimeDifferenceInSeconds(GetGeoExSubValue(aGeoLocEx,'PositionTimeStamp'),GetGeoExSubValue(aGeoLocEx,'TimeStamp'))
    IF lat<>'' and lon<>'' THEN
      IF diff<=cGeoPosTreshold THEN
      aGeoLoc:= lat+','+lon
      ELSE  
        AddToLog('GeoEx Medium not okay')  
      ENDIF    
    ENDIF  
  ENDIF    
  AddToLog('CurrentLocation: '+aGeoLocEx)
  auxAccuracy:= GetGeoExSubValue(aGeoLocEx,'HorizontalAccuracy')
  Result:= aGeoLoc
ENDFUNCTION

PROCEDURE WriteTempCaseAndUpdateCache
INSTRUCTIONS
  IF auxParentChildView=yes THEN 
    tGroupCase:= tCase
    tGroupCase.WRITE
  ELSE
    tMainCase:= tCase
    tMainCase.WRITE  
    tCaseCache:= tCase
    tCaseCache.WRITE
  ENDIF  
ENDPROCEDURE

PROCEDURE WriteLocalCaseAndFlush
INSTRUCTIONS
  ufLocalCases.WRITE
  ufLocalCases.FLUSH
ENDPROCEDURE

PROCEDURE GeoButtonClick
AUXFIELDS
  aGeoLoc: STRING
INSTRUCTIONS
  IF tCase.tMainSurveyID<>EMPTY THEN
    IF CONFIRM(auxDisplaySetting+msgConfirmGeoLocCollect) THEN
      aGeoLoc:= GetCurrentLocation
      IF aGeoLoc<>'' THEN
        ufLocalCases.GET(CurrentCaseGUID,CurrentCaseID)
        ufLocalCases.CMA_GeoLocation:= aGeoLoc
        {$ifdef UseDateTimeType}
        ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(NowDT,cDateTimeFormat) 
        {$else}
        ufLocalCases.CMA_Process.LastChangedDT:= NowDT 
        {$endif}
        WriteLocalCaseAndFlush
        tCase.tGeoLocation:= aGeoLoc
        AddToLog('Geolocation stored for '+CurrentCaseGUID+','+CurrentCaseID+';accuracy='+auxAccuracy)
        DisplayOnScreen(REPLACE(msgGeoLocationDetermined,'$accuracy',auxAccuracy),1) 
        WriteTempCaseAndUpdateCache
      ELSE
        DisplayOnScreen(msgGeoLocationFailed,1) 
      ENDIF  
      PositionOnCurrentRecord
    ENDIF
  ELSE
    DisplayOnScreen(msgNoCases,1)
  ENDIF
ENDPROCEDURE

DATASOURCE mLogging:ilog
FIELDFILTER=LogWhen,LogText 

DIALOG dShowTheLogging EN "CMA logging" 
  DATASOURCEREFS mLogging ""
  FIELDREFS 
    auxAutoSizeBtns, VersionInfo, QuitLogging(OK)
  RULES
    auxAutoSizeBtns.KEEP
    VersionInfo.SHOW  

//start case assignment dialog related definitions
DATASOURCE mCases:tMainCase
SEARCHKEY=SECONDARY(secSort)
FIELDFILTER=TheSortValue,
            tContactInfoShort,tSurveyName,
            tCaseStatus,tGroupStatus,tStatus,
            tAttemptsCount,tLastResult,tAppointment,tGeoLocation,
            tIdentifier,tStartDate,tEndDate,
            tSpawnCount,tGroupID,tLastAttempt,
            tCaseNote,tCustomUse,tGroupSort,
            tCustomCol1,tCustomCol2,tCustomCol3,tCustomCol4,tCustomCol5,
            tCustomCol6,tCustomCol7,tCustomCol8,tCustomCol9,tCustomCol10
            
DATASOURCE gCases:tGroupCase
SEARCHKEY=SECONDARY(secSort)
FIELDFILTER=TheSortValue,
            tContactInfoShort,tSurveyName,
            tCaseStatus,tGroupStatus,tStatus,
            tAttemptsCount,tLastResult,tAppointment,tGeoLocation,
            tIdentifier,tStartDate,tEndDate,
            tSpawnCount,tGroupID,tLastAttempt,
            tCaseNote,tCustomUse,tGroupSort,
            tCustomCol1,tCustomCol2,tCustomCol3,tCustomCol4,tCustomCol5,
            tCustomCol6,tCustomCol7,tCustomCol8,tCustomCol9,tCustomCol10            
            
CONST
  cCFVUpper = 40
  cMaxSurveys = 40            
            
AUXFIELDS //auxfields used in case Cases dialog              
  //btnTextCases: array[1..8] of string
  btnCases: ( //buttons on case dialog
             ShowGroup "<img src=ShowGroup>" DISABLED "<img src=ShowGroupDisabled>" TOOLTIP EN "Show case group" ,
             Spawn "<img src=SpawnCasePlus>" DISABLED "<img src=SpawncasePlusDisabled>" TOOLTIP EN "Add case" ,
             IW EN "<img src=Interview>" DISABLED EN "<img src=InterviewDisabled>" TOOLTIP EN "Start interview" , //to start the interview
             Attempt "<img src=Account>" DISABLED "<img src=AccountDisabled>" TOOLTIP EN "Show attempts" , //to go to attempt dialog
             Update "<img src=Update>" DISABLED "<img src=UpdateDisabled>" TOOLTIP "Edit case" , //show update dialog
             CollectGeoLoc "<img src=DetermineGeoPos>" DISABLED "<img src=DetermineGeoPosDisabled>" TOOLTIP "Determine geo position" , 
             Synchronize "<img src=Synchronize>" DISABLED "<img src=SynchronizeDisabled>" TOOLTIP "Synchronize data" , 
             Quit (10) "<img src=Quit>"  DISABLED "<img src=QuitDisabled>" TOOLTIP "Quit application" 
             ),EMPTY
  btnGroup: ( //buttons on group dialog
             Spawn "<img src=SpawnCasePlus>" DISABLED "<img src=SpawncasePlusDisabled>" TOOLTIP EN "Add case" ,
             IW "<img src=Interview>" DISABLED "<img src=InterviewDisabled>" TOOLTIP EN "Start interview" , //to start the interview
             Add "<img src=AttemptAdd>" DISABLED "<img src=AttemptAddDisabled>" TOOLTIP EN "Add a new attempt" , //to add a new attempt
             Attempt "<img src=Account>" DISABLED "<img src=AccountDisabled>" TOOLTIP EN "Show attempts" , //to go to attempt dialog
             Update "<img src=Update>" DISABLED "<img src=UpdateDisabled>" TOOLTIP "Edit case" , //show update dialog
             CollectGeoLoc "<img src=DetermineGeoPos>" DISABLED "<img src=DetermineGeoPosDisabled>" TOOLTIP EN "Determine geo position" , 
             Done "<img src=Done>" DISABLED "<img src=DoneDisabled>" TOOLTIP "Set case to Done" ,
             Synchronize "<img src=Synchronize>" DISABLED "<img src=SynchronizeDisabled>" TOOLTIP "Synchronize data" , 
             Back "<img src=BackButton2>" TOOLTIP EN "Back to main screen"
             ),EMPTY 
  btnStyle: ( Change "<img src=ChangeFont>" DISABLED "<img src=ChangeFontDisabled>" TOOLTIP EN "Change style"
            ),EMPTY                       
  auxStatus : STRING
  auxGroupStatus : STRING
  auxGroupSummary : STRING
  auxLastResult : STRING
  auxContactData: OPEN
  auxLastAttempt : STRING[30]
  auxCaseNote : OPEN
  auxCurrentSurvey: STRING
  auxFinal: (no (0), yes),EMPTY
  auxWhatCasesToShow "Cases to show: " : 
                (
                 All (0) "<img src=AllCases>" DISABLED "<img src=AllCasesDisabled>" TOOLTIP EN "Show all cases" ,
                 Noncompleted (1) "<img src=InCompleteCases>" DISABLED "<img src=InCompleteCasesDisabled>" TOOLTIP EN "Show only non-completed cases" , 
                 Completed (2) "<img src=CompletedCases>" DISABLED "<img src=CompletedCasesDisabled>" TOOLTIP EN "Show only completed cases"  
                 ),EMPTY
                 
  srvNames: ARRAY[0..cMaxSurveys] OF STRING
  srvID: ARRAY[0..cMaxSurveys] OF STRING, EMPTY
  auxWhatSurveyToShowGUID: STRING, EMPTY
  TextToShow: STRING
  auxDataGridHeaderAll "List of all cases:" : STRING
  auxDataGridHeaderCompleted "List of all completed cases:" : STRING
  auxDataGridHeaderNonCompleted "List of all non-completed cases:" : STRING
  auxDataGridHeaderPortrait "^auxDataGridHeaderPortrait": STRING
  srvNamesCount: 0..cMaxSurveys
  auxSpawnAllowed:(no (0), yes), EMPTY
  auxIsDonorCase: (yes), EMPTY
  auxHasInterview: (yes),EMPTY
  auxCollapseDetails: (yes),EMPTY
  auxWhatSurveyToShow "Survey to show: " : 
                                          (srvAll (0) "\<All\>",
                                           srv1 "^SrvNames[1]",
                                           srv2 "^SrvNames[2]",
                                           srv3 "^SrvNames[3]",
                                           srv4 "^SrvNames[4]",
                                           srv5 "^SrvNames[5]",
                                           srv6 "^SrvNames[6]",
                                           srv7 "^SrvNames[7]",
                                           srv8 "^SrvNames[8]",
                                           srv9 "^SrvNames[9]",
                                           srv10 "^SrvNames[10]",
                                           srv11 "^SrvNames[11]",
                                           srv12 "^SrvNames[12]",
                                           srv13 "^SrvNames[13]",
                                           srv14 "^SrvNames[14]",
                                           srv15 "^SrvNames[15]",
                                           srv16 "^SrvNames[16]",
                                           srv17 "^SrvNames[17]",
                                           srv18 "^SrvNames[18]",
                                           srv19 "^SrvNames[19]",
                                           srv20 "^SrvNames[20]",
                                           srv21 "^SrvNames[21]",
                                           srv22 "^SrvNames[22]",
                                           srv23 "^SrvNames[23]",
                                           srv24 "^SrvNames[24]",
                                           srv25 "^SrvNames[25]",
                                           srv26 "^SrvNames[26]",
                                           srv27 "^SrvNames[27]",
                                           srv28 "^SrvNames[28]",
                                           srv29 "^SrvNames[29]",
                                           srv30 "^SrvNames[30]",
                                           srv31 "^SrvNames[31]",
                                           srv32 "^SrvNames[32]",
                                           srv33 "^SrvNames[33]",
                                           srv34 "^SrvNames[34]",
                                           srv35 "^SrvNames[35]",
                                           srv36 "^SrvNames[36]",
                                           srv37 "^SrvNames[37]",
                                           srv38 "^SrvNames[38]",
                                           srv39 "^SrvNames[39]",
                                           srv40 "^SrvNames[40]"
                                           ),EMPTY
   CustomFV: ARRAY[1..cCFVUpper] OF STRING 
   auxHasCustomFilter: (yes),EMPTY
   auxUseSearchButton: (yes),EMPTY
   auxTextFontSize: INTEGER
   auxCustomFilterTxt: STRING   
   auxCustomFilterCount: INTEGER
   auxCustomFilterValue: STRING
   auxCustomFilter "^auxCustomFilterTxt: " : 
                                          (cfvAll (0) "\<All\>",
                                           cfv1 "^CustomFV[1]",
                                           cfv2 "^CustomFV[2]",
                                           cfv3 "^CustomFV[3]",
                                           cfv4 "^CustomFV[4]",
                                           cfv5 "^CustomFV[5]",
                                           cfv6 "^CustomFV[6]",
                                           cfv7 "^CustomFV[7]",
                                           cfv8 "^CustomFV[8]",
                                           cfv9 "^CustomFV[9]",
                                           cfv10 "^CustomFV[10]",
                                           cfv11 "^CustomFV[11]",
                                           cfv12 "^CustomFV[12]",
                                           cfv13 "^CustomFV[13]",
                                           cfv14 "^CustomFV[14]",
                                           cfv15 "^CustomFV[15]",
                                           cfv16 "^CustomFV[16]",
                                           cfv17 "^CustomFV[17]",
                                           cfv18 "^CustomFV[18]",
                                           cfv19 "^CustomFV[19]",
                                           cfv20 "^CustomFV[20]",
                                           cfv21 "^CustomFV[21]",
                                           cfv22 "^CustomFV[22]",
                                           cfv23 "^CustomFV[23]",
                                           cfv24 "^CustomFV[24]",
                                           cfv25 "^CustomFV[25]",
                                           cfv26 "^CustomFV[26]",
                                           cfv27 "^CustomFV[27]",
                                           cfv28 "^CustomFV[28]",
                                           cfv29 "^CustomFV[29]",
                                           cfv30 "^CustomFV[30]",
                                           cfv31 "^CustomFV[31]",
                                           cfv32 "^CustomFV[32]",
                                           cfv33 "^CustomFV[33]",
                                           cfv34 "^CustomFV[34]",
                                           cfv35 "^CustomFV[35]",
                                           cfv36 "^CustomFV[36]",
                                           cfv37 "^CustomFV[37]",
                                           cfv38 "^CustomFV[38]",
                                           cfv39 "^CustomFV[39]",
                                           cfv40 "^CustomFV[40]"
                                           ),EMPTY
   auxFilter EN "Filter:" : STRING, EMPTY
   auxConfirmedFilter: STRING
   auxIsNonWindows: (yes)
   auxDeviceInfo: STRING
   auxCustomDetailsTable: OPEN
   auxDetails "^{auxCustomDetailsTable}": STRING[1]
   auxCustomTemplate: STRING[10],EMPTY
   auxGeoLocation: STRING[20]
   auxHasImage: (yes),EMPTY
   auxParentChildView: (yes),EMPTY
   auxGroupType: (parent,child),EMPTY
   auxFieldFilter:OPEN 
   auxFieldFilterTitles: OPEN
   auxFieldFilterWidths: OPEN
   auxStyleCount: INTEGER
   auxStyleNr: INTEGER
   auxStyle: STRING
   auxDoNotAllowEditCase: (yes,no),EMPTY
   auxDoNotAllowManualAttempt: (yes),EMPTY
   auxDoNotAllowShowingAttempts: (yes),EMPTY
   auxDoNotAllowUpdateAttemptNote: (yes),EMPTY
   auxShowGeoPositionBtn: (yes),EMPTY
   auxShowLanguageDropDown: (yes),EMPTY
   auxAllowSort: (yes), EMPTY
   auxSortText: array[1..10] of STRING
   auxSortOn "Select display order: ": 
                (sec1 (1) "^AuxSortText[1]",
                 sec2 (2) "^AuxSortText[2]",
                 sec3 (3) "^AuxSortText[3]",
                 sec4 (4) "^AuxSortText[4]",
                 sec5 (5) "^AuxSortText[5]",
                 sec6 (6) "^AuxSortText[6]",
                 sec7 (7) "^AuxSortText[7]",
                 sec8 (8) "^AuxSortText[8]",
                 sec9 (9) "^AuxSortText[9]",
                 sec10 (10) "^AuxSortText[10]"),EMPTY
   auxAllowGrpSort: (yes), EMPTY
   auxSortGrpText: array[1..10] of STRING
   auxSortGrpOn "Select display order: ": 
                (sec1 (1) "^AuxSortGrpText[1]" ,
                 sec2 (2) "^AuxSortGrpText[2]",
                 sec3 (3) "^AuxSortGrpText[3]",
                 sec4 (4) "^AuxSortGrpText[4]",
                 sec5 (5) "^AuxSortGrpText[5]",
                 sec6 (6) "^AuxSortGrpText[6]",
                 sec7 (7) "^AuxSortGrpText[7]",
                 sec8 (8) "^AuxSortGrpText[8]",
                 sec9 (9) "^AuxSortGrpText[9]",
                 sec10 (10) "^AuxSortGrpText[10]"),EMPTY
   auxShowGroupDoneBtn: (yes),EMPTY 
   auxCurrentDoneStatus: STRING
   auxEnableGroupDoneBtn: (yes),EMPTY
   auxShowGroupAddAttemptBtn: (yes),EMPTY 
   auxParentDoneValues: STRING
   auxManualAttemptWhenIntStarted: (yes),EMPTY
   auxInPortraitMode: (yes),EMPTY
   auxCount: INTEGER
   auxLayoutSetName: STRING
   
DIALOG dCases "CMA - Available cases" 
  DATASOURCEREFS mCases "" 
  FIELDREFS 
    CurrentLanguage,
    CurLan,
    auxDataGridHeaderAll,
    auxDataGridHeaderCompleted,
    auxDataGridHeaderNonCompleted,
    auxDataGridHeaderPortrait,
    auxDoNotAllowEditCase,
    auxDoNotAllowShowingAttempts, //shuts down the show attempts dialog button
    auxShowGeoPositionBtn,
    auxShowLanguageDropDown,
    auxFinal,auxCurrentSurvey, auxStatus,auxGroupStatus,auxGroupSummary,
    auxContactData, auxLastAttempt, auxCaseNote, auxSpawnAllowed,auxIsDonorCase
    auxIsNonWindows,auxDeviceInfo,auxInPortraitMode,auxCount,
    auxLayoutSetName,
    auxHasCustomFilter,auxCustomFilterValue,auxCustomFilterTxt,auxCustomFilterCount,
    auxCustomFilter,auxUseSearchButton,auxTextFontSize,
    auxWhatCasesToShow, auxWhatSurveyToShow, auxWhatSurveyToShowGUID, 
    auxDetails, auxCustomTemplate, auxCustomDetailsTable,
    auxGeoLocation, auxHasImage, auxGroupType, auxParentChildView, 
    auxFieldFilter, auxFieldFilterTitles, auxFieldFilterWidths,
    auxStyleCount,auxStyleNr,auxStyle,auxAutoSizeBtns,
    LanguageEnum,LanguageCount,
    auxSortOn, auxAllowSort,auxConfirmedFilter,
    auxCollapseDetails,
    LanguageID1, LanguageID2, LanguageID3,
    auxFilter, btnStyle, btnCases (Quit)
  RULES
    CurrentLanguage.KEEP
    CurLan.KEEP
    auxCurrentSurvey.KEEP
    auxWhatSurveyToShowGUID.KEEP
    auxFinal.KEEP
    auxSpawnAllowed.KEEP
    auxIsDonorCase.KEEP
    auxIsNonWindows.KEEP
    auxDeviceInfo.KEEP
    auxCustomTemplate.KEEP
    auxCustomDetailsTable.KEEP
    auxLastAttempt.KEEP
    auxStatus.KEEP
    auxGroupStatus.KEEP
    auxGroupSummary.KEEP
    auxGeoLocation.KEEP
    auxHasImage.KEEP
    auxParentChildView.KEEP
    auxGroupType.KEEP
    auxContactData.KEEP
    auxFieldFilter.KEEP
    auxConfirmedFilter.KEEP
    auxFieldFilterTitles.KEEP
    auxFieldFilterWidths.KEEP
    auxAutoSizeBtns.KEEP
    auxStyle.KEEP
    auxStyleCount.KEEP
    auxStyleNr.KEEP
    auxDoNotAllowEditCase.KEEP
    auxDoNotAllowShowingAttempts.KEEP
    auxShowGeoPositionBtn.KEEP
    auxHasCustomFilter.KEEP
    auxUseSearchButton.KEEP
    auxTextFontSize.KEEP
    auxCustomFilterValue.KEEP
    auxCustomFilterTxt.KEEP
    auxCustomFilterCount.KEEP
    auxShowLanguageDropDown.KEEP
    LanguageCount.KEEP
    auxInPortraitMode.KEEP auxCount.KEEP
    auxCollapseDetails.KEEP
    auxLayoutSetName.KEEP
    IF LanguageCount>1 THEN
      LanguageEnum.ASK
      LanguageID1.KEEP
      LanguageID2.KEEP
      LanguageID3.KEEP
    ENDIF   
    auxDetails.SHOW 
    auxWhatCasesToShow.ASK
    IF auxParentChildView=EMPTY AND auxInPortraitMode=EMPTY THEN
      IF auxWhatCasesToShow=All THEN
        auxDataGridHeaderAll.SHOW
      ENDIF  
      IF auxWhatCasesToShow=NonCompleted THEN
        auxDataGridHeaderNonCompleted.SHOW
      ENDIF  
      IF auxWhatCasesToShow=Completed THEN
        auxDataGridHeaderCompleted.SHOW
      ENDIF
    ENDIF    
    IF auxInPortraitMode=yes THEN
      auxDataGridHeaderPortrait.SHOW
    ENDIF    
    auxWhatSurveyToShow.ASK
    auxConfirmedFilter.KEEP
    auxFilter.ASK
    IF auxStyleCount>1 THEN btnStyle.ASK ENDIF
    auxAllowSort.KEEP
    IF auxAllowSort=yes THEN
      auxSortOn.ASK
    ENDIF  
    IF auxHasCustomFilter=yes THEN
      auxCustomFilter.ASK
    ENDIF

   
DIALOG dGroup "Case Group" 
  DATASOURCEREFS gCases "" 
  FIELDREFS 
    CurrentLanguage,
    auxFinal,auxCurrentSurvey,auxStatus,auxGroupStatus,auxGroupSummary,
    auxContactData,auxLastAttempt,auxCaseNote,auxSpawnAllowed,auxIsDonorCase
    auxIsNonWindows,auxDeviceInfo,auxInPortraitMode,auxLayoutSetName,auxCount,
    auxDoNotAllowEditCase,auxShowGeoPositionBtn
    auxDetails,auxCustomTemplate,auxCustomDetailsTable,
    auxGeoLocation,auxHasImage,auxGroupType,auxParentChildView,
    auxSortGrpOn,auxAllowGrpSort,auxHasInterview,auxAutoSizeBtns,
    auxFieldFilter,auxFieldFilterTitles,auxFieldFilterWidths,
    auxShowGroupDoneBtn,auxEnableGroupDoneBtn,auxCurrentDoneStatus,
    auxShowGroupAddAttemptBtn,auxManualAttemptWhenIntStarted,auxDoNotAllowShowingAttempts,
    auxParentDoneValues,
    auxCollapseDetails,
    auxStyleCount,auxStyleNr,auxStyle,
    btnStyle,btnGroup (Back)
  RULES
    CurrentLanguage.KEEP
    auxCurrentSurvey.KEEP
    auxFinal.KEEP
    auxSpawnAllowed.KEEP
    auxIsDonorCase.KEEP
    auxIsNonWindows.KEEP
    auxDeviceInfo.KEEP
    auxCustomTemplate.KEEP
    auxCustomDetailsTable.KEEP
    auxLastAttempt.KEEP
    auxStatus.KEEP
    auxGroupStatus.KEEP
    auxGroupSummary.KEEP
    auxGeoLocation.KEEP
    auxHasImage.KEEP
    auxParentChildView.KEEP
    auxGroupType.KEEP
    auxContactData.KEEP
    auxFieldFilter.KEEP
    auxFieldFilterTitles.KEEP
    auxFieldFilterWidths.KEEP
    auxDoNotAllowEditCase.KEEP
    auxShowGeoPositionBtn.KEEP
    auxParentDoneValues.KEEP
    auxDetails.SHOW
    auxAllowGrpSort.KEEP
    auxShowGroupDoneBtn.KEEP
    auxCurrentDoneStatus.KEEP
    auxEnableGroupDoneBtn.KEEP
    auxShowGroupAddAttemptBtn.KEEP
    auxManualAttemptWhenIntStarted.KEEP
    auxHasInterview.KEEP
    auxAutoSizeBtns.KEEP
    auxDoNotAllowShowingAttempts.KEEP
    auxStyleCount.KEEP
    auxStyle.KEEP
    auxStyleNr.KEEP
    auxInPortraitMode.KEEP auxCount.KEEP
    auxLayoutSetName.KEEP
    auxCollapseDetails.KEEP
    IF auxStyleCount>1 THEN btnStyle.ASK ENDIF
    IF auxAllowGrpSort=yes THEN
      auxSortGrpOn.ASK
    ENDIF 

PROCEDURE MenuItemClick
PARAMETERS
  pSub: STRING
  pIndex: INTEGER
AUXFIELDS
  I: INTEGER
INSTRUCTIONS
  AddToLog('MenuItemClick: '+psub+' '+STR(pindex))
  CASE pSub of
  'Srv':
    auxWhatSurveyToShow:= pIndex
    SurveyListChange
  'Cfltr':
    auxCustomFilter:= pIndex   
    HandleCustomFilterChange 
  'CShw':
    auxWhatCasesToShow:= pIndex
    WhatCasesToShowClick(ord(auxWhatCasesToShow), auxWhatSurveyToShowGUID)
  'Srt': 
    auxSortOn:= pIndex
    SortCases 
  'SrtGrp': 
    auxSortGrpOn:= pIndex
    SortCasesGrp 
  'Sync':
    Sync(0)
    UpdateTemporaryCasesFile(ord(auxWhatCasesToShow),auxWhatSurveyToShowGUID) 
  'Stl': 
     ChangeStyle
     FillSurveyNamesArray  
 ENDCASE  
ENDPROCEDURE

PROCEDURE ClearFilter
INSTRUCTIONS
  auxFilter:= EMPTY
  auxConfirmedFilter:= EMPTY
ENDPROCEDURE

FUNCTION ReadTemplate: OPEN
PARAMETERS pFileName: STRING
AUXFIELDS
  iRes: INTEGER
INSTRUCTIONS
  RESULT:= ''
  IF FILEEXISTS(pFileName) THEN
    iRes:= iDetailsTemplate.OPEN(pFileName)
    IF iRes=0 THEN
      REPEAT
        iDetailsTemplate.READNEXT
        RESULT:= RESULT+TRIM(iDetailsTemplate.Line)
      UNTIL NOT iDetailsTemplate.RESULTOK OR iDetailsTemplate.LASTRECORD
      iDetailsTemplate.RELEASE
    ELSE
      AddToLog('Error opening '+pFileName+'. Error:'+STR(iRes))  
    ENDIF
  ELSE
    AddToLog('Template '+pfilename+' not present')
  ENDIF   
ENDFUNCTION

PROCEDURE LoadAttemptsTemplate
PARAMETERS
  pPath: STRING
  pTemplateID: STRING
INSTRUCTIONS
  CurrentAttemptsTemplate:= ReadTemplate(pPath+pTemplateID) 
ENDPROCEDURE

PROCEDURE LoadTemplate
PARAMETERS
  pPath: STRING
  pTemplateID: STRING
INSTRUCTIONS
  CurrentContactTemplate:= ReadTemplate(pPath+pTemplateID)
ENDPROCEDURE

FUNCTION ReplaceVarsInTemplate: OPEN
PARAMETERS
  pTemplate: OPEN
  pParamValues: OPEN
AUXFIELDS 
  as: OPEN  
  i: INTEGER
  p, p_sep1: INTEGER
  ap: STRING
  av: OPEN
  tmp: OPEN
INSTRUCTIONS
  as:= pTemplate
  p:= 1
  REPEAT
    tmp:= GetNextPair(pParamValues,contactdatasep(1),contactDataSep(2),p)
    IF tmp<>'' THEN
      p_sep1:= POSITION(contactdatasep(1),tmp)
      ap:= SUBSTRING(tmp,1,p_sep1-1)
      av:= SUBSTRING(tmp,p_sep1+1,LEN(tmp)-p_sep1)
      IF ap<>EMPTY THEN
        av:= REPLACE(av,CHAR(10),'<NEWLINE>')
        as:= REPLACE(as,'$'+ap,av,TRUE)
      ENDIF  
    ENDIF
  UNTIL p<=-1
  RESULT:= as
ENDFUNCTION

AUXFIELDS
  auxImageName: STRING
  auxImage "<img  stretch='Fill' sourceurl='^auxImageName'>": string
  auxIDone: (OK EN "<img src=BackButton2>")
  
DIALOG dShowImage "Show image"
  FIELDREFS
    auxAutoSizeBtns, auxImageName, auxIDone(OK)
  RULES
    auxAutoSizeBtns.KEEP
    auxImageName.KEEP
    
PROCEDURE StoreImageOnDisk    
auxfields
  iRes: integer
INSTRUCTIONS
  ufLocalCases.GET(tCase.tMainSurveyID,tCase.tIdentifier)
  iRes:= ufLocalCases.CMA_ContactImage.SaveToDisk(workingfolder+'/cma_img.jpg')
  auxImageName:= 'file://'+workingfolder+'/cma_img.jpg'
ENDPROCEDURE

PROCEDURE ShowImage
INSTRUCTIONS
  StoreImageOnDisk
  dShowImage
ENDPROCEDURE

FUNCTION GetButtonTemplate: STRING
PARAMETERS pT: STRING
INSTRUCTIONS
  RESULT:= 
    '<button text="'+pT+'" width=auto height=auto OnClick="{Action ProcedureCall({Expression ShowImage()})}">'
ENDFUNCTION

PROCEDURE HandleCustomField
PARAMETERS 
  IMPORT pVar: STRING
  IMPORT pValue: OPEN
  TRANSIT aStr: OPEN
AUXFIELDS
  aSep1,aSep2: STRING  
  p,c: INTEGER
  aName: STRING
  aValue: STRING
INSTRUCTIONS
  IF POSITION(pVar+'(',aStr)>0 THEN
    IF iSettings.sCustomDataSep=EMPTY AND iSurveySettings.Survey_CustomDataSep=EMPTY THEN
      IF POSITION(cTab,tCase.tCustomUse)>0 THEN aSep1:= cTab aSep2:= cTab
      ELSEIF POSITION(';',pValue)>0 THEN aSep2:= ';' aSep1:= '=' //the old default...
      ELSE aSep2:= ',' aSep1:= '=' ENDIF
    ELSE
      aSep1:= customDataSep(1)
      aSep2:= customDataSep(2)
    ENDIF  
    REPEAT
      p:= POSITION(pVar+'(',aStr)
      IF p>0 THEN
        c:= POSITION(')',aStr,p)
        IF c>0 THEN
          aName:= SUBSTRING(aStr,p+LEN(pVar+'('),c-p-LEN(pVar+'('))
          aValue:= GetEntryOnName(pValue,aName,aSep1,aSep2)
          aStr:= REPLACE(aStr,pVar+'('+aName+')',aValue)
        ENDIF
      ENDIF    
    UNTIL p=0 OR c=0
  ELSE
    aStr:= REPLACE(aStr,pVar,pValue,TRUE)
  ENDIF
ENDPROCEDURE

FUNCTION ProcessTheTemplate: OPEN
PARAMETERS
  pTemplate: OPEN
  pContactData: OPEN
  pAttemptsDlg: INTEGER //0=No, 1=Yes
AUXFIELDS
  aStr: OPEN
  p,c: INTEGER
  tmp: STRING
  aValue, aStatus, bText: STRING
INSTRUCTIONS
  aStr:= pTemplate
  IF pAttemptsDlg=1 THEN
    aStr:= REPLACE(aStr,'$Att_Note',auxNote,TRUE)
    aValue:= ''
    IF auxApptDate<>EMPTY THEN aValue:= auxApptDate+', '+auxApptTime ENDIF
    aStr:= REPLACE(aStr,'$Att_Appointment',aValue,TRUE)
    aStr:= REPLACE(aStr,'$Att_Result',auxHappeningsStr,TRUE)
    IF auxSeqNr>=1 THEN
      aStr:= REPLACE(aStr,'$Att_SeqNr',STR(auxSeqNr),TRUE)
    ELSE
      aStr:= REPLACE(aStr,'$Att_SeqNr','',TRUE)
    ENDIF  
    aStr:= REPLACE(aStr,'$Att_When',auxWhen,TRUE)
  ENDIF
  IF auxCaseNote<>EMPTY THEN
    aStr:= REPLACE(aStr,'$CaseNote',auxCaseNote,TRUE)
  ENDIF
  aStr:= ReplaceVarsInTemplate(aStr,pContactData)
  aStr:= REPLACE(aStr,'$ID',currentCaseID,TRUE)
  aStr:= REPLACE(aStr,'$MainSurveyID',currentCaseGUID,TRUE)
  IF POSITION('$CaseOrGroupStatus',aStr)>0 THEN
    aStatus:=''
    IF auxParentChildView=EMPTY THEN //on main cases screen...
      IF tCase.tGroupType=Parent AND tCase.tAllowSpawning<>yes THEN
        aStatus:= auxGroupStatus
      ELSE  
        aStatus:= auxStatus
      ENDIF  
    ELSE
      aStatus:= auxStatus
    ENDIF
    aStr:= REPLACE(aStr,'$CaseOrGroupStatus',aStatus,TRUE)
  ENDIF  
  aStr:= REPLACE(aStr,'$CMA_Status',auxStatus,TRUE)
  aStr:= REPLACE(aStr,'$CMA_LastAttempt',auxLastAttempt,TRUE)
  IF POSITION('$CMA_LastResult',aStr)>0 THEN
    IF auxParentChildView=EMPTY AND tCase.tGroupType=Parent AND 
       tCase.tAllowSpawning<>yes AND iSettings.sHideResultOfParent=yes
    THEN
      aStr:= REPLACE(aStr,'$CMA_LastResult','',TRUE)
    ELSE  
      aStr:= REPLACE(aStr,'$CMA_LastResult',auxLastResult,TRUE)
    ENDIF  
  ENDIF
  aStr:= REPLACE(aStr,'$CMA_Geolocation',auxGeoLocation,TRUE)
  tmp:= tCase.tAppointment
  IF iSettings.sTodayAppointmentPreFix<>'' THEN
    tmp:= REPLACE(tmp,iSettings.sTodayAppointmentPreFix,'')
  ENDIF  
  IF iSettings.sTodayAppointmentDetail<>EMPTY AND tCase.tAppForToday=yes THEN
    tmp:= '<'+iSettings.sTodayAppointmentDetail+'>'+tmp+'</'+iSettings.sTodayAppointmentDetail+'>'
  ENDIF
  aStr:= REPLACE(aStr,'$CMA_Appointment',tmp,TRUE)
  aStr:= REPLACE(aStr,'$CMA_AttemptsCount',tCase.tAttemptsCount,TRUE)
  aStr:= REPLACE(aStr,'$ContactInfoShort',tCase.tContactInfoShort,TRUE)
  HandleCustomField('$CMA_CustomUse',tCase.tCustomUse,aStr)
  HandleCustomField('$Survey_CustomUse',iSurveySettings.Survey_CustomUse,aStr)
  aStr:= REPLACE(aStr,'$CMA_SpawnCount',tCase.tSpawnCount,TRUE)
  aStr:= REPLACE(aStr,'$CMA_GroupStatus',auxGroupStatus,TRUE)
  aStr:= REPLACE(aStr,'$CMA_GroupSummary',auxGroupSummary,TRUE)
  IF POSITION('$CMA_GroupSum_',aStr)>0 THEN
    p:= POSITION('#=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_#',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('A=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_A',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('S=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_S',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('I=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_I',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('D=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_D',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('C=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_C',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('F=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_F',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('R=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_R',SUBSTRING(auxGroupSummary,p+2,5),TRUE) ENDIF
    p:= POSITION('L=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_L',SUBSTRING(auxGroupSummary,p+2,5),TRUE) ENDIF
  ENDIF    
  IF tCase.tStartDate<>EMPTY THEN
    IF iSettings.sShowDateFormat<>EMPTY THEN
      aStr:= REPLACE(aStr,'$CMA_StartDate',DATETOSTR(tCase.tStartDate,iSettings.sShowDateFormat),TRUE)
    ELSE
      aStr:= REPLACE(aStr,'$CMA_StartDate',DATETOSTR(tCase.tStartDate,'d',CURRENTCULTURE),TRUE)
    ENDIF  
  ELSE
    aStr:= REPLACE(aStr,'$CMA_StartDate','',TRUE)
  ENDIF
  IF tCase.tEndDate<>EMPTY THEN
    IF iSettings.sShowDateFormat<>EMPTY THEN
      aStr:= REPLACE(aStr,'$CMA_EndDate',DATETOSTR(tCase.tEndDate,iSettings.sShowDateFormat),TRUE)
    ELSE
      aStr:= REPLACE(aStr,'$CMA_EndDate',DATETOSTR(tCase.tEndDate,'d',CURRENTCULTURE),TRUE)
    ENDIF      
  ELSE
    aStr:= REPLACE(aStr,'$CMA_EndDate','',TRUE)
  ENDIF
  bText:= cShowImage
  IF auxHasImage=yes THEN
    aStr:= REPLACE(aStr,'$CMA_ContactImage',GetButtonTemplate(bText),TRUE)
  ELSE  
    aStr:= REPLACE(aStr,'$CMA_ContactImage','',TRUE)
  ENDIF
  RESULT:= aStr
ENDFUNCTION

FUNCTION ProcessAttemptsTemplate:OPEN
PARAMETERS
  pContactData: OPEN
AUXFIELDS
  aStr: OPEN 
  aName: STRING
  aValue: STRING
  bText: STRING
  aCurrentTemplateInfo: STRING
  aPath: STRING
  aDetailsTemp: STRING
  aAttemptGUID: STRING
  aContactGUID: STRING
  aTot: INTEGER
  p, c: INTEGER
  aSep: STRING[1]
INSTRUCTIONS
  RESULT:=''
  GetSurveySettings(tCase.tMainSurveyID)
  aDetailsTemp:= GetDetailsTemplate(tCase.tDetailsTemplate)
  aAttemptGUID:= GetAttemptsGUID(tCase.tAttemptsGUID)
  aContactGUID:= GetContactInfoGUID(tCase.tContactInfoGUID)
  aCurrentTemplateInfo:= GetCategoryName(ACTIVELANGUAGE)+'::'+aDetailsTemp+'::'+aAttemptGUID
  IF CurrentAttemptsTemplateInfo<>aCurrentTemplateInfo THEN   
    IF aDetailsTemp<>'' THEN
      aName:= LOWERCASE(cmaAttemptsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      IF aAttemptGUID<>'' THEN
        srvList.GET(aAttemptGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSEIF aContactGUID<>'' THEN
        srvList.GET(aContactGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSE
        aPath:= CMAAttemptsPath 
      ENDIF    
      //first check folder of current contact info datamodel
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaAttemptsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aPath:= SetupPath
        aName:= LOWERCASE(cmaAttemptsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaAttemptsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
    ELSE
      aName:= LOWERCASE(cmaDefaultAttemptsTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      //first check folder of cma_contactinfo model. If not present then check CMA folder
      IF aAttemptGUID<>'' THEN
        srvList.GET(aAttemptGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSE
        aPath:= CMAAttemptsPath 
      ENDIF    
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDefaultAttemptsTemplate+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aPath:= SetupPath
        aName:= LOWERCASE(cmaDefaultAttemptsTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
//      IF NOT FILEEXISTS(aPath+aName) THEN
//        aName:= LOWERCASE(cmaDefaultAttemptsTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
//      ENDIF  
    ENDIF
    IF CurrentAttemptsTemplateID<>aPath+aName THEN
        LoadAttemptsTemplate(aPath,aName)
      CurrentAttemptsTemplateID:=aPath+aName
      CurrentAttemptsTemplateInfo:= aCurrentTemplateInfo //to identity current situation
      IF CurrentAttemptsTemplateInfo<>EMPTY THEN AddToLog('Attempts template '+aPath+aName+' loaded') ENDIF
    ENDIF
  ENDIF    
  IF CurrentAttemptsTemplate=EMPTY THEN CurrentAttemptsTemplate:= cAttemptsTemplate ENDIF
  RESULT:= ProcessTheTemplate(ExtractApplicableTemplate(CurrentAttemptsTemplate),pContactData,1)    
ENDFUNCTION  

FUNCTION ExtractApplicableTemplate: OPEN
PARAMETERS pTemplate: OPEN
AUXFIELDS
  aPos, aLast: INTEGER
  aSep: STRING
INSTRUCTIONS
  IF auxInPortraitMode=yes THEN
    aSep:= REPLACE(cPortraitSeparator,'$',auxLayoutSetName+'-')
    aPos:= POSITION(UPPERCASE(aSep),UPPERCASE(pTemplate))
    IF aPos=0 THEN
      aSep:= REPLACE(cPortraitSeparator,'$','')
      aPos:= POSITION(UPPERCASE(aSep),UPPERCASE(pTemplate))
      IF aPos=0 THEN aPos:= 1 aSep:= '' ENDIF
    ENDIF
    AddToLog('Portrait -'+auxLayoutSetName)
  ELSE
    aSep:= REPLACE(cLandscapeSeparator,'$',auxLayoutSetName+'-')
    aPos:= POSITION(UPPERCASE(aSep),UPPERCASE(pTemplate))
    IF aPos=0 THEN
      aSep:= REPLACE(cLandscapeSeparator,'$','')
      aPos:= POSITION(UPPERCASE(aSep),UPPERCASE(pTemplate))
      IF aPos=0 THEN aPos:= 1 aSep:= '' ENDIF
    ENDIF
    AddToLog('Landscape -'+auxLayoutSetName)
  ENDIF    
  aLast:= POSITION('<!--',pTemplate,aPos+1) 
  IF aLast=0 THEN aLast:= LEN(pTemplate)+1 ENDIF
  RESULT:= SUBSTRING(pTemplate,aPos+LEN(aSep),aLast-(aPos+LEN(aSep)))
ENDFUNCTION

FUNCTION ProcessTemplate: OPEN
PARAMETERS
  pContactData: OPEN
AUXFIELDS
  aCurrentTemplateInfo: STRING
  aPath, aName: STRING
  aDetailsTemp: STRING
  aContactInfoGUID: STRING
  aTot: INTEGER
INSTRUCTIONS
  GetSurveySettings(tCase.tMainSurveyID)
  aDetailsTemp:= GetDetailsTemplate(tCase.tDetailsTemplate)
  aContactInfoGUID:= GetContactInfoGUID(tCase.tContactInfoGUID)
  aCurrentTemplateInfo:= GetCategoryName(ACTIVELANGUAGE)+'::'+aDetailsTemp+'::'+aContactInfoGUID
  IF CurrentTemplateInfo<>aCurrentTemplateInfo THEN   
    IF aDetailsTemp<>'' THEN
      aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      IF aContactInfoGUID<>'' THEN
        srvList.GET(aContactInfoGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSE
        aPath:= CMAContactInfoPath 
      ENDIF    
      //first check folder of current contact info datamodel
      IF NOT FILEEXISTS(aPath+aName) THEN //not in contactinfo path
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN //also not in contactinfo path
        srvList.GET(tCase.tMainSurveyID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN //also not in survey path
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aPath:= SetupPath
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
    ELSE //default template...
      aName:= LOWERCASE(cmaDefaultTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      //first check folder of cma_contactinfo model. If not present then check CMA folder
      IF aContactInfoGUID<>'' THEN
        srvList.GET(aContactInfoGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSE
        aPath:= CMAContactInfoPath 
      ENDIF    
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDefaultTemplate+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aPath:= SetupPath
        aName:= LOWERCASE(cmaDefaultTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDefaultTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
    ENDIF
    IF CurrentContactTemplateID<>aPath+aName THEN
      AddToLog('About to load: '+aPath+aName)
      LoadTemplate(aPath,aName)
      CurrentContactTemplateID:=aPath+aName
      CurrentTemplateInfo:= aCurrentTemplateInfo //to identity current situation
      IF CurrentContactTemplate<>EMPTY THEN
        AddToLog('Template '+aPath+aName+' loaded')
      ENDIF  
    ENDIF
  ENDIF
  IF CurrentContactTemplate<>EMPTY THEN
    RESULT:= ProcessTheTemplate(ExtractApplicableTemplate(CurrentContactTemplate),pContactData,0)    
  ELSE
    RESULT:= ''
  ENDIF    
ENDFUNCTION

PROCEDURE ComputeEnableGroupDone
INSTRUCTIONS
  auxEnableGroupDoneBtn:= EMPTY
  IF auxCurrentDoneStatus<>EMPTY THEN
    IF auxCurrentDoneStatus<>FILL('D',LEN(auxCurrentDoneStatus)) AND
       POSITION('X',auxCurrentDoneStatus)=0
    THEN
      auxEnableGroupDoneBtn:= yes
    ENDIF
  ENDIF  
ENDPROCEDURE  

FUNCTION InPortraitMode: INTEGER
AUXFIELDS 
  CI: STRING
  H: INTEGER
  W: INTEGER
INSTRUCTIONS
{$IFNDEF 5_10}
  IF GETCURRENTORIENTATION='Portrait' THEN
    RESULT:= 1 
  ELSE
    RESULT:= 0 
  ENDIF
{$ELSE}
// Landscape assumed...
  RESULT:= 0 
{$ENDIF}  
ENDFUNCTION
      
PROCEDURE UpdateCasesScreen
//called when a record is selected in dialog dCases and dGroup
INSTRUCTIONS
  IF InPortraitMode=1 THEN 
    auxInPortraitMode:= yes 
  ELSE 
    auxInPortraitMode:= EMPTY 
  ENDIF
  IF auxParentChildView=EMPTY THEN
    tCase:= tMainCase
  ELSE
    tCase:= tGroupCase
  ENDIF
  AddToLog('Update screen for '+tCase.tMainSurveyID+'-'+tCase.tIdentifier)    
  GetSurveySettings(tCase.tMainSurveyID)
  auxStatus:= tCase.tCaseStatus
  auxGroupStatus:= tCase.tGroupStatus
  auxGroupSummary:= tCase.tGroupSummary
  IF auxStatus=EMPTY THEN 
    auxStatus:= cNotStarted
  ENDIF
  IF auxGroupStatus=EMPTY THEN  
    auxGroupStatus:= cNotStarted
  ENDIF  
  auxLastResult:= tCase.tLastResult
  auxLastAttempt:= tCase.tLastAttempt
  auxContactData:= tCase.tContactData
  auxCaseNote:= tCase.tCaseNote
  auxCurrentSurvey:= tCase.tMainSurveyID
  CurrentContactInfoShort:= tCase.tContactInfoShort
  CurrentCaseGUID:= tCase.tMainSurveyID
  CurrentGroupID:= tCase.tGroupID
  CurrentCaseID:= tCase.tIdentifier
  CurrentGroupSort:= tCase.tGroupSort
  IF auxParentChildView=EMPTY THEN
    CurrentTheSortValue:= tCase.TheSortValue
  ELSE  
    CurrentTheSortGrpValue:= tCase.TheSortValue
  ENDIF  
  auxFinal:= tCase.tFinal
  auxSpawnAllowed:= tCase.tAllowSpawning
  IF tCase.tHasInterview=yes THEN 
    auxHasInterview:= yes 
  ELSE 
    auxHasInterview:= EMPTY 
  ENDIF  
  auxGroupType:= tCase.tGroupType
  auxDoNotAllowEditCase:= EMPTY
  IF GetDoNotAllowEditCase=1 THEN auxDoNotAllowEditCase:= Yes ENDIF
  IF tCase.tIsDonorCase=EMPTY THEN auxIsDonorCase:= EMPTY ELSE auxIsDonorCase:= tCase.tIsDonorCase ENDIF
  IF DeviceInfoLogged=EMPTY AND auxDeviceInfo<>EMPTY THEN
    AddToLog(auxDeviceInfo)
    DeviceInfoLogged:= yes
  ENDIF  
  auxCustomTemplate:= GetDetailsTemplate(tCase.tDetailsTemplate)
  auxGeoLocation:= tCase.tGeoLocation
  auxHasImage:= tCase.tHasImage
  IF tCase.tMainSurveyID=EMPTY THEN
    auxCustomDetailsTable:= ''
  ELSE  
    auxCustomDetailsTable:= ProcessTemplate(tCase.tContactData)
  ENDIF  
  auxDoNotAllowManualAttempt:= EMPTY  
  IF GetDoNotAllowManualAttempt=1 THEN auxDoNotAllowManualAttempt:= yes ENDIF  
  auxDoNotAllowUpdateAttemptNote:= EMPTY
  IF GetDoNotAllowUpdateAttemptNote=1 THEN auxDoNotAllowUpdateAttemptNote:= yes ENDIF  
  auxDoNotAllowShowingAttempts:= EMPTY
  IF GetDoNotAllowShowingAttempts=1 THEN auxDoNotAllowShowingAttempts:= yes ENDIF 
  auxShowGeoPositionBtn := EMPTY
  IF GetShowGeoPositionBtn=1 THEN auxShowGeoPositionBtn:= yes ENDIF
ENDPROCEDURE
//end case assignment dialog related definition

//start attempt dialog related definitions
DATASOURCE mAttempts:tAttempt
SEARCHKEY=PRIMARY
FIELDFILTER=SeqNr, When, HappeningsStr,atAppointment

AUXFIELDS //auxfields used in attempts dialog
  btnAttempts: (
                Add "<img src=AttemptAdd>" DISABLED "<img src=AttemptAddDisabled>" TOOLTIP EN "Add a new attempt" ,     //to add a new attempt
                Modify "<img src=Update>" DISABLED "<img src=UpdateDisabled>" TOOLTIP "Edit note", //for modifying note of last attempt
                View "<img src=ReadOnlyEdit>" DISABLED "<img src=ReadOnlyEditDisabled>" TOOLTIP "View interview",
                Quit "<img src=BackButton2>" DISABLED "<img src=BackButton2Disabled>" TOOLTIP EN "Back to cases screen" 
               )           

  auxSeqNr: 1..999
  auxWhen "When made:" : STRING[24]
  auxHappeningsStr "Result:" : STRING[80]
  auxApptDate "Appt date:" : STRING[20]
  auxApptTime "Appt time:" : STRING[20]
  auxNote "Note:" : OPEN,EMPTY
  auxLast: INTEGER
  auxLocked: 0..1  //1 = not allowed to add new attempt
  auxAllowView: (yes),EMPTY
  auxReadOnlySettingsName: STRING
  auxAttemptsDetailsTable: OPEN
  auxAttemptsDetails "^{auxAttemptsDetailsTable}": STRING[1]


DIALOG dAttempts "Attempts" 
  DATASOURCEREFS mAttempts ""
  FIELDREFS  
    auxLast,auxWhen,auxHappeningsStr,auxApptDate,auxApptTime,auxNote,auxLocked,auxHasInterview,auxAllowView,auxReadOnlySettingsName,
    auxDoNotAllowManualAttempt,auxDoNotAllowUpdateAttemptNote,
    auxAutoSizeBtns,
    auxAttemptsDetails, auxCustomDetailsTable,
    btnAttempts(Quit)
  RULES
    auxLocked.KEEP
    auxWhen.KEEP
    auxHappeningsStr.KEEP
    auxApptDate.KEEP
    auxLast.KEEP
    auxDoNotAllowManualAttempt.KEEP
    auxDoNotAllowUpdateAttemptNote.KEEP
    auxHasInterview.KEEP
    auxAllowView.KEEP
    auxReadOnlySettingsName.KEEP
    auxCustomDetailsTable.KEEP
    auxApptDate.KEEP
    auxApptTime.KEEP
    auxNote.KEEP
    auxAutoSizeBtns.KEEP
    auxAttemptsDetails.SHOW

AUXFIELDS
  btnEditNote: (
                Save "<img src=OK>" DISABLED "<img src=OKDisabled>" TOOLTIP EN "Save note" ,     //to add a new attempt
                Cancel "<img src=Cancel>" DISABLED "<img src=CancelDisabled>" TOOLTIP EN "Cancel" 
               )           
  
DIALOG dEditNote "Edit note"
FIELDREFS 
  auxAutoSizeBtns, auxNote, btnEditNote(Save)
RULES
  auxAutoSizeBtns.KEEP
  auxNote.ASK  

PROCEDURE EditNote
AUXFIELDS 
  aSnr: INTEGER
INSTRUCTIONS
  dEditNote
  IF btnEditNote=Save THEN
    AddToLog('Note changed for '+CurrentCaseGUID+' '+CurrentCaseID+' '+STR(auxSeqNr))
    ufLocalAttempts.GETFORM(PRIMARY,CurrentCaseGUID+',\''+CurrentCaseID+'\','+STR(auxSeqNr))
    ufLocalAttempts.PUTVALUE('Notes',auxNote) 
    ufLocalAttempts.WRITE
    ufLocalAttempts.FLUSH
    ufLocalCases.GET(CurrentCaseGUID,CurrentCaseID)
    StoreAttemptsInLocalCaseAndWrite 
    auxAttemptsDetailsTable:= ProcessTheTemplate(ExtractApplicableTemplate(CurrentAttemptsTemplate),tCase.tContactData,1)
  ENDIF    
ENDPROCEDURE  
    
PROCEDURE UpdateAttemptsScreen
//called when a record is selected in dialog dAttempts
AUXFIELDS tmp: STRING
INSTRUCTIONS
  IF tAttempt.SeqNr>=1 THEN
    ufLocalAttempts.GETFORM(PRIMARY,CurrentCaseGUID+',\''+CurrentCaseID+'\','+str(tAttempt.SeqNr))
  ELSE
    ufLocalAttempts.INITRECORD  
  ENDIF  
  IF tAttempt.SeqNr = tAttempt.FORMCOUNT THEN
   auxLast:= 1
  ELSE
   auxLast:= 0
  ENDIF 
  auxSeqNr:= tAttempt.SeqNr
  auxWhen:= tAttempt.When
  auxHappeningsStr:= tAttempt.HappeningsStr
  auxApptDate:= EMPTY
  auxApptTime:= EMPTY
  tmp:= ufLocalAttempts.GETVALUE('AppDate')
  IF tmp<>'' THEN  auxApptDate:= DATETOSTR(STRTODATE(ufLocalAttempts.GETVALUE('AppDate'))) ENDIF
  tmp:= ufLocalAttempts.GETVALUE('AppTime')
  IF tmp<>'' THEN  auxApptTime:= TIMETOSTR(STRTOTIME(ufLocalAttempts.GETVALUE('AppTime'))) ENDIF
  auxNote:= ufLocalAttempts.GETVALUE('Notes')
  auxAttemptsDetailsTable:= ProcessAttemptsTemplate(tCase.tContactData)
ENDPROCEDURE
//end attempt dialog related definition

PROCEDURE AddAttemptToList
PARAMETERS 
  pLast: INTEGER
AUXFIELDS
  aStr: STRING  
  aCod: STRING
  aLab: STRING
  tmp: STRING
INSTRUCTIONS
  auxLocked:= EMPTY
  tAttempt.INITRECORD 
  tAttempt.atMainSurveyID:= ufLocalAttempts.GETVALUE('MainSurveyID')
  tAttempt.atID:= ufLocalAttempts.GETVALUE('ID')
  tAttempt.SeqNr:= VAL(ufLocalAttempts.GETVALUE('SeqNr'))
  tAttempt.When:= DateForDisplay(ufLocalAttempts.GETVALUE('WhenMade.When'))
  tmp:= ufLocalAttempts.GETVALUE('AppDate')
  IF tmp<>'' THEN  tAttempt.atApptDate:= DATETOSTR(STRTODATE(ufLocalAttempts.GETVALUE('AppDate'))) ENDIF
  tmp:= ufLocalAttempts.GETVALUE('AppTime')
  IF tmp<>'' THEN  tAttempt.atApptTime:= TIMETOSTR(STRTOTIME(ufLocalAttempts.GETVALUE('AppTime'))) ENDIF
  IF tAttempt.atApptDate<>'' THEN
    tAttempt.atAppointment:= tAttempt.atApptDate+', '+tAttempt.atApptTime
  ENDIF  
  aCod:= ufLocalAttempts.GETVALUE('Happenings',UNFORMATTED)
  if ShowResult in [rStrOnly,rBoth] THEN 
    aStr:= GetCategoryText([[attempts]],'Happenings',GetCategoryName(ACTIVELANGUAGE),VAL(aCod)) 
  ENDIF 
  aLab:= ufLocalAttempts.GETVALUE('Happenings')
  CASE ShowResult OF
    rCodeOnly: tAttempt.HappeningsStr:= aCod
    rStrOnly:  tAttempt.HappeningsStr:= aStr
    rBoth:     tAttempt.HappeningsStr:= aCod+':'+aStr
    rLabOnly:  tAttempt.HappeningsStr:= aLab
    rCodeLab:  tAttempt.HappeningsStr:= aCod+':'+aLab  
  ENDCASE
  tAttempt.TheLastOne:= pLast
  IF pLast=1 and ufLocalCases.GETVALUE('CMA_CaseClosed',UNFORMATTED)='1' {  AND ufLocalCases.CMA_Status IN ['Completed','Finalized']} THEN
    auxLocked:= 1
  ENDIF  
  tAttempt.WRITE
ENDPROCEDURE

FUNCTION AdditionalSettings: STRING
PARAMETERS
  pForSurvey: INTEGER
INSTRUCTIONS
  RESULT:= ''
  IF auxIsNonWindows=EMPTY THEN
    RESULT:= ' -EnableResize:False'
    IF DoNotMaximizeEditWindow=EMPTY THEN
      RESULT:= RESULT+' -InitialWindowState:Maximized'
    ENDIF
  ENDIF
  RESULT:= RESULT+' -EnableClose:False'
  RESULT:= RESULT + GetOrientationCmdLineParameter(pForSurvey)
  RESULT:= RESULT+' -NoReceiptPage:True'
ENDFUNCTION

PROCEDURE SwitchAttemptsSurveyIfNeeded
PARAMETERS
  pAttemptsGUID: STRING
AUXFIELDS
  dRes: INTEGER
  aGUID: STRING
  aMetaName, aMetaNameOri: STRING
INSTRUCTIONS
  aGUID:= pAttemptsGUID
  IF aGUID='' THEN aGUID:= DefaultCMA_AttemptsGUID ENDIF
  IF CurrentAttemptsGUID<>aGUID THEN
    srvList.GET(aGUID)
    IF srvList.RESULTOK THEN
      CurrentAttemptsGUID:= aGUID
      aAttemptsFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE) 
      attempts_loc:= aAttemptsFileName+'_loc'
      dres:= attempts.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
      ufLocalAttempts.RELEASE 
      dres:= ufLocalAttempts.OPEN(attempts_loc)
      AddToLog('Attempts switched to '+CurrentAttemptsGUID)
      //check if copy of meta is present. If not create it...
      aMetaName:= srvList.GetSurveyMetaFilename
      aMetaNameOri:= ExtractFilePath(aMetaName)+'ori_'+ExtractFileName(aMetaName)
      IF NOT FileExists(aMetaNameOri) THEN
        dRes:= COPYFILE(aMetaName,aMetaNameOri)
      ENDIF
    ELSE
      AddToLog('Could not switch to Attempts survey '+pAttemptsGUID+' because it is not installed on device!')
    ENDIF  
  ENDIF
ENDPROCEDURE

//procedures/functions to related to survey settings
PROCEDURE GetSurveySettings
PARAMETERS
  pGUID: STRING
AUXFIELDS
  aName1, aName2, aPath: STRING
  res: INTEGER
  aSettings: STRING
INSTRUCTIONS
//Settings are loaded based on a well define file name: CMA_SurveySettings[_<wavename>].xml
//When is it a wave and there is no specific settings file for the wave the
//settings file for the original survey will be used if present
  IF pGuid<>'' THEN
    aSettings:= CurrentSurveySettings
    IF POSITION(pGUID,SurveysWithoutSettings)>0 THEN
      iSurveySettings.INITRECORD
      if srvList.ID<>pGuid THEN srvList.GET(pGuid) ENDIF
      CurrentSurveySettings:= ''
      CurrentSurveyGUID:= ''
    ELSEIF pGUID<>CurrentSurveyGUID THEN
      srvList.GET(pGuid)
      IF srvList.RESULTOK THEN
        GetSurveySettingsForGUID(pGuid)
        IF CurrentSurveySettings<>'' THEN 
          CurrentSurveyGUID:= pGUID 
        ELSE
          SurveysWithoutSettings:= SurveysWithoutSettings+pGUID+';'  
        ENDIF
      ELSE  
        iSurveySettings.INITRECORD
        CurrentSurveySettings:= ''
        CurrentSurveyGUID:= ''
        SurveysWithoutSettings:= SurveysWithoutSettings+pGUID+';'  
      ENDIF
      IF CurrentSurveySettings<>aSettings THEN 
        IF CurrentSurveySettings<>'' THEN
          AddToLog('Active survey settings '+CurrentSurveySettings)
        ELSE
          AddToLog('No survey settings active')
        ENDIF  
      ENDIF    
    ENDIF
  ENDIF  
ENDPROCEDURE

PROCEDURE GetSurveySettingsForGUID
PARAMETERS
  pGUID: STRING
AUXFIELDS
  aName1, aName2, aPath: STRING
  res: INTEGER
INSTRUCTIONS
//Settings are loaded based on a well define file name: CMA_SurveySettings[_<wavename>].xml
//When is it a wave and there is no specific settings file for the wave the
//settings file for the original survey will be used if present
  aName1:= 'cma_surveysettings'
  IF srvList.WaveName <> '' THEN
    aName2:= aName1+'_'+ srvList.WaveName
  ELSE
    aName2:= aName1  
  ENDIF
  aName1:= ExtractFilePath(srvList.GetSurveyMetaFilename)+aName1+'.xml'
  aName2:= ExtractFilePath(srvList.GetSurveyMetaFilename)+aName2+'.xml'
  iSurveySettings.INITRECORD
  CurrentSurveySettings:= ''
  CurrentSurveyGUID:= ''
  IF FILEEXISTS(aName2) THEN
    res:= iSurveySettings.OPEN(aName2)
    iSurveySettings.READNEXT
    iSurveySettings.RELEASE
    CurrentSurveySettings:= aName2
  ELSEIF FILEEXISTS(aName1) THEN
    res:= iSurveySettings.OPEN(aName1)
    iSurveySettings.READNEXT
    iSurveySettings.RELEASE
    CurrentSurveySettings:= aName1
  ELSE
    AddToLog('No survey settings found for '+pGUID)
  ENDIF
ENDPROCEDURE

FUNCTION GetDoNotAllowManualAttempt: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sDoNotAllowManualAttempt //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DoNotAllowManualAttempt<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DoNotAllowManualAttempt
  ENDIF
ENDFUNCTION

FUNCTION GetDoNotAllowShowingAttempts: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sDoNotAllowShowingAttempts //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DoNotAllowShowingAttempts<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DoNotAllowShowingAttempts
  ENDIF
ENDFUNCTION

FUNCTION GetDoNotAllowUpdateAttemptNote: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sDoNotAllowUpdateAttemptNote //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DoNotAllowUpdateAttemptNote<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DoNotAllowManualAttempt
  ENDIF
ENDFUNCTION

FUNCTION GetAllowReadOnlyAccess: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sAllowReadOnlyAccess //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_AllowReadOnlyAccess<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_AllowReadOnlyAccess
  ENDIF
ENDFUNCTION

FUNCTION GetTrackGeoPosition: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= TrackGeoPosition //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_TrackLocation<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_TrackLocation
  ENDIF
ENDFUNCTION

FUNCTION GetTrackTimeUsed: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= TrackTimeUsed //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_TrackTimeUsed<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_TrackTimeUsed
  ENDIF
ENDFUNCTION

FUNCTION GetOrientation: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= Orientation //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_Orientation<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_Orientation
  ENDIF
ENDFUNCTION

FUNCTION GetDoNotAllowEditCase:INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sDoNotAllowEditCase //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DoNotAllowEditCase<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DoNotAllowEditCase
  ENDIF
ENDFUNCTION

FUNCTION GetRemoveSurveyWhenNoCasesLeft: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= RemoveSurveyWhenNoCasesLeft //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_RemoveSurveyWhenNoCasesLeft<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_RemoveSurveyWhenNoCasesLeft
  ENDIF
ENDFUNCTION

FUNCTION GetShowGeoPositionBtn: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sShowGeoPositionBtn //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_ShowGeoPositionBtn<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_ShowGeoPositionBtn
  ENDIF
ENDFUNCTION

FUNCTION GetRequireCasePresent: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sRequireCasePresent //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_RequireCasePresent<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_RequireCasePresent
  ENDIF
ENDFUNCTION

FUNCTION GetCheckServerForCase: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sCheckServerForCase //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_CheckServerForCase<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_CheckServerForCase
  ENDIF
ENDFUNCTION

FUNCTION GetRefreshCaseDuringSync: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sRefreshCaseDuringSync //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_RefreshCaseDuringSync<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_RefreshCaseDuringSync
  ENDIF
ENDFUNCTION

FUNCTION GetAskDownloadWhenNeeded: INTEGER
INSTRUCTIONS
//survey setting has prio over cma setting
  RESULT:= iSettings.sAskDownloadWhenNeeded //value in CMA settings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_AskDownloadWhenNeeded<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_AskDownloadWhenNeeded
  ENDIF
ENDFUNCTION

FUNCTION GetCmdlineForEdit: STRING
PARAMETERS pCmdLineForEdit: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pCmdLineForEdit
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_CmdLineForEdit
  ENDIF
ENDFUNCTION

FUNCTION GetDetailsTemplate: STRING
PARAMETERS pDetailsTemplate: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pDetailsTemplate
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_DetailsTemplate
  ENDIF
ENDFUNCTION

FUNCTION GetAttemptsRoute: STRING
PARAMETERS pAttemptsRoute: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pAttemptsRoute
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_AttemptsRoute
  ENDIF
ENDFUNCTION

FUNCTION GetAttemptsGUID: STRING
PARAMETERS pAttemptsGUID: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pAttemptsGUID
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_AttemptsGUID
  ENDIF
ENDFUNCTION

FUNCTION GetContactInfoGUID: STRING
PARAMETERS pContactInfoGUID: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pContactInfoGUID
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_ContactInfoGUID
  ENDIF
ENDFUNCTION

FUNCTION GetOrientationCmdLineParameter: STRING
PARAMETERS pForSurvey: INTEGER
AUXFIELDS
  aVal: INTEGER
INSTRUCTIONS
  IF pForSurvey=1 THEN 
    aVal:= GetOrientation
  ELSE
    aVal:= Orientation
  ENDIF
  RESULT:= ''
  CASE aVal OF
  1: RESULT:= ' -orientation:portrait'
  2: RESULT:= ' -orientation:landscape'
  //when both: do nothing because that is the default.
  ENDCASE
ENDFUNCTION    

FUNCTION GetFieldFilter: STRING
PARAMETERS
  pGUID: STRING
  pShowGroup: INTEGER
INSTRUCTIONS
  AddToLog('GetFieldFilter: Guid='+pGuid+' Group='+STR(pShowGroup)+' CurrentGUID='+CurrentSurveyGUID+' CurrentGroupGUID='+CurrentGroupGUID) 
  RESULT:= cDefaultFieldFilter
  IF pShowGroup=1 THEN
    IF iSettings.sFieldFilterGroup<>'' THEN
       RESULT:= iSettings.sFieldFilterGroup
    ELSE
       RESULT:= cDefaultFieldFilterGroup
    ENDIF 
    IF CurrentGroupGUID<>CurrentSurveyGUID THEN
      GetSurveySettings(CurrentGroupGUID)
    ENDIF
    IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_FieldFilterGroup<>'' THEN
      RESULT:= iSurveySettings.Survey_FieldFilterGroup
    ENDIF  
  ELSEIF pGUID='*' THEN
    IF iSettings.sFieldFilterAll<>'' THEN 
      RESULT:= iSettings.sFieldFilterAll 
    ENDIF
  ELSE  
    IF iSettings.sFieldFilterTopic<>'' THEN 
      RESULT:= iSettings.sFieldFilterTopic 
    ELSE  
      RESULT:= cDefaultFieldFilterTopic
    ENDIF
    IF pGuid<>CurrentSurveyGUID THEN
      GetSurveySettings(pGuid)
    ENDIF
    IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_FieldFilter<>'' THEN
      RESULT:= iSurveySettings.Survey_FieldFilter
    ENDIF  
  ENDIF
  AddToLog('Current field filter: '+RESULT) 
ENDFUNCTION

FUNCTION GetFieldWidths: OPEN
PARAMETERS
  pFieldFilter: OPEN
  pWhichSurvey: STRING
AUXFIELDS
  aField: STRING
  aWidth: INTEGER
  aValue: STRING
  aCol: INTEGER
  aIndex: INTEGER  
  aSurvey: STRING
INSTRUCTIONS
  RESULT:= ''
  aSurvey:= pWhichSurvey
  IF auxParentChildView=yes THEN 
    aSurvey:= CurrentGroupGUID 
    IF CurrentGroupGUID<>CurrentSurveyGUID THEN
      GetSurveySettings(CurrentGroupGUID)
    ENDIF
  ENDIF 
  REPEAT
    aIndex:= aIndex+1
    aField:= GetEntry(pFieldFilter,aIndex,',')
    IF aField<>'' THEN
      IF aIndex>1 THEN RESULT:= RESULT+',' ENDIF
      IF POSITION('TCUSTOMCOL',UPPERCASE(aField))=1 THEN
        aCol:= VAL(SUBSTRING(aField,11,2))
        IF aSurvey<>EMPTY AND iSurveySettings.Survey_CustomColCount>=1 THEN
          aWidth:= iSurveySettings.Survey_CustomCol[aCol].Width
        ELSEIF iSettings.sCustomColCount>=1 THEN
          aWidth:= iSettings.sCustomCol[aCol].Width
        ENDIF    
        IF aWidth<>EMPTY THEN RESULT:= RESULT+STR(aWidth) ENDIF
      ELSE
        aValue:= ExtractValueForFieldFromList(iSettings.sFieldWidths,aField)
        IF aValue<>'' THEN
          RESULT:= RESULT+aValue  //check to be numeric...
        ENDIF    
      ENDIF  
    ENDIF  
  UNTIL aField=''
ENDFUNCTION  

FUNCTION GetFieldTitles: OPEN
PARAMETERS
  pFieldFilter: OPEN
  pWhichSurvey: STRING
AUXFIELDS
  aField: STRING
  aTitle: STRING
  aCol: INTEGER
  aIndex: INTEGER
  aAdded: (yes),EMPTY  
  aSurvey: STRING
INSTRUCTIONS
  RESULT:= ''
  IF pWhichSurvey<>'*' THEN
    aSurvey:= pWhichSurvey
  ENDIF  
  IF auxParentChildView=yes THEN 
    aSurvey:= CurrentGroupGUID 
    IF CurrentGroupGUID<>CurrentSurveyGUID THEN
      GetSurveySettings(CurrentGroupGUID)
    ENDIF
  ENDIF 
  REPEAT
    aIndex:= aIndex+1
    aField:= GetEntry(pFieldFilter,aIndex,',')
    IF aField<>'' THEN
      IF aIndex>1 THEN RESULT:= RESULT+',' ENDIF
      aTitle:= EMPTY
      IF POSITION('TCUSTOMCOL',UPPERCASE(aField))=1 THEN
        aCol:= VAL(SUBSTRING(aField,11,2))
        IF aSurvey<>EMPTY AND iSurveySettings.Survey_CustomColCount>=1 THEN
          aTitle:= iSurveySettings.Survey_CustomCol[aCol].Title
        ELSEIF iSettings.sCustomColCount>=1 THEN
          aTitle:= iSettings.sCustomCol[aCol].Title
        ENDIF  
        //now get the correct language...
        aTitle:= ExtractTextForDisplay(aTitle)
      ENDIF
      IF aTitle=EMPTY THEN
        aTitle:= GetTitleFromMeta([[locCases]],aField,CurrentLanguage)
      ENDIF
      IF aTitle<>EMPTY THEN 
        aAdded:= yes
        RESULT:= RESULT+aTitle 
      ENDIF
    ENDIF  
  UNTIL aField=''
  IF aAdded=EMPTY THEN RESULT:= '' ENDIF //no reason to pass on strings with comma's...
ENDFUNCTION  

FUNCTION GetDefaultMode: STRING
INSTRUCTIONS
  RESULT:= iSettings.sDefaultMode
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DefaultMode<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DefaultMode
  ENDIF
ENDFUNCTION

FUNCTION GetDefaultLayoutSet: STRING
INSTRUCTIONS
  RESULT:= iSettings.sDefaultLayoutSet
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DefaultLayoutSet<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DefaultLayoutSet
  ENDIF
ENDFUNCTION

FUNCTION GetDefaultDataEntrySettings: STRING
INSTRUCTIONS
  RESULT:= iSettings.sDefaultDataEntrySettings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DefaultDataEntrySettings<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DefaultDataEntrySettings
  ENDIF
ENDFUNCTION

FUNCTION GetDoneValues: STRING
PARAMETERS
  pGUID: STRING
INSTRUCTIONS
  RESULT:= auxParentDoneValues
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DoneValues<>EMPTY THEN
    RESULT:= ','+iSurveySettings.Survey_DoneValues+','
  ENDIF
  addtolog('Done values:'+result+' = '+auxParentDoneValues)
ENDFUNCTION

PROCEDURE SetGroupDone
AUXFIELDS Index: INTEGER
INSTRUCTIONS
  IF CONFIRM(auxDisplaySetting+msgConfirmSetGroupToDone) THEN
    Index:=0
    tGroupCase.RESET
    FOR Index:= 1 TO tGroupCase.FORMCOUNT DO
      tGroupCase.READNEXT
      tCase:= tGroupCase
      IF tCase.tFinal=EMPTY THEN
        tCase.tFinal:= yes
        ufLocalCases.GET(tCase.tMainSurveyID,tCase.tIdentifier)
        ufLocalCases.CMA_CaseClosed:= yes
        {$ifdef UseDateTimeType}
        ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(NowDT,cDateTimeFormat) 
        {$else}
        ufLocalCases.CMA_Process.LastChangedDT:= NowDT 
        {$endif}
        WriteLocalCaseAndFlush
        WriteTempCaseAndUpdateCache
      ENDIF
    ENDDO
    DetermineGroupStatus(currentGroupID,0)
    tGroupCase.RESET
    FOR Index:= 1 TO tGroupCase.FORMCOUNT DO
      tGroupCase.READNEXT
      tCase:= tGroupCase
      ufLocalCases.GET(tCase.tMainSurveyID,tCase.tIdentifier)
      tCase.tCaseStatus:= TranslateStatus(GetDisplayStatus)
      tCase.tGroupStatus:= TranslateStatus(GetGroupDisplayStatus)
      tCase.tGroupSummary:= ufLocalCases.CMA_GroupSummary
      tCase.tStatus:= TranslateStatus(GetDisplayStatus)
      tCase.tGroupSort:= ufLocalCases.CMA_GroupSort
      WriteTempCaseAndUpdateCache
    ENDDO
    tGroupCase.RESET  
  ENDIF
ENDPROCEDURE

FUNCTION ContactDataSep: STRING
PARAMETERS
  pIndex: INTEGER
INSTRUCTIONS
  IF pIndex=1 THEN RESULT:= ContactDataSep1 ELSE RESULT:= ContactDataSep2 ENDIF 
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_ContactDataSep<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_ContactDataSep[pIndex]
  ENDIF
ENDFUNCTION

FUNCTION CustomDataSep: STRING
PARAMETERS
  pIndex: INTEGER
INSTRUCTIONS
  IF pIndex=1 THEN RESULT:= CustomDataSep1 ELSE RESULT:= CustomDataSep2 ENDIF 
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_CustomDataSep<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_CustomDataSep[pIndex]
  ENDIF
ENDFUNCTION

FUNCTION GetCustomFieldFilterName: STRING
INSTRUCTIONS
  RESULT:= iSettings.sCustomFilter.FieldName
  IF SelectedSurvey<>'' AND iSurveySettings.Survey_HasCustomFilter<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_CustomFilter.FieldName
  ENDIF  
ENDFUNCTION

FUNCTION GetCustomFieldFilterTxt: STRING
INSTRUCTIONS
  RESULT:= iSettings.sCustomFilterTxt
  IF SelectedSurvey<>'' AND iSurveySettings.Survey_HasCustomFilter<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_CustomFilterTxt
  ENDIF  
ENDFUNCTION

FUNCTION GetCustomFieldFilterOrigin: INTEGER
INSTRUCTIONS
  RESULT:= iSettings.sCustomFilter.Origin
  IF SelectedSurvey<>'' AND iSurveySettings.Survey_HasCustomFilter<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_CustomFilter.Origin
  ENDIF  
ENDFUNCTION

// end
          
PROCEDURE DetermineGroupStatus
PARAMETERS 
  pGroupID: STRING
  pUpdateUploadAlso: INTEGER
AUXFIELDS 
  aStatus: STRING
  aAllStatus: STRING
  aAllDone: STRING
  gStatus: STRING
  gSummary: STRING
  index: integer
  parentID: STRING
  aParentGUID: STRING
  aCount: INTEGER
  hasDonor: (yes),EMPTY
  aA,aS,aI,aC,aF,aR,aL,aD: INTEGER
  aCurrentGUID,aCurrentID: string
INSTRUCTIONS
  IF pGroupID<>'' THEN
    //filter all cases with equal pGroupID
    aCurrentGUID:= CurrentSurveyGUID
    aCurrentID:= CurrentCaseID

    ufLocalCases.SETRECORDFILTER('CMA_GroupID=\''+pGroupID+'\'')
    aCount:= ufLocalCases.FORMCOUNT
    FOR index:= 1 TO aCount DO
      ufLocalCases.READNEXT
      aStatus:= ufLocalCases.CMA_Status
      IF ufLocalCases.CMA_GroupType=gParent THEN
        aParentGUID:= ufLocalCases.MainSurveyID
        parentID:= ufLocalCases.ID
        IF ufLocalCases.CMA_IsDonorCase=yes THEN hasDonor:= yes ENDIF
      ENDIF
      CASE aStatus OF
      'Added':       aAllStatus:= aAllStatus+'A' aA:= aA+1
      'Started':     aAllStatus:= aAllStatus+'S' aS:= aS+1
      'Interrupted': IF ufLocalCases.CMA_CaseClosed=EMPTY THEN
                       aAllStatus:= aAllStatus+'I' aI:= aI+1
                     ELSE
                       aAllStatus:= aAllStatus+'D' aD:= aD+1
                     ENDIF  
      'Completed':   aAllStatus:= aAllStatus+'C' aC:= aC+1
      'Finalized':   aAllStatus:= aAllStatus+'F' aF:= aF+1
      'Reopened':    aAllStatus:= aAllStatus+'R' aR:= aR+1
      'Closed':      aAllStatus:= aAllStatus+'L' aL:= aL+1
      ENDCASE 
      IF auxShowGroupDoneBtn=yes THEN
        IF ufLocalCases.CMA_CaseClosed=yes THEN
          aAllDone:= aAllDone+'D'
        ELSEIF aStatus IN ['Interrupted'] THEN
          GetSurveySettings(ufLocalCases.MainSurveyID)
          IF POSITION(','+ufLocalCases.CMA_HappeningsCod+',',GetDoneValues(ufLocalCases.MainSurveyID))>0 THEN
            aAllDone:= aAllDone+'C'
          ELSE
            aAllDone:= aAllDone+'X'
          ENDIF  
        ELSE
          aAllDone:= aAllDone+'X'
        ENDIF
      ENDIF          
    ENDDO
    auxCurrentDoneStatus:= aAllDone
    IF auxShowGroupDoneBtn=yes THEN ComputeEnableGroupDone ENDIF
    IF LEN(aAllStatus)=aCount OR (LEN(aAllStatus)=aCount AND hasDonor=Yes) THEN //all cases in group have a status
      IF POSITION('R',aAllStatus)>0 THEN gStatus:= 'Reopened' 
      ELSEIF POSITION('A',aAllStatus)>0 OR POSITION('S',aAllStatus)>0 THEN gStatus:= 'Started' 
      ELSEIF POSITION('I',aAllStatus)>0 THEN gStatus:= 'Interrupted'
      ELSEIF POSITION('L',aAllStatus)>0 THEN gStatus:= 'Closed'
      ELSE gStatus:= 'Done'
      ENDIF
    ELSE
      IF LEN(aAllStatus)>0 THEN gStatus:= 'Started' ENDIF
    ENDIF  
    gSummary:= '#='+STR(aCount-ORD(hasDonor))
    IF aA>0 THEN gSummary:= gSummary+',A='+STR(aA) ENDIF
    IF aS>0 THEN gSummary:= gSummary+',S='+STR(aS) ENDIF
    IF aI>0 THEN gSummary:= gSummary+',I='+STR(aI) ENDIF
    IF aD>0 THEN gSummary:= gSummary+',D='+STR(aD) ENDIF
    IF aC>0 THEN gSummary:= gSummary+',C='+STR(aC) ENDIF
    IF aF>0 THEN gSummary:= gSummary+',F='+STR(aF) ENDIF
    IF aR>0 THEN gSummary:= gSummary+',R='+STR(aR) ENDIF
    IF aL>0 THEN gSummary:= gSummary+',L='+STR(aL) ENDIF 
    ufLocalCases.SETRECORDFILTER('')
    IF aParentGUID<>EMPTY AND parentID<>EMPTY THEN
      ufLocalCases.GET(PRIMARY,aParentGUID,parentID)
      IF ufLocalCases.CMA_GroupStatus<>gStatus OR ufLocalCases.CMA_GroupSummary<>gSummary THEN
        ufLocalCases.CMA_GroupStatus:= gStatus
        ufLocalCases.CMA_GroupSummary:= gSummary
        {$ifdef UseDateTimeType}
        ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(NowDT,cDateTimeFormat) 
        {$else}
        ufLocalCases.CMA_Process.LastChangedDT:= NowDT 
        {$endif}
        AddToLog('DetermineGroupStatus for "'+pGroupID+'": '+' GroupStatus='+gStatus+' GroupSummary='+gSummary)
        WriteLocalCaseAndFlush
        InitNewTemporaryCaseFromLocalDatabase
        IF pUpdateUploadAlso=1 THEN
          ufServerCases.GET(PRIMARY,parentGUID,parentID)
          IF ufServerCases.RESULTOK THEN //should always be the case...
            ufServerCases.CMA_GroupStatus:= gStatus
            ufServerCases.CMA_GroupSummary:= gSummary
            ufServerCases.CMA_Process.LastChangedDT:= ufLocalCases.CMA_Process.LastChangedDT
            ufServerCases_Write(cTraceGroup)
          ENDIF
        ENDIF  
        IF aCurrentGUID<>tCase.tMainSurveyID or aCurrentID<>tCase.tIdentifier THEN
          ufLocalCases.GET(PRIMARY,aCurrentGUID,aCurrentID)
          InitTemporaryCaseFromLocalDatabase
          CurrentCaseID:= tCase.tIdentifier
          CurrentSurveyGUID:= tCase.tMainSurveyID
        ENDIF
      ENDIF
    ENDIF  
  ENDIF  
ENDPROCEDURE

FUNCTION GetDisplayStatus: STRING
INSTRUCTIONS
  IF (ufLocalCases.CMA_CaseClosed=yes AND ufLocalCases.CMA_Status<>'Closed') AND ufLocalCases.CMA_Process.LastUploaded.When>ufLocalCases.CMA_Process.LastChangedDT THEN
    RESULT:= 'Uploaded'
  ELSEIF ufLocalCases.CMA_CaseClosed=yes AND ufLocalCases.CMA_Status<>'Closed' AND ufLocalCases.CMA_Status='Interrupted' THEN
    RESULT:= 'InterruptedDone'
  ELSE  
    RESULT:= ufLocalCases.CMA_Status
  ENDIF
ENDFUNCTION

FUNCTION GetGroupDisplayStatus: STRING
INSTRUCTIONS
  IF ufLocalCases.CMA_GroupStatus='Done' AND ufLocalCases.CMA_Process.LastUploaded.When>ufLocalCases.CMA_Process.LastChangedDT THEN
    RESULT:= 'Uploaded'
  ELSE  
    RESULT:= ufLocalCases.CMA_GroupStatus
  ENDIF
ENDFUNCTION

PROCEDURE AddAttempt
PARAMETERS
  pAfterInterview: INTEGER
  pCaseStatus: INTEGER
  pHappeningsValue: STRING
AUXFIELDS
  iRes: INTEGER
  iSeqNr: INTEGER
  aFinal: INTEGER
  aHappeningsStr: STRING
  aHappeningsLbl: STRING
  aHappeningsCod: STRING
  aLocation: STRING
  aAppointment: INTEGER
  aExtra: STRING
  aFields: OPEN
  aContinue: INTEGER
  aCmdLine: OPEN
  aPrevStatus: STRING
  aNewStatus: STRING
  AttemptCanSetStatus: (yes),EMPTY
  aHandled: (yes),EMPTY
INSTRUCTIONS
  aContinue:= 0
  IF pAfterInterview=0 THEN
    IF CONFIRM(auxDisplaySetting+mgStartAttempt) THEN
      aContinue:= 1
    ENDIF
  ELSE
    aContinue:= 1
  ENDIF      
  IF aContinue=1 THEN
    aExtra:= AdditionalSettings(0)
    srvList.GET(CurrentAttemptsGUID)
    iSeqNr:= tAttempt.FORMCOUNT+1 
    AddToLog('Add attempt: '+CurrentCaseGUID+' - '+CurrentCaseID+' - '+STR(iSeqNr)+' using '+CurrentAttemptsGUID)
    aFields:= '-Fields:"AfterInterview='+STR(pAfterInterview)+',CaseStatus='+STR(pCaseStatus)+
                        ',User=\''+USERNAME+'\',Happenings='+pHappeningsValue+',InterviewStart=\''+tCase.tInterviewStart+'\',InterviewEnd=\''+tCase.tInterviewEnd+'\''
    IF tCase.tStartDate<>EMPTY THEN aFields:= aFields+',CaseStartDate='+DATETOSTR(tCase.tStartDate,'dd-MM-yyyy') ENDIF                    
    IF tCase.tEndDate<>EMPTY THEN aFields:= aFields+',CaseEndDate='+DATETOSTR(tCase.tEndDate,'dd-MM-yyyy') ENDIF                    
    IF GetAttemptsRoute(tCase.tAttemptsRoute)<>'' THEN aFields:= aFields+',AttemptsRoute=\''+GetAttemptsRoute(tCase.tAttemptsRoute)+'\'' ENDIF
    IF tCase.tIsDonorCase<>EMPTY THEN aFields:= aFields+',IsDonorCase=1' ENDIF
    ufLocalCases.GET(CurrentCaseGUID,CurrentCaseID) 
    IF [[attempts.FieldExists('CMA_Status')]]='True' THEN
      AttemptCanSetStatus:= yes
      aFields:= aFields+',CMA_Status=\''+ufLocalCases.CMA_Status+'\''
    ENDIF
    IF [[attempts.FieldExists('PrevHappeningsCod')]]='True' THEN
      IF ufLocalCases.CMA_HappeningsCod<>EMPTY THEN 
        aFields:= aFields+',PrevHappeningsCod='+ufLocalCases.CMA_HappeningsCod
      ENDIF  
    ENDIF
    aFields:= ProcessMappings_Put(aFields,1)
    aFields:= aFields+'" '
    aCmdLine:= '-KeyValue:'+CurrentCaseGUID+',\''+CurrentCaseID+'\','+STR(iSeqNr)+' '+ aFields+ '-Language:'+CurrentLanguage+aExtra
    AddToLog('CmdLine: "'+aCmdLine+'"')
    iRes:= srvlist.EDIT(aCmdLine)
    //case just created is now in ufServerAttempts database
    IF iRes<>0 THEN AddToLog('Edit result: '+STR(iRes)) ENDIF 
    aLastChange:= NowDT
    WriteSettings
    iRes:= ufServerAttempts.OPEN(REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE))
    IF iRes=0 THEN
      ufServerAttempts.GETFORM(PRIMARY,CurrentCaseGUID+',\''+CurrentCaseID+'\','+STR(iSeqNr))
      IF ufServerAttempts.RESULTOK THEN
        ufLocalAttempts:= ufServerAttempts
        IF ufLocalAttempts.GETVALUE('Happenings')<>'' THEN
          AddToLog('Add attempt finished')
          auxLocked:= EMPTY
          aFinal:= VAL(ufLocalAttempts.GETVALUE('CMA_CaseClosed',UNFORMATTED))
          auxNote:= ufLocalAttempts.GETVALUE('Notes')
          aHappeningsCod:= ufLocalAttempts.GETVALUE('Happenings',UNFORMATTED) 
          aHappeningsLbl:= ufLocalAttempts.GETVALUE('Happenings')
          aHappeningsStr:= ufLocalAttempts.GETVALUE('HappeningsStr')
          IF AttemptCanSetStatus=yes THEN
            aNewStatus:= ufLocalAttempts.GETVALUE('CMA_Status')
          ENDIF
          IF aHappeningsStr='' THEN
            aHappeningsStr:= GetCategoryText([[attempts]],'Happenings',DefaultLanguage,VAL(aHappeningsCod)) 
          ENDIF
          ufLocalAttempts.PUTVALUE('HappeningsStr',aHappeningsStr)
          aGeoLocation:= EMPTY
          IF GetTrackGeoPosition=1 THEN
            aGeoLocation:= GETGEOPOSITION
            ufLocalAttempts.PUTVALUE('GeoLocation',aGeoLocation)
          ENDIF  
          ufLocalAttempts.WRITE
          ufLocalAttempts.FLUSH
          AddAttemptToList(1)
          ufLocalCases.GET(CurrentCaseGUID,CurrentCaseID)
          ProcessMappings_GET(1)
          IF ufLocalAttempts.GETVALUE('Appointment',UNFORMATTED)='1' THEN
            ufLocalCases.CMA_Appointment.AppDate:= STRTODATE(ufLocalAttempts.GETVALUE('AppDate'))
            ufLocalCases.CMA_Appointment.AppTime:= STRTOTIME(ufLocalAttempts.GETVALUE('AppTime'))
            ufLocalCases.CMA_Appointment.WhenMade.User:= USERNAME
            {$IFDEF UseDateTimeType} 
            ufLocalCases.CMA_Appointment.WhenMade.When:= STRTODATETIME(ufLocalAttempts.GETVALUE('WhenMade.When'),cDateTimeFormat)
            {$ELSE}
            ufLocalCases.CMA_Appointment.WhenMade.When:= ufLocalAttempts.GETVALUE('WhenMade.When')
            {$ENDIF}
          ENDIF
          {$IFDEF UseDateTimeType} 
          ufLocalCases.CMA_Process.LastAttempt.When:= STRTODATETIME(ufLocalAttempts.GETVALUE('WhenMade.When'),cDateTimeFormat)
          {$ELSE}
          ufLocalCases.CMA_Process.LastAttempt.When:= ufLocalAttempts.GETVALUE('WhenMade.When')
          {$ENDIF}
          ufLocalCases.CMA_Process.LastAttempt.User:= USERNAME
          ufLocalCases.CMA_Process.GeoLocation:= aGeoLocation
          ufLocalCases.CMA_HappeningsStr:= aHappeningsStr
          ufLocalCases.CMA_HappeningsLbl:= aHappeningsLbl
          ufLocalCases.CMA_HappeningsCod:= aHappeningsCod
          aPrevStatus:= ufLocalCases.CMA_Status
          IF AttemptCanSetStatus=yes AND aPrevStatus<>aNewStatus THEN
            ufLocalCases.CMA_Status:= aNewStatus
          ELSEIF ufLocalCases.CMA_Status='' OR ufLocalCases.CMA_Status='Added' OR ufLocalCases.CMA_Status='Reopened' THEN
            aHandled:= yes
            IF ufLocalCases.CMA_Status='Reopened' THEN
              IF iSettings.sConfirmReopenedHandled=YES THEN
                IF NOT Confirm(auxDisplaySetting+msgReopenedHandled) THEN 
                  aHandled:= EMPTY 
                  aFinal:= EMPTY
                ENDIF
              ENDIF   
            ENDIF
            IF aHandled=yes THEN
              IF aFinal=1 THEN 
                ufLocalCases.CMA_Status:= 'Finalized'
              ELSE 
                ufLocalCases.CMA_Status:= 'Started'
              ENDIF
            ENDIF  
          ELSEIF ufLocalCases.CMA_Status='Interrupted' THEN  
            IF aFinal=1 THEN 
              ufLocalCases.CMA_Status:= 'Finalized' 
            ENDIF
          ELSEIF ufLocalCases.CMA_Status='Started' THEN
            IF aFinal=1 THEN 
              ufLocalCases.CMA_Status:= 'Finalized' 
            ENDIF
          ENDIF  
          IF aFinal=1 THEN
            ufLocalCases.CMA_CaseClosed:= yes
          ENDIF  
          StoreAttemptsInLocalCaseAndWrite
          IF aGeoLocation<>'' THEN
            aLocation:=  ' at location '+aGeoLocation+','
          ENDIF  
          AddToLog('Attempt finalized'+aLocation+' with result: '+aHappeningsStr+', status: '+ufLocalCases.CMA_Status)
          IF ufLocalAttempts.GETVALUE('Appointment',UNFORMATTED)='1' THEN
            IF iSettings.sShowDateFormat<>EMPTY THEN
              tCase.tAppointment:= DATETOSTR(ufLocalCases.CMA_Appointment.AppDate,iSettings.sShowDateFormat)+', '+TIMETOSTR(ufLocalCases.CMA_Appointment.AppTime)
            ELSE
              tCase.tAppointment:= DATETOSTR(ufLocalCases.CMA_Appointment.AppDate)+', '+TIMETOSTR(ufLocalCases.CMA_Appointment.AppTime)
            ENDIF 
            tCase.tAppForToday:= EMPTY
            IF ufLocalCases.CMA_Appointment.AppDate=SYSDATE THEN tCase.tAppForToday:= yes ENDIF
            IF iSettings.sTodayAppointmentPreFix<>EMPTY THEN  
              IF tCase.tAppForToday=yes THEN
                tCase.tAppointment:= iSettings.sTodayAppointmentPreFix+tCase.tAppointment
              ENDIF  
            ENDIF  
          ENDIF
          {$IFDEF UseDateTimeType} 
          tCase.tLastAttempt:= DateForDisplay(DATETOSTR(ufLocalCases.CMA_Process.LastAttempt.When,cDateTimeFormat)_
          {$ELSE}
          tCase.tLastAttempt:= DateForDisplay(ufLocalCases.CMA_Process.LastAttempt.When)
          {$ENDIF}
           
          tCase.tFinal:= ufLocalCases.CMA_CaseClosed
          if ufLocalCases.CMA_Data.AttemptsCount>0 then
            tCase.tAttemptsCount:= STR(ufLocalCases.CMA_Data.AttemptsCount)
          else
            tCase.tAttemptsCount:= EMPTY
          endif
          tCase.tGroupType:= ufLocalCases.CMA_GroupType
          tCase.tGroupStatus:= TranslateStatus(GetGroupDisplayStatus)
          tCase.tGroupSummary:= ufLocalCases.CMA_GroupSummary
          tCase.tCaseStatus:= TranslateStatus(GetDisplayStatus)
          IF auxParentChildView=EMPTY THEN //on main cases screen...
            IF ufLocalCases.CMA_GroupType=gParent AND ufLocalCases.CMA_AllowSpawning<>yes THEN
              tCase.tStatus:= TranslateStatus(GetGroupDisplayStatus)
            ELSE  
             tCase.tStatus:= TranslateStatus(GetDisplayStatus) 
            ENDIF  
          ELSE
            tCase.tStatus:= TranslateStatus(GetDisplayStatus) 
          ENDIF
          tCase.tGroupID:= ufLocalCases.CMA_GroupID 
          IF ufLocalCases.CMA_SpawnCount>0 THEN
            tCase.tSpawnCount:= STR(ufLocalCases.CMA_SpawnCount)
          ELSE
            tCase.tSpawnCount:= EMPTY
          ENDIF 
          tCase.tLastResult:= EMPTY
          IF (auxParentChildView=EMPTY AND
              (ufLocalCases.CMA_GroupType=EMPTY OR 
               (ufLocalCases.CMA_GroupType=gParent AND iSettings.sHideResultOfParent=EMPTY)
              )
             ) OR
             (auxParentChildView=Yes)
          THEN
            CASE ShowResult OF
            rCodeOnly: tCase.tLastResult:= aHappeningsCod
            rStrOnly:  tCase.tLastResult:= aHappeningsStr
            rBoth:     tCase.tLastResult:= aHappeningsCod+':'+aHappeningsStr
            rLabOnly:  tCase.tLastResult:= aHappeningsLbl
            rCodeLab:  tCase.tLastResult:= aHappeningsCod+':'+aHappeningsLbl
            ENDCASE
          ENDIF  
          WriteTempCaseAndUpdateCache
          RunAtEndSetup(CurrentCaseGuid,CurrentCaseID,ufLocalCases.CMA_GroupID,pAfterInterview,aPrevStatus)
          UpdateCasesScreen
          AutoSync
          IF iSeqNr>1 THEN
            tAttempt.GET(CurrentCaseGUID,CurrentCaseID,iSeqNr-1)
            tAttempt.TheLastOne:= 0
            tAttempt.WRITE
          ENDIF  
          IF aFinal=1 THEN auxLocked:= 1 ENDIF
          tAttempt.RESET
          tAttempt.INITRECORD
          tAttempt.GET(CurrentCaseGUID,CurrentCaseID,tAttempt.FORMCOUNT) //focus the last one
        ELSE
           AddToLog('Attempt not added because Happenings code empty')
        ENDIF  
      ELSE
        AddToLog('Get of attempt failed!')
      ENDIF  
    ELSE
      AddToLog('Failed to open '+ REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+' = '+STR(iRes))
    ENDIF 
  ENDIF   
ENDPROCEDURE

PROCEDURE ProcessAttempts
AUXFIELDS 
  index: INTEGER 
  aLast: 0..1
INSTRUCTIONS
  AddToLog('Process attempts: '+CurrentCaseGUID+' '+CurrentCaseID)
  SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(tCase.tAttemptsGUID))
  ufLocalCases.GET(CurrentCaseGUID,CurrentCaseID)
  ufLocalAttempts.SETRECORDFILTER('mainsurveyid=\''+CurrentCaseGUID+'\' and id=\''+CurrentCaseID+'\'')
  IF ufLocalCases.CMA_Data.AttemptsCount<>ufLocalAttempts.FORMCOUNT THEN
    AddToLog('Error in attempts registration. Expected: '+STR(ufLocalCases.CMA_Data.AttemptsCount)+' Found:'+STR(ufLocalAttempts.FORMCOUNT))
  ENDIF
  tAttempt.ERASE
  aLast:= 0
  IF ufLocalCases.CMA_Status='Closed' THEN 
    auxLocked:= 1
  ELSE
    auxLocked:= EMPTY
  ENDIF  
  auxSeqNr:= EMPTY
  auxWhen:= EMPTY
  auxHappeningsStr:= EMPTY
  auxApptDate:= EMPTY
  auxApptTime:= EMPTY
  AuxNote:= ''
  FOR index:= 1 TO ufLocalAttempts.FORMCOUNT DO
    ufLocalAttempts.READNEXT
    IF index=ufLocalAttempts.FORMCOUNT THEN aLast:= 1 ENDIF
    AddAttemptToList(aLast)
  ENDDO 
  ufLocalAttempts.SETRECORDFILTER('')
ENDPROCEDURE

PROCEDURE StoreAttemptsInLocalCaseAndWrite
AUXFIELDS 
  index, iRes: INTEGER 
  aFName: STRING
INSTRUCTIONS
//this procedure assummes that the correct case from ufLocalCases has already been loaded
  ufLocalAttempts.SETRECORDFILTER('mainsurveyid=\''+CurrentCaseGUID+'\' and id=\''+CurrentCaseID+'\'')
  ufLocalAttempts.RESET
  aFName:= 'attempts_'+CurrentCaseGUID+'_'+REPLACE(CurrentCaseID,',','_')+'.xml'
  oAttempts.OPEN(aFName)
  FOR index:= 1 TO ufLocalAttempts.FORMCOUNT DO
    ufLocalAttempts.READNEXT
    oAttempts:= ufLocalAttempts
    oAttempts.WRITE
  ENDDO
  IF ufLocalAttempts.FORMCOUNT>0 THEN
    ufLocalCases.CMA_Data.AttemptsCount:= ufLocalAttempts.FORMCOUNT
  ELSE
    ufLocalCases.CMA_Data.AttemptsCount:= EMPTY  
  ENDIF  
  if ufLocalCases.CMA_Data.AttemptsCount>0 then
    tCase.tAttemptsCount:= STR(ufLocalCases.CMA_Data.AttemptsCount)
  else
    tCaseCache.tAttemptsCount:= EMPTY
  endif  
  WriteTempCaseAndUpdateCache
  oAttempts.RELEASE
  iRes:= ufLocalCases.CMA_Data.Attempts.LOADFROMDISK(aFName)
  iREs:= DELETEFILE(aFname)
  {$ifdef UseDateTimeType}
  ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(NowDT,cDateTimeFormat) 
  {$else}
  ufLocalCases.CMA_Process.LastChangedDT:= NowDT 
  {$endif}
  WriteLocalCaseAndFlush
  ufLocalAttempts.SETRECORDFILTER('')//reset 
ENDPROCEDURE

PROCEDURE RestoreAttemptsFromCase
AUXFIELDS 
  iRes: INTEGER 
  aFName: STRING
INSTRUCTIONS
  IF ufLocalCases.CMA_Data.Attempts<>EMPTY THEN
    aFName:= [[ufLocalCases.GetField('CMA_Data.Attempts').DataValue.BlobValue.FileName]]
    iRes:= ufLocalCases.CMA_Data.Attempts.SAVETODISK(aFName)
    IF iRes=0 THEN
      GetSurveySettings(ufLocalCases.MainSurveyID)
      SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(ufLocalCases.CMA_AttemptsGUID))
      iRes:= iAttempts.OPEN(aFName)
      IF iRes=0 THEN
        REPEAT
          iAttempts.READNEXT
          IF iAttempts.RESULTOK THEN
            IF iAttempts.GETVALUE('MainSurveyID')=ufLocalCases.MainSurveyID AND 
               iAttempts.GETVALUE('ID')=ufLocalCases.ID THEN //just an extra precaution...
              ufLocalAttempts:= iAttempts
              ufLocalAttempts.WRITE
            ELSE
              AddToLog('Problem with restoring attempts for '+ufLocalCases.MainSurveyID+' '+ufLocalCases.ID)  
            ENDIF  
          ELSE
            AddToLog('Read failed while restoring attempts for '+ufLocalCases.MainSurveyID+' '+ufLocalCases.ID)  
          ENDIF  
        UNTIL iAttempts.LASTRECORD OR NOT iAttempts.RESULTOK
        iAttempts.RELEASE
        iRes:= DELETEFILE(aFName)
        ufLocalAttempts.FLUSH
      ELSE
        AddToLog('Problem with opening '+aFName+'. Error:'+STR(iRes))  
      ENDIF   
    ELSE
      AddToLog('Problem saving attempts for '+ufLocalCases.MainSurveyID+' '+ufLocalCases.ID+'. Error:'+STR(iRes))  
    ENDIF   
  ENDIF
ENDPROCEDURE

PROCEDURE ViewInterview
AUXFIELDS
  aValStat: STRING
  iRes: INTEGER
  aCaseStatus: INTEGER
  aCmdLine: OPEN
  aFName: STRING
  aExtra: STRING
  aKeyCount: INTEGER
  aText: STRING
  aKeys: STRING
  aCmdForEdit: STRING
  aCmdPreLoadForEdit: OPEN
  index: INTEGER
  aDefault: STRING
  p: INTEGER
INSTRUCTIONS
  aExtra:= AdditionalSettings(1)
  AddToLog('View interview '+CurrentCaseGuid+' - '+CurrentCaseID)
  ufLocalCases.GET(CurrentCaseGuid,CurrentCaseID)
  srvList.GET(CurrentCaseGuid)
  IF srvList.RESULTOK THEN
    iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
    aCmdLine:= '-KeyValue:'+CurrentCaseID
    aCmdForEdit:= GetCmdLineForEdit(ufLocalCases.CMA_CmdLineForEdit)
    IF POSITION('-LANGUAGE:',UPPERCASE(aCmdForEdit))=0 THEN
      aCmdLine:= aCmdLine+' -Language:'+CurrentLanguage
    ENDIF 
    IF POSITION('-FIELDS:',UPPERCASE(aCmdForEdit))=0 THEN
      aCmdPreLoadForEdit:= TRIM(ufLocalCases.CMA_PreLoadForEdit)
      IF aCmdPreLoadForEdit<>'' THEN
        aCmdLine:= aCmdLine+' -Fields:'+AddDoubleQuotesIfNeeded(aCmdPreLoadForEdit)+' -AssignMode:Always'
      ENDIF  
    ENDIF  
    IF aCmdForEdit<>'' THEN
      aCmdLine:= aCmdLine+' '+aCmdForEdit
    ENDIF 
    aCmdLine:= aCmdLine+aExtra
    IF POSITION('-MODE:',UPPERCASE(aCmdLine))=0 AND Position('-LAYOUTSETGROUP:',UPPERCASE(aCmdLine))=0 THEN
      aDefault:= GetDefaultMode
      IF aDefault<>EMPTY THEN aCmdLine:= aCmdLine+' -Mode:'+aDefault ENDIF
    ENDIF
    IF POSITION('-LAYOUTSET:',UPPERCASE(aCmdLine))=0  THEN
      aDefault:= GetDefaultLayoutSet
      IF aDefault<>EMPTY THEN aCmdLine:= aCmdLine+' -LayoutSet:'+aDefault ENDIF
    ENDIF
    IF POSITION('-DATAENTRYSETTINGS:',UPPERCASE(aCmdLine))=0 THEN
      aCmdLine:= aCmdLine+' -DataEntrySettings:'+auxReadOnlySettingsName
    ELSE
      //replace the used setting by the new one
      FOR Index:= 0 to val([[TopicMeta.DataEntrySettings.Count]])-1 DO
         IF POSITION('-DATAENTRYSETTINGS:'+UPPERCASE([[TopicMeta.DataEntrySettings[Index].Name]]),UPPERCASE(aCmdLine))>0 THEN
           aCmdLine:= REPLACE(aCmdLine,'-DataEntrySettings:'+[[TopicMeta.DataEntrySettings[Index].Name]],'-DataEntrySettings:'+auxReadOnlySettingsName,TRUE)
         ENDIF  
      ENDDO   
    ENDIF        
    AddToLog('CmdLine: "'+aCmdLine+'"')
    iRes:= srvlist.EDIT(aCmdLine)
    IF iRes<>0 THEN AddToLog('Edit result: '+STR(iRes)) ENDIF 
  ENDIF
ENDPROCEDURE

PROCEDURE PositionOnCurrentRecord
INSTRUCTIONS
  IF auxParentChildView=EMPTY THEN 
    IF CurrentTheSortValue<>'' THEN 
      tMainCase.GET(SECONDARY(secSort),CurrentTheSortValue) 
    ENDIF
  ELSE  
    IF CurrentTheSortGrpValue<>'' THEN 
      tGroupCase.GET(SECONDARY(secSort),CurrentTheSortGrpValue) 
    ENDIF
  ENDIF 
ENDPROCEDURE

PROCEDURE AddAttemptsFromGroupCasesScreen
INSTRUCTIONS
  ProcessAttempts
  AddAttempt(0,0,'')
  AddToLog('Add attempt finished, '+str(tGroupCase.FORMCOUNT))
ENDPROCEDURE

PROCEDURE ProcessAttemptsAndStartDialog
AUXFIELDS
  CIS: STRING
  iRes: INTEGER
INSTRUCTIONS
  IF tCase.tMainSurveyID<>'' THEN
    CurrentCaseGuid:= tCase.tMainSurveyID
    CurrentCaseID:= tCase.tIdentifier
    GetSurveySettings(CurrentCaseGUID)
    auxReadOnlySettingsName:= EMPTY
    auxAllowView:= EMPTY
    IF GetAllowReadOnlyAccess=1 THEN
      srvList.GET(CurrentCaseGuid)
      IF srvList.RESULTOK THEN
        iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename) 
        If iRes=0 THEN auxReadOnlySettingsName:= GetReadOnlySettingsName ENDIF  
        IF auxReadOnlySettingsName<>'' THEN auxAllowView:= yes ENDIF
      ENDIF 
      IF tCase.tHasInterview=yes THEN 
        auxHasInterview:= yes 
      ELSE 
        auxHasInterview:= EMPTY 
      ENDIF
    ENDIF
    CIS:= tCase.tContactInfoShort
    AddToLog('Attempts dialog for '+CurrentCaseGuid+' - '+CurrentCaseID)
    AuxNote:= ''
    ProcessAttempts
    tAttempt.RESET
    tAttempt.INITRECORD
    //focus last attempt
    IF tAttempt.RECORDCOUNT>1 THEN
      tAttempt.GET(CurrentCaseGUID,CurrentCaseID,tAttempt.RECORDCOUNT)
    ELSEIF tAttempt.RECORDCOUNT=0 THEN
      UpdateAttemptsScreen
    ENDIF
    dAttempts(msgAttemptsForCase+' '+CIS)
    PositionOnCurrentRecord
  ELSE
    DisplayOnScreen(msgNoCases,1)
  ENDIF  
ENDPROCEDURE

  
FUNCTION GetBaseFieldTypeName: STRING
PARAMETERS
  pFieldName: STRING
AUXFIELDS 
  s: STRING
INSTRUCTIONS
  s:= UPPERCASE([[TopicMeta.GetField(pFieldName).Type.Structure]])
  CASE s OF
  'DATE': s:= 'DATETYPE'
  'TIME': s:= 'TIMETYPE'
  'BLOCKNAME': s:= 'BLOCK' 
  'STRING': IF [[TopicMeta.GetField(pFieldName).Type.MaxLength]]='' THEN s:= 'OPEN' ENDIF
  ENDCASE
  Result:= s
ENDFUNCTION    

PROCEDURE WriteField
PARAMETERS
  IMPORT pFieldName: STRING
  TRANSIT pOutput: OPEN
AUXFIELDS
  aValue: OPEN   
INSTRUCTIONS
  aValue:= uTopic.GETVALUE(pFieldName,UNFORMATTED)
  IF POSITION(contactDataSep(2),aValue)>0 THEN 
    aValue:= REPLACE(aValue,'\"',CHAR(99999))  
    aValue:= REPLACE(aValue,'"','\"')
    aValue:= REPLACE(aValue,CHAR(99999),'\"')    
    aValue:= '"'+aValue+'"' 
  ENDIF
  pOutput:= pOutput+pFieldName+contactdatasep(1)+aValue+contactDataSep(2)
ENDPROCEDURE

PROCEDURE ProcessOneDatafield
PARAMETERS 
  IMPORT pFieldName: STRING
  TRANSIT pOutput: OPEN
AUXFIELDS
  aFieldName     : STRING
  aBaseFieldType : STRING
  min_a, max_a   : INTEGER
  FNA            : STRING
  MyType         : STRING
  aIndex         : INTEGER
INSTRUCTIONS
  aBaseFieldType:= GetBaseFieldTypeName(pFieldName)
  IF aBaseFieldType = 'BLOCK' THEN {Recursively get field names of the current block }
    LoopDataFieldsDefinitionOrder(pFieldName,pOutput) 
  ELSEIF aBaseFieldType = 'ARRAY' THEN
    min_a:= VAL([[TopicMeta.GetField(pFieldName).Type.IndexType.MinIndex]])
    max_a:= VAL([[TopicMeta.GetField(pFieldName).Type.IndexType.MaxIndex]])
    FNA:= pFieldName+'['+STR(min_a)+']'
    MyType:= [[TopicMeta.GetField(FNA).Type.Structure]]
    IF MyType = 'BlockName' THEN 
      FOR aIndex:= min_a TO max_a DO
        FNA:= pFieldName+'['+STR(aIndex)+']'
        LoopDataFieldsDefinitionOrder(FNA,pOutput)
      ENDDO  
    ELSE
      FOR aIndex:= min_a TO max_a DO
        FNA:= pFieldName+'['+STR(aIndex)+']'     
        WriteField(FNA,pOutput)
      ENDDO    
    ENDIF 
  ELSE 
    WriteField(pFieldName,pOutput)
  ENDIF
ENDPROCEDURE

PROCEDURE LoopDataFieldsDefinitionOrder
PARAMETERS
  IMPORT pFieldName: STRING
  TRANSIT pOutput: OPEN
AUXFIELDS
  aFieldName     : STRING
  aIndex         : INTEGER
  FN             : STRING
INSTRUCTIONS
  aFieldName:= pFieldName  
  FOR aIndex:= 0 TO VAL([[uTopic.getfields(pFieldName).Count]])-1 DO
    IF pFieldName<>'' THEN
      FN:= pFieldName+'.'+[[uTopic.Getfields(pFieldName)[aIndex].LocalName]]
    ELSE
      FN:= [[uTopic.Getfields(pFieldName)[aIndex].LocalName]]
    ENDIF  
    IF [[TopicMeta.GetField(FN).FieldKind]]='DataField' THEN
      ProcessOneDataField(FN,pOutput)
    ENDIF
  ENDDO
ENDPROCEDURE

FUNCTION ExtractData: OPEN
AUXFIELDS
  aOutput: OPEN
INSTRUCTIONS
  aOutput:= ''
  LoopDataFieldsDefinitionOrder('',aOutput)
  RESULT:= aOutput
ENDFUNCTION

PROCEDURE PopulateValues
PARAMETERS
  pParamValues: OPEN
AUXFIELDS 
 // i: INTEGER
  ap: STRING
  av: OPEN
  tmp: OPEN
  p: INTEGER
  p_sep1: INTEGER
INSTRUCTIONS
  p:= 1
  REPEAT
    tmp:= GetNextPair(pParamValues,contactdatasep(1),contactDataSep(2),p)
    IF tmp<>'' THEN
      p_sep1:= POSITION(contactdatasep(1),tmp)
      ap:= SUBSTRING(tmp,1,p_sep1-1)
      av:= SUBSTRING(tmp,p_sep1+1,LEN(tmp)-p_sep1)
      IF ap<>EMPTY THEN
        IF av<>EMPTY THEN
          uTopic.PUTVALUE(ap,av)
        ENDIF
      ENDIF    
    ENDIF
  UNTIL p<=-1
ENDPROCEDURE

PROCEDURE UpdateCaseEntry
AUXFIELDS
  iRes: INTEGER
  aExtra: STRING
  aCmdLine: OPEN
  aContactInfoGUID: STRING
INSTRUCTIONS
  IF tCase.tMainSurveyID<>EMPTY THEN
    aExtra:= AdditionalSettings(0)
    CurrentCaseGUID:= tCase.tMainSurveyID
    CurrentCaseID:= tCase.tIdentifier
    GetSurveySettings(CurrentCaseGUID)
    AddToLog('Update case entry for case '+CurrentCaseGUID+','+CurrentCaseID)
    ufLocalCases.GET(CurrentCaseGUID,CurrentCaseID)
    aContactInfoGUID:= GetContactInfoGUID(tCase.tContactInfoGUID)  
    //determine which instrument
    //use Topic definition to access it
    IF aContactInfoGUID=EMPTY THEN
      srvList.GET(SECONDARY,srvContactInfo)
    ELSE
      srvList.GET(aContactInfoGUID)
    ENDIF
    IF srvList.RESULTOK THEN
      iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
      iRes:= uTopic.OPEN(srvlist.GetSurveyDataFilename)
      uTopic.INITRECORD
      PopulateValues(ufLocalCases.CMA_ContactData)
      IF ufLocalCases.CaseNote<>EMPTY THEN
        uTopic.PUTVALUE('CaseNote',ufLocalCases.CaseNote)
      ENDIF
      uTopic.PUTVALUE('MainSurveyID',CurrentCaseGUID)
      uTopic.PUTVALUE('ID',CurrentCaseID)
      uTopic.WRITE
      uTopic.RELEASE
      aCmdLine:= '-KeyValue:\''+CurrentCaseGUID+'\',\''+CurrentCaseID+'\''+ 
                 ' -Language:'+CurrentLanguage+
                 ' -Fields:user=\''+USERNAME+'\' -AssignMode:Always'+aExtra
      AddToLog('CmdLine: "'+aCmdLine+'"')
      iRes:= srvlist.EDIT(aCmdLine)
      IF iRes<>0 THEN AddToLog('Edit result: '+STR(iRes)) ENDIF 
      aLastChange:= NowDT
      IF iRes=0 THEN
        iRes:= uTopic.OPEN(srvlist.GetSurveyDataFilename)
        uTopic.SETREADKEY(PRIMARY)
        uTopic.GETFORM(PRIMARY,CurrentCaseGUID+',\''+CurrentCaseID+'\'')
        ufLocalCases.CMA_ContactData:= ExtractData 
        ufLocalCases.ContactInfoShort:=  uTopic.GETVALUE('ContactInfoShort')
        ufLocalCases.CaseNote:= uTopic.GETVALUE('CaseNote')
        {$ifdef UseDateTimeType}
        ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(uTopic.GETVALUE('LastChangedCI.When'),cDateTimeFormat) 
        {$else}
        ufLocalCases.LastChangedCI.When:= uTopic.GETVALUE('LastChangedCI.When')
        {$endif}        
        ufLocalCases.LastChangedCI.User:= uTopic.GETVALUE('LastChangedCI.User')
        ufLocalCases.LastChangedNote.User:= uTopic.GETVALUE('LastChangedNote.User')  
        {$ifdef UseDateTimeType}
        ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(uTopic.GETVALUE('LastChangedNote.When'),cDateTimeFormat) 
        {$else}
        ufLocalCases.LastChangedNote.When:= uTopic.GETVALUE('LastChangedNote.When')  
        {$endif}        
        {$ifdef UseDateTimeType}
        ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(NowDT,cDateTimeFormat) 
        {$else}
        ufLocalCases.CMA_Process.LastChangedDT:= NowDT 
        {$endif}
        WriteLocalCaseAndFlush
        tCase.tContactInfoShort:= ufLocalCases.ContactInfoShort
        tCase.tContactData:= ufLocalCases.CMA_ContactData
        tCase.tCaseNote:= ufLocalCases.CaseNote
        FillCustomColls  //recompute custom columns in case they are depending on contact data...
        WriteTempCaseAndUpdateCache //update case in temp list
        UpdateCasesScreen
        uTopic.RELEASE
        uTopic.ERASE
        PositionOnCurrentRecord
        AddToLog('Update finished')
      ENDIF  
    ELSE
      AddToLog('Contact info model not present')  
    ENDIF
  ELSE
    DisplayOnScreen(msgNoCases,1)
  ENDIF
ENDPROCEDURE

PROCEDURE UpdateSync_msg
PARAMETERS s: STRING
INSTRUCTIONS
  IF POSITION(s,sync_msg)=0 THEN
    IF sync_msg<>'' THEN sync_msg:= sync_msg+'<BR>' ENDIF
    sync_msg:= sync_msg+s
  ENDIF  
ENDPROCEDURE

PROCEDURE InitSync_msg
INSTRUCTIONS
  sync_msg:= ''
ENDPROCEDURE

FUNCTION InstalledTopic: INTEGER
PARAMETERS
  pName: STRING
INSTRUCTIONS
  IF SystemSurvey(pName)<>1 AND 
     //srvList.SetupFileName='' AND 
     srvList.SurveyState = InstalledOnClient AND 
     LOWERCASE(srvList.ServerPark)<>CMAServerParkName AND
     LOWERCASE(srvList.ServerPark)<>LauncherServerParkName 
  THEN 
    RESULT:= 1 
  ELSE 
    RESULT:= 0 
  ENDIF
ENDFUNCTION

PROCEDURE RefreshDependenciesList
AUXFIELDS 
  srv: STRING
  index, I: INTEGER
  aCurrentSurveyGUID: STRING
INSTRUCTIONS
  aCurrentSurveyGUID:= CurrentSurveyGUID
  srvList.RESET
  tDependency.ERASE
  FOR index:= 1 TO srvList.FORMCOUNT DO
    srvList.READNEXT
    IF srvList.SurveyState=InstalledOnClient THEN
      srv:= LOWERCASE(srvList.Name)
      IF InstalledTopic(srv)=1 THEN 
        GetSurveySettingsForGUID(srvList.Id)
        tDependency.INITRECORD
        tDependency.ParentGUID:= srvList.Id  
        IF iSurveySettings.Survey_ChildrenCount<>EMPTY THEN
          FOR I:= 1 TO iSurveySettings.Survey_ChildrenCount DO
            tDependency.ChildGUID:= iSurveySettings.Survey_Children[I]
            AddToLog('Dependency: '+tDependency.ParentGUID+' <-- '+tDependency.ChildGUID)
            tDependency.DependencyType:= dtChild
            tDependency.WRITE
          ENDDO
        ENDIF  
        IF srvList.MainInstrumentId<>'' THEN //a wave
          tDependency.ParentGUID:= srvList.Id
          tDependency.ChildGUID:= srvList.MainInstrumentId
          tDependency.DependencyType:= dtWave
          AddToLog('Wave dependency: '+tDependency.ParentGUID+' --> '+tDependency.ChildGUID)
          tDependency.WRITE
        ENDIF
        IF iSurveySettings.Survey_AttemptsGUID<>'' THEN
          tDependency.ParentGUID:= srvList.Id
          tDependency.ChildGUID:= iSurveySettings.Survey_AttemptsGUID
          tDependency.DependencyType:= dtAttempt
          tDependency.WRITE
          AddToLog('Attempts dependency: '+tDependency.ParentGUID+' --> '+tDependency.ChildGUID)
        ENDIF
        IF iSurveySettings.Survey_ContactInfoGUID<>'' THEN
          tDependency.ParentGUID:= srvList.Id
          tDependency.ChildGUID:= iSurveySettings.Survey_ContactInfoGUID
          tDependency.DependencyType:= dtContact
          tDependency.WRITE
          AddToLog('ContactInfo dependency: '+tDependency.ParentGUID+' --> '+tDependency.ChildGUID)
        ENDIF
      ENDIF  
    ENDIF  
  ENDDO
  CurrentSurveySettings:= ''
  CurrentSurveyGUID:= ''
  GetSurveySettings(aCurrentSurveyGUID)
ENDPROCEDURE

FUNCTION WasInstalledByCMA: INTEGER 
PARAMETERS
  pGuid: STRING
INSTRUCTIONS
  uSurveys.OPEN
  IF uSurveys.SEARCH(pGuid) THEN
    RESULT:= 1
  ELSE  
    RESULT:= 0
  ENDIF
  uSurveys.RELEASE  
ENDFUNCTION

PROCEDURE RemoveFromSurveysList
PARAMETERS
  pGuid: STRING
INSTRUCTIONS
  uSurveys.OPEN(SetupPath+srvSurveys)
  uSurveys.GET(pGuid)
  IF uSurveys.RESULTOK THEN
    uSurveys.DELETE
  ENDIF
  uSurveys.RELEASE
ENDPROCEDURE  

PROCEDURE RemoveNotUsedSurveys
AUXFIELDS 
  Index, I: INTEGER
  res: INTEGER
  srvName: STRING
  srvGUID: STRING
  allHandled: (yes)
  srvFormCount: INTEGER
  cDeleted: INTEGER
INSTRUCTIONS
  //determine if there are surveys on the client that are no longer needed
  //if present remove them if needed
  //survey that is installed because of a depency may only be uninstalled when all possible parent surveys have no cases...
  RefreshDependenciesList
  srvList.RESET
  IF srvList.FORMCOUNT>0 THEN
    uSurveys.OPEN(SetupPath+srvSurveys)
    REPEAT
      srvList.READNEXT
      IF srvList.RESULTOK THEN
        srvGUID:= srvList.Id
        srvName:= srvList.Name
        IF WasInstalledByCMA(srvGUID)=1 THEN
          IF InstalledTopic(srvName)=1 and NOT(tDependency.SEARCH(SECONDARY,srvGUID)) THEN //Reomove is allowed...
            IF srvList.WaveName<>'' THEN srvName:= srvName+' ('+srvList.WaveName+')' ENDIF
            GetSurveySettings(srvGUID)
            ufLocalCases.SETRECORDFILTER('MainSurveyID=\''+srvGUID+'\'')  
            srvFormCount:= ufLocalCases.FORMCOUNT
            IF srvFormCount=0 THEN
              //check number of cases for each parent if applicable
              IF GetRemoveSurveyWhenNoCasesLeft=1 THEN
                res:= srvlist.REMOVESURVEY
                cDeleted:= cDeleted+1
                RemoveFromSurveysList(srvGUID)
                AddToLog('Survey '+srvName+' removed')
                UpdateSync_msg(msgSurvey+' '+srvName+' '+msgRemoved)
              ELSE
                UpdateSync_msg(msgAllCasesHandled+' '+srvName)
              ENDIF  
            ELSE
              RegisterSurvey(srvGUID) //added to handle upgrade from version without uSurveys
            ENDIF  
            ufLocalCases.SETRECORDFILTER('')
          ENDIF 
        ENDIF   
      ENDIF 
    UNTIL srvList.EOF OR NOT srvList.RESULTOK 
    uSurveys.RELEASE
    IF cDeleted>0 THEN
      AddToLog('Recursion RemoveNotUsedSurveys')
      RemoveNotUsedSurveys //to remove possible dependencies
    ENDIF  
  ENDIF
ENDPROCEDURE 

PROCEDURE RegisterSurvey
PARAMETERS pGuid: STRING
INSTRUCTIONS
  uSurveys.OPEN(SetupPath+srvSurveys)
  uSurveys.SurveyGUID:= pGuid
  uSurveys.InstallDate:= NowDT
  uSurveys.WRITE
  uSurveys.RELEASE
ENDPROCEDURE  

PROCEDURE InstallDependency
PARAMETERS
  pGUID: STRING
AUXFIELDS
  Index: INTEGER  
  res: INTEGER
INSTRUCTIONS
  srvList.GET(pGUID)
  IF srvList.RESULTOK THEN
    IF srvList.SurveyState=InstalledOnServer THEN
      res:= srvList.INSTALLSURVEY
      IF res<>0 THEN 
        AddToLog('Install dependency '+pGUID+' failed. Error: '+str(res))
        UpdateSync_msg(msgInstallOfSurvey+' '+srvList.Name+' '+msgFailed+' '+str(res))
      ELSE
        RegisterSurvey(pGUID)
        auxRefreshSurveyList:= yes
        AddToLog('Install dependency '+pGUID+' succeeded')
        IF srvList.MainInstrumentId<>'' THEN //a wave!
          AddToLog('Wave of '+ srvList.MainInstrumentId+ ', name: '+srvList.WaveName)
          RegisterSurvey(srvList.MainInstrumentId)
        ENDIF 
        UpdateSync_msg(msgInstallOfSurvey+' '+srvList.Name+' '+msgSucceeded)
      ENDIF   
    ENDIF  
  ELSE
    AddToLog('Install dependency '+pGUID+' needed but not present on server')
    UpdateSync_msg(msgInstallOfSurvey+' '+iSurveySettings.Survey_Children[Index]+' '+msgNotPresent) 
  ENDIF  
ENDPROCEDURE

PROCEDURE HandleDependencies
PARAMETERS
  pGUID: STRING
AUXFIELDS
  Index: INTEGER  
  res: INTEGER
  aGUID: string
INSTRUCTIONS
  GetSurveySettings(pGUID)
  IF iSurveySettings.Survey_ChildrenCount<>EMPTY THEN
    FOR Index:= 1 TO iSurveySettings.Survey_ChildrenCount DO
      InstallDependency(iSurveySettings.Survey_Children[Index])
    ENDDO
  ENDIF
  IF iSurveySettings.Survey_AttemptsGUID<>EMPTY THEN
    InstallDependency(iSurveySettings.Survey_AttemptsGUID)
  ENDIF    
  IF iSurveySettings.Survey_ContactInfoGUID<>EMPTY THEN
    InstallDependency(iSurveySettings.Survey_ContactInfoGUID)
  ENDIF    
  srvList.GET(pGUID)    
ENDPROCEDURE  

PROCEDURE InstallNeededSurveys
AUXFIELDS 
  Index: INTEGER
  res: INTEGER
  aGUID: STRING
  aFailedGUIDs: OPEN //should be enough...
  aHandledDependencies: OPEN //should be enough...
INSTRUCTIONS
  //first check based on the information in the downloaded date for the cases-survey
  //if additional surveys need to be installed and install them
  ufServerCases.RESET
  auxRefreshSurveyList:= EMPTY
  AddToLog('Install needed surveys. Processing #'+STR(ufServerCases.FORMCOUNT)+' cases')
  FOR Index:= 1 to ufServerCases.FORMCOUNT DO
    ufServerCases.READNEXT
    aGUID:= ufServerCases.MainSurveyID
    IF POSITION(aGUID,aFailedGUIDs)=0 THEN
      IF (aGUID<>cNullGUID) AND (aGUID<>cNull) THEN
        IF ufServerCases.CMA_InPossession='' OR UPPERCASE(ufServerCases.CMA_Location) IN ['RESTORE','RESTORE_REQ'] THEN //survey needed!
          srvList.GET(aGUID)
          IF srvList.RESULTOK THEN
            IF srvList.SurveyState=InstalledOnServer THEN
              res:= srvList.INSTALLSURVEY
              IF res<>0 THEN
                AddToLog('Install of '+aGUID+' failed. Error: '+STR(res))
                UpdateSync_msg(msgInstallOfSurvey+' '+srvList.Name+msgFailed+' '+STR(res))
                  aFailedGUIDs:= aFailedGUIDs+aGUID
              ELSE
                AddToLog('Install of '+aGUID+' succeeded')
                UpdateSync_msg(msgInstallOfSurvey+' '+srvList.Name+' '+msgSucceeded)
                IF srvList.MainInstrumentId<>'' THEN //a wave!
                  AddToLog('Wave of '+ srvList.MainInstrumentId+ ', name: '+srvList.WaveName)
                  RegisterSurvey(srvList.MainInstrumentId)
                ENDIF 
                auxRefreshSurveyList:= yes
                RegisterSurvey(aGUID)
                IF POSITION(aGUID,aHandledDependencies)=0 THEN
                  HandleDependencies(aGUID)
                  aHandledDependencies:= aHandledDependencies+aGUID
                ENDIF  
              ENDIF   
            ENDIF  
          ELSE
            AddToLog('Install of '+aGUID+' needed but not present on server')
            //UpdateSync_msg(msgInstallOfSurvey+' '+aGUID+' '+msgNotPresent) 
            aFailedGUIDs:= aFailedGUIDs+aGUID
          ENDIF  
        ENDIF  
      ENDIF
    ENDIF  
  ENDDO
  IF auxRefreshSurveyList=yes THEN
    res:= GetListOfSurveysX(0) 
  ENDIF
ENDPROCEDURE //InstallNeededSurveys

PROCEDURE UpdateSurveys
AUXFIELDS 
  Index: INTEGER
  res: INTEGER
  aGUID, aSurvey: STRING
  aFailedGUIDs, aSucceededGUIDs: OPEN
  aHandledDependencies: OPEN
  aFileName,aPath,aMeta: STRING
  dRes: INTEGER
INSTRUCTIONS
  ufLocalCases.RESET
  aFailedGUIDs:= ''
  aSucceededGUIDS:= cNullGUID
  FOR Index:= 1 to ufLocalCases.FORMCOUNT DO
    ufLocalCases.READNEXT
    aGUID:= ufLocalCases.MainSurveyID
    IF POSITION(aGUID,aFailedGUIDs)=0 AND POSITION(aGUID,aSucceededGUIDs)=0 THEN
      AddToLog('Check survey update for '+aGuid)
      srvList.GET(aGUID)
      IF srvList.RESULTOK THEN
        IF srvList.SurveyState=InstalledOnServer THEN
          res:= srvList.INSTALLSURVEY
          IF res<>0 THEN 
            AddToLog('Install of '+aGUID+' failed. Error: '+str(res))
            UpdateSync_msg(msgInstallOfSurvey+' '+srvList.Name+msgFailed+' '+str(res))
            aFailedGUIDs:= aFailedGUIDs+aGUID
          ELSE
            RegisterSurvey(aGUID)
            UpdateSync_msg(msgInstallOfSurvey+' '+srvList.Name+' '+msgSucceeded)
            AddToLog('Install of '+srvList.Name+' succeeded')
            IF srvList.MainInstrumentId<>'' THEN //a wave!
              AddToLog('Wave of '+ srvList.MainInstrumentId+ ', name: '+srvList.WaveName)
              RegisterSurvey(srvList.MainInstrumentId)
            ENDIF 
            IF POSITION(aGUID,aHandledDependencies)=0 THEN
              HandleDependencies(aGUID)
              aHandledDependencies:= aHandledDependencies+aGUID
            ENDIF  
          ENDIF   
        ELSE
          //AddToLog('Server installed '+srvList.Id+': '+DateToStr(srvlist.ServerInstallDate)+' '+TimeToStr(srvList.ServerInstallTime)) 
          IF ((srvList.InstallDate=srvList.ServerInstallDate) and (srvList.InstallTime<srvList.ServerInstallTime)) OR
             (srvList.InstallDate<srvList.ServerInstallDate) OR POSITION(aGUID+';',auxNotActiveSurveys)>0
          THEN  //refresh needed...
            res:= srvList.INSTALLSURVEY(TRUE)
            IF res<>0 THEN 
              AddToLog('Re-install '+aGUID+' failed')
              UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+msgFailed+' '+STR(res))
              aFailedGUIDs:= aFailedGUIDs+aGUID
            ELSE
              UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+' '+msgSucceeded)
              RegisterSurvey(aGUID)
            ENDIF   
          ENDIF  
          //in case it is a wave also check main survey
          IF srvList.MainInstrumentId<>'' THEN //a wave!
            srvList.GET(srvList.MainInstrumentId)
            aGUID:= srvList.MainInstrumentId
            IF ((srvList.InstallDate=srvList.ServerInstallDate) and (srvList.InstallTime<srvList.ServerInstallTime)) OR
               (srvList.InstallDate<srvList.ServerInstallDate)
            THEN  //refresh needed...
              AddToLog('Re-install '+aGUID)
              res:= srvList.INSTALLSURVEY(TRUE)
              IF res<>0 THEN 
                AddToLog('Re-install '+aGUID+' failed')
                UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+msgFailed+' '+STR(res))
                aFailedGUIDs:= aFailedGUIDs+aGUID
              ELSE
                UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+' '+msgSucceeded)
                RegisterSurvey(aGUID)
              ENDIF   
            ENDIF  
          ENDIF
        ENDIF
      ELSE
        aSurvey:= ufLocalCases.MainSurveyID
        IF ufLocalCases.SurveyDisplayName<>'' THEN aSurvey:= ExtractTextForDisplay(ufLocalCases.SurveyDisplayName) ENDIF
        UpdateSync_msg(msgInstallOfSurvey+' '+aSurvey+' '+msgNotPresent) 
        AddToLog('Install of '+aGUID+' needed but not present on server')
        aFailedGUIDs:= aFailedGUIDs+aGUID
      ENDIF 
      IF POSITION(aGUID,aFailedGUIDs)=0 THEN aSucceededGUIDs:= aSucceededGUIDs+aGUID ENDIF //it either fails or succeeds...
    ENDIF   
  ENDDO
  //now check if all registered surveys are up-to-date 
  uSurveys.OPEN(SetupPath+srvSurveys)
  FOR Index:= 1 TO uSurveys.FORMCOUNT DO
    uSurveys.READNEXT
    aGUID:= uSurveys.SurveyGUID
    srvList.GET(aGUID)
    IF srvList.RESULTOK THEN
      IF ((srvList.InstallDate=srvList.ServerInstallDate) and (srvList.InstallTime<srvList.ServerInstallTime)) OR
          (srvList.InstallDate<srvList.ServerInstallDate)
      THEN  //refresh needed...
        res:= srvList.INSTALLSURVEY(TRUE)
        IF res<>0 THEN 
          AddToLog('Re-install '+aGUID+' failed')
          UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+msgFailed+' '+STR(res))
          aFailedGUIDs:= aFailedGUIDs+aGUID
        ELSE
          UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+' '+msgSucceeded)
          uSurveys.InstallDate:= NowDT
          uSurveys.WRITE
          //check if it has a _loc. If so: update!
          aFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+'_loc'
          
          IF FILEEXISTS(aFileName+'.bdix') THEN
            aPath:= ExtractFilePath(srvList.GetSurveyDataFilename)
            aMeta:= REPLACE(ExtractFileName(srvList.GetSurveyMetaFilename),'.bmix','',IGNORE)
            dRes:= RefreshLocalDatabase(aMeta,aPath,aFileName,0) 
          ENDIF
        ENDIF   
      ENDIF 
    ENDIF
  ENDDO
  uSurveys.RELEASE
  //now check if there are dependencies that need update. Can also happen if earlier a registration failed...  
  tDependency.RESET
  FOR Index:= 1 TO tDependency.FORMCOUNT DO
    tDependency.READNEXT
    //
    aGUID:= tDependency.ChildGUID
    IF POSITION(aGUID,aFailedGUIDs)=0 THEN
      srvList.GET(aGUID)
      IF srvList.RESULTOK THEN
        IF srvList.SurveyState=InstalledOnServer THEN
          res:= srvList.INSTALLSURVEY
          IF res<>0 THEN 
            AddToLog('Install of '+aGUID+' failed. Error: '+str(res))
            UpdateSync_msg(msgInstallOfSurvey+' '+srvList.Name+msgFailed+' '+str(res))
            aFailedGUIDs:= aFailedGUIDs+aGUID
          ELSE
            RegisterSurvey(aGUID)
            UpdateSync_msg(msgInstallOfSurvey+' '+srvList.Name+' '+msgSucceeded)
            AddToLog('Install of '+srvList.Name+' succeeded')
            IF srvList.MainInstrumentId<>'' THEN //a wave!
              AddToLog('Wave of '+ srvList.MainInstrumentId+ ', name: '+srvList.WaveName)
              RegisterSurvey(srvList.MainInstrumentId)
            ENDIF 
          ENDIF  
        ELSE
          IF ((srvList.InstallDate=srvList.ServerInstallDate) and (srvList.InstallTime<srvList.ServerInstallTime)) OR
             (srvList.InstallDate<srvList.ServerInstallDate)
          THEN  //refresh needed...
            res:= srvList.INSTALLSURVEY(TRUE)
            IF res<>0 THEN 
              AddToLog('Re-install '+aGUID+' failed')
              UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+msgFailed+' '+STR(res))
              aFailedGUIDs:= aFailedGUIDs+aGUID
            ELSE
              UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+' '+msgSucceeded)
              RegisterSurvey(aGUID)
            ENDIF   
          ENDIF  
          //in case it is a wave also check main survey
          IF srvList.MainInstrumentId<>'' THEN //a wave!
            srvList.GET(srvList.MainInstrumentId)
            aGUID:= srvList.MainInstrumentId
            IF ((srvList.InstallDate=srvList.ServerInstallDate) and (srvList.InstallTime<srvList.ServerInstallTime)) OR
               (srvList.InstallDate<srvList.ServerInstallDate)
            THEN  //refresh needed...
              AddToLog('Re-install '+aGUID)
              res:= srvList.INSTALLSURVEY(TRUE)
              IF res<>0 THEN 
                AddToLog('Re-install '+aGUID+' failed')
                UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+msgFailed+' '+STR(res))
                aFailedGUIDs:= aFailedGUIDs+aGUID
              ELSE
                UpdateSync_msg(msgUpdateOfSurvey+' '+srvList.Name+' '+msgSucceeded)
                RegisterSurvey(aGUID)
              ENDIF   
            ENDIF  
          ENDIF
        ENDIF
      ELSE
        UpdateSync_msg(msgInstallOfSurvey+' '+aGUID+' '+msgNotPresent) 
        AddToLog('Install of '+aGUID+' needed but not present on server')
        aFailedGUIDs:= aFailedGUIDs+aGUID
      ENDIF 
    ENDIF  
    //
  ENDDO
  auxNotActiveSurveys:= EMPTY 
ENDPROCEDURE

FUNCTION GetListOfSurveysX: INTEGER
PARAMETERS
  pWhich: INTEGER
AUXFIELDS res, i: INTEGER  
INSTRUCTIONS
  IF pWhich=1 THEN
    res:= srvList.GETLISTOFSURVEYS(TRUE) //only on device
    IF res<>0 THEN AddToLog('Error retrieving local GETSURVEYLIST '+STR(res)) ENDIF
  ELSE
    res:= srvList.GETLISTOFSURVEYS
    IF res<>0 THEN AddToLog('Error retrieving GETSURVEYLIST '+STR(res)) ENDIF
  ENDIF
  RESULT:= res
ENDFUNCTION 

FUNCTION GetReadOnlySettingsName: STRING
AUXFIELDS Index: INTEGER
INSTRUCTIONS
  RESULT:= ''
  FOR Index:= 0 to val([[TopicMeta.DataEntrySettings.Count]])-1 DO
    IF [[TopicMeta.DataEntrySettings[Index].DataMode]] IN ['ReadOnly','ReadOnlyWithExperiments'] THEN
      RESULT:= [[TopicMeta.DataEntrySettings[Index].Name]]
    ENDIF  
  ENDDO   
ENDFUNCTION

FUNCTION DetermineDataEntrySettingsName: STRING
AUXFIELDS 
  aCmd: STRING
  p: INTEGER
  i,l: INTEGER
  tmp: STRING
INSTRUCTIONS
  l:= LEN('-DATAENTRYSETTINGS:')
  aCmd:= GetCmdLineForEdit(ufLocalCases.CMA_CmdLineForEdit)
  p:= POSITION('-DATAENTRYSETTINGS:',UPPERCASE(aCmd))
  IF p<>0 THEN 
    tmp:= SUBSTRING(aCmd,p+l,255)
    IF POSITION(' ',tmp)>0 THEN tmp:= SUBSTRING(tmp,1,POSITION(' ',tmp)-1) ENDIF
  ELSE  
    tmp:= GetDefaultdataEntrySettings
  ENDIF
  RESULT:= tmp  
ENDFUNCTION

FUNCTION GetFormAccessMode: STRING //New,Get,TryGet,Verification
AUXFIELDS 
  Index: INTEGER
  aSettings: STRING
INSTRUCTIONS
  aSettings:= DetermineDataEntrySettingsName
  IF aSettings<>'' THEN
    FOR Index:= 0 to val([[TopicMeta.DataEntrySettings.Count]])-1 DO
      IF uppercase([[TopicMeta.DataEntrySettings[Index].Name]])=uppercase(aSettings) THEN
        RESULT:= [[TopicMeta.DataEntrySettings[Index].FormAccessMode]]
      ENDIF  
  ENDDO   
  ELSE
    RESULT:= [[TopicMeta.DataEntrySettings[0].FormAccessMode]]
  ENDIF
ENDFUNCTION

PROCEDURE InitCases
PARAMETERS
  pConnected: INTEGER 
AUXFIELDS 
  Index, dRes: INTEGER
  ExitProc: INTEGER
  ii: integer
  aMetaName,aMetaNameOri: STRING
INSTRUCTIONS
//When CMA is not automatically downloaded and updated CMA will
//install the needed CMA projects: cma_launcher, cma_attempts, cma_contactinfo and cma_logging
  DisplayOnScreen(msgInitializing,3) //+' ('+STR(pConnected)+')',3)
  auxCurrentSurvey:= ''
  IF pConnected=1 THEN 
    dRes:= GetListOfSurveysX(0)
    IF dRes<>0 THEN //cancel on login or other error: populate local list
      dRes:= GetListOfSurveysX(1)
    ENDIF  
  ELSE
    dRes:= GetListOfSurveysX(1)
  ENDIF  
  //Initialize CASES survey
  IF pConnected=1 THEN
    srvList.GET(SECONDARY,srvCases)
    IF lowercase(srvList.Name)=srvCases AND srvList.SurveyState = InstalledOnServer THEN //should never happen because of automatic update of CMA server park
      dRes := srvList.INSTALLSURVEY
      IF dRes<>0 THEN 
        DisplayOnScreen(msgError1001+str(dRes) ,1) 
        ExitProc:= 1
      ELSE
        AddToLog('Install of "Cases" ready. '+ STr(srvList.SurveyState)) 
      ENDIF
    ENDIF
  ENDIF
  srvList.GET(SECONDARY,srvCases)
  IF NOT srvList.RESULTOK THEN
    DisplayOnScreen(msgError1002,1)
  ELSE  
    aCasesFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE) 
    cases_loc:= aCasesFileName+'_loc' 
    dres:= ufLocalCases.OPEN(cases_loc)
    initOK:= 1
  ENDIF
  IF ExitProc=EMPTY THEN
    IF pConnected=1 THEN
      srvList.GET(SECONDARY,srvAttempts)
      IF srvList.SurveyState = InstalledOnServer THEN //should never happen because of automatic update of CMA server park
        dRes := srvList.INSTALLSURVEY
        IF dRes<>0 THEN 
          DisplayOnScreen(msgError1003+str(dRes) ,1) 
          ExitProc:= 1
        ELSE  
          AddToLog('Install of "Attempts" ready. '+ STr(srvList.SurveyState)) 
        ENDIF
      ENDIF
    ENDIF  
    srvList.GET(SECONDARY,srvAttempts)
    IF NOT srvList.RESULTOK THEN
      DisplayOnScreen(msgError1004,1)
    ELSE  
      CurrentAttemptsGUID:= srvList.ID
      DefaultCMA_AttemptsGUID:= srvList.ID //GUID of default Attempts survey shipped with CMA
      aAttemptsFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE) 
      attempts_loc:= aAttemptsFileName+'_loc'
      dres:= Attempts.LOADDATAMODEL(srvList.GetSurveyMetaFilename) 
      dres:= ufLocalAttempts.OPEN(attempts_loc)
      aMetaName:= srvList.GetSurveyMetaFilename
      aMetaNameOri:= ExtractFilePath(aMetaName)+'ori_'+ExtractFileName(aMetaName)
      IF NOT FileExists(aMetaNameOri) THEN
        dRes:= COPYFILE(aMetaName,aMetaNameOri)
      ENDIF
      initOK:= 2
    ENDIF
  ENDIF  
  IF ExitProc=EMPTY THEN
    IF pConnected=1 THEN
      srvList.GET(SECONDARY,srvContactInfo)
      IF srvList.SurveyState = InstalledOnServer THEN
        dRes := srvList.INSTALLSURVEY
        IF dRes<>0 THEN 
          DisplayOnScreen(msgError1006+str(dRes) ,1) 
          ExitProc:= 1
        ELSE  
          AddToLog('Install of "ContactInfo" ready. '+ STr(srvList.SurveyState)) 
        ENDIF
      ENDIF
    ENDIF  
    srvList.GET(SECONDARY,srvAttempts)
    IF NOT srvList.RESULTOK THEN
      DisplayOnScreen(msgError1007,1)
    ENDIF
  ENDIF  
  IF ExitProc=EMPTY THEN
    //Initialize MONITORING survey if present
    IF pConnected=1 THEN
      srvList.GET(SECONDARY,srvLogging)
      IF srvList.SurveyState = InstalledOnServer THEN
        dRes := srvList.INSTALLSURVEY
      ENDIF
    ENDIF     
  ENDIF  
  IF ExitProc=EMPTY THEN
    //Initialize CLIENTINFO survey if present
    IF pConnected=1 THEN
      srvList.GET(SECONDARY,srvClientInfo)
      IF srvList.SurveyState = InstalledOnServer THEN
        dRes := srvList.INSTALLSURVEY
      ENDIF
    ENDIF     
  ENDIF 
  auxWhatSurveyToShow:= DetermineIndexOf(SelectedSurveyAtStart)
  SelectedSurvey:= SelectedSurveyAtStart
  CLEARDISPLAY
ENDPROCEDURE

PROCEDURE HandleCustomFilterChange
AUXFIELDS 
  x,y,z:integer
INSTRUCTIONS
  z:= ORD(auxCustomFilter)
  IF z=0 THEN //show all cases again...
    auxCustomFilterValue:= ''
  ELSE
    //show subset of current cases
    auxCustomFilterValue:= CustomFV[z] 
  ENDIF
  AddToLog('Handle custom filter change: '+auxCustomFilterValue)
  x:= ORD(auxWhatSurveyToShow)
  IF x>0 THEN
    SelectedSurvey:= srvID[x]   
  ELSE
    SelectedSurvey:= ''   
  ENDIF   
  y:= ORD(auxWhatCasesToShow)
  ClearFilter
  UpdateTemporaryCasesFile(y,srvID[x])  
  ComputePortraitHeader
ENDPROCEDURE

PROCEDURE SearchButtonClick
INSTRUCTIONS
  auxConfirmedFilter:= auxFilter
  HandleChange  
ENDPROCEDURE

PROCEDURE SurveyListChange
INSTRUCTIONS
  HandleChange  
ENDPROCEDURE

PROCEDURE TimerHandleChange
INSTRUCTIONS
  HandleChange  
ENDPROCEDURE

PROCEDURE ClearFilterButtonClick
INSTRUCTIONS
  ClearFilter
  HandleChange  
ENDPROCEDURE

PROCEDURE WhatCasesToShowClick
PARAMETERS
  pWhichCases: INTEGER //pvAll=0, pvNoncompleted=1, pvCompleted=2
  pWhichSurvey: STRING //EMPTY = All surveys
INSTRUCTIONS
  AddToLog('WhatCasesToShow: '+STR(pWhichCases)+' '+pWhichSurvey)
  UpdateTemporaryCasesFile(pWhichCases,pWhichSurvey)
  ComputePortraitHeader
ENDPROCEDURE

PROCEDURE ComputePortraitHeader
AUXFIELDS
  x,y: INTEGER
  aSurvey: STRING
INSTRUCTIONS
  x:= ORD(auxWhatSurveyToShow)
  y:= ORD(auxWhatCasesToShow)
  auxDataGridHeaderPortrait:= EMPTY
  IF x>=1 THEN 
    auxDataGridHeaderPortrait:= srvNames[x]
  ELSE  
    auxDataGridHeaderPortrait:= txtAll
  ENDIF   
  CASE y OF
  1: auxDataGridHeaderPortrait:= auxDataGridHeaderPortrait+', '+txtNonCompleted
  2: auxDataGridHeaderPortrait:= auxDataGridHeaderPortrait+', '+txtCompleted
  ENDCASE
  IF auxCustomFilterValue<>EMPTY THEN
    auxDataGridHeaderPortrait:= auxDataGridHeaderPortrait+', "'+auxCustomFilterValue+'"'
  ENDIF  
ENDPROCEDURE

PROCEDURE HandleChange
AUXFIELDS
  x,y: INTEGER
  aSurvey: STRING
INSTRUCTIONS
  AddToLog('Handle change...')
  IF auxParentChildView=yes THEN 
    UpdateTemporaryCasesFile(3,'*')
  ELSE
    x:= ORD(auxWhatSurveyToShow)
    aSurvey:= SelectedSurvey
    IF x>0 THEN
      SelectedSurvey:= srvID[x]   
    ELSE
      SelectedSurvey:= ''   
    ENDIF   
    y:= ORD(auxWhatCasesToShow)
    IF aSurvey<>SelectedSurvey THEN
      IF auxHasCustomFilter=yes THEN
        auxCustomFilterValue:= ''
        ClearFilter
      ENDIF  
    ENDIF
    UpdateTemporaryCasesFile(y,srvID[x])  
    ComputePortraitHeader
  ENDIF  
ENDPROCEDURE

PROCEDURE FillSurveyNamesArray
AUXFIELDS 
  res,Index: INTEGER
  srvName: STRING
  srvGUID: STRING
INSTRUCTIONS
  res := GetListOfSurveysX(1) //installed on machine
  FOR Index:= 0 to cMaxSurveys do srvNames[Index]:= '' srvID[Index]:= '' ENDDO
  srvID[0]:= '*'
  srvNamesCount:= 0
  CurrentSurveySettings:= ''
  CurrentSurveyGUID:= ''
  srvList.SETREADKEY(Secondary)
  srvList.RESET
  FOR Index:= 1 to srvList.FORMCOUNT DO
    srvList.READNEXT
    ufLocalCases.SETRECORDFILTER('MainSurveyID=\''+srvList.Id+'\' AND ((CMA_GroupType IS NULL) OR (CMA_GroupType=1))')
    IF ufLocalCases.RECORDCOUNT>0 THEN
      srvName:= LOWERCASE(srvList.Name)
      srvGUID:= srvList.ID
      tDependency.GET(SECONDARY,srvGUID)
      IF InstalledTopic(srvName)=1 AND //a real survey...
         (NOT(tDependency.RESULTOK) OR tDependency.DependencyType=dtWave) 
      THEN
        srvNamesCount:= srvNamesCount+1
        srvID[srvNamesCount]:= srvList.ID
      ENDIF
    ENDIF  
  ENDDO
  srvList.SETREADKEY(PRIMARY)
  FOR Index:= 1 TO srvNamesCount DO
    GetSurveySettings(srvID[Index])
    srvNames[Index]:= DetermineSurveyName('')
  ENDDO
  ufLocalCases.SETRECORDFILTER('')
ENDPROCEDURE

FUNCTION DetermineIndexOf: INTEGER
PARAMETERS pGUID: STRING
AUXFIELDS
  Index: INTEGER
INSTRUCTIONS
  RESULT:= 0
  FOR Index:= 1 TO cMaxSurveys DO 
    IF srvID[Index]=pGUID THEN 
      RESULT:= Index 
      EXITFOR
    ENDIF
  ENDDO
ENDFUNCTION

FUNCTION DeleteCaseData: INTEGER
PARAMETERS
  pGUID: STRING
  pToDelete: OPEN //;-separated strings of key values
  pToDeleteCount: INTEGER
AUXFIELDS
  dRes, I: INTEGER
  filterStr: OPEN
  aID: STRING
INSTRUCTIONS
  dRes:= 0
  IF pGUID<>'' AND pToDelete<>'' THEN
    srvList.GET(pGUID) //pGUID has to be present!!! 
    IF srvList.RESULTOK THEN
      IF srvList.SetupFilename=EMPTY THEN 
        dRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
        dRes:= uTopic.OPEN(srvlist.GetSurveyDataFilename)
        //split pToDownLoad in element and compose download filter
        filterStr:= ''
        FOR i:= 1 to pToDeleteCount DO
          IF i<>1 THEN filterStr:= filterStr+' OR ' ENDIF
          filterStr:= filterStr + '('+ 
          MakePrimaryKeyFilter(
            VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]]),
            GetPrimaryKeyNames([[TopicMeta]]),
            GetEntry(pToDelete,i,';'))
          +')' 
        ENDDO
        dRes:= uTopic.DELETERECORDS(filterStr)
        uTopic.RELEASE
      ENDIF  
      //also delete attempts for these and the case
      IF dRes>=0 THEN
        FOR i:= 1 to pToDeleteCount DO
          aID:= GetEntry(pToDelete,i,';')
          dRes:= srvList.DELETESESSIONDATA(aID) 
          IF ufLocalcases.MainSurveyID<>pGuid OR ufLocalCases.ID<>aID THEN
            ufLocalcases.GET(pGuid,aID)
          ENDIF
          ufLocalCases.DELETE
          ufLocalAttempts.SETRECORDFILTER('MainSurveyID=\''+pGuid+'\' AND ID=\''+aID+'\'')           
          ufLocalAttempts.RESET
          FOR I:= 1 TO ufLocalAttempts.FORMCOUNT DO
            ufLocalAttempts.READNEXT
            ufLocalAttempts.DELETE
          ENDDO  
          ufLocalAttempts.SETRECORDFILTER('')
        ENDDO
      ENDIF
    ELSE
      dRes:= -99
    ENDIF
  ENDIF
  RESULT:= dRes
ENDFUNCTION

FUNCTION UploadCaseData: INTEGER
PARAMETERS
  pGUID: STRING
  pToUpLoad: OPEN //;-separated strings of key values
  pToUpLoadCount: INTEGER
AUXFIELDS
  dRes, I: INTEGER
  filterStr: OPEN
INSTRUCTIONS
  IF pGUID<>'' AND pToUpLoad<>'' THEN
    srvList.GET(pGUID) //pGUID has to be present!!! 
    IF srvList.SetupFilename=EMPTY THEN 
      IF srvList.RESULTOK AND srvList.ServerInstallDate<>EMPTY AND srvList.ServerInstallDate<>ToDate(1,1,1) AND srvList.SurveyState=InstalledOnClient THEN
        dRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
        //split pToDownLoad in element and compose download filter
        filterStr:= ''
        FOR i:= 1 to pToUpLoadCount DO
          IF i<>1 THEN filterStr:= filterStr+' OR ' ENDIF
          filterStr:= filterStr + '('+ 
          MakePrimaryKeyFilter(
            VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]]),
            GetPrimaryKeyNames([[TopicMeta]]),
            GetEntry(pToUpLoad,i,';'))
          +')' 
        ENDDO
        AddToLog('Upload filter for '+pGUID+' = '+filterStr)
        dRes:= srvList.UPLOADDATA(filterStr)
      ELSE
        dRes:= -99
      ENDIF
    ENDIF
  ENDIF  
  RESULT:= dRes
ENDFUNCTION

FUNCTION DownloadCaseData: INTEGER
PARAMETERS
  pGUID: STRING
  pToDownload: OPEN //;-separated strings of key values
  pToDownLoadCount: INTEGER
AUXFIELDS
  dRes, I: INTEGER
  filterStr: OPEN
INSTRUCTIONS
  dRes:= 0
  IF pGUID<>'' AND pToDownload<>'' THEN
    srvList.GET(pGUID) //pGUID has to be present!!! 
    IF srvList.SetupFilename=EMPTY THEN 
      IF srvList.RESULTOK THEN
        dRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
        //split pToDownLoad in element and compose download filter
        filterStr:= ''
        FOR i:= 1 to pToDownLoadCount DO
          IF i<>1 THEN filterStr:= filterStr+' OR ' ENDIF
          filterStr:= filterStr + '('+ 
          MakePrimaryKeyFilter(
            VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]]),
            GetPrimaryKeyNames([[TopicMeta]]),
            GetEntry(pToDownload,i,';'))
          +')' 
        ENDDO
        tTopic.ERASE
{$IFDEF 5_10}      
        dRes:= srvList.DOWNLOADDATA(filterStr,TRUE)
{$ELSE}      
        dRes:= srvList.DOWNLOADDATA(tTopic,filterStr{,TRUE})
{$ENDIF}      
      ELSE
        AddToLog('Cannot download case data for '+pGuid+' because survey is not installed.')
        dRes:= -99
      ENDIF  
    ENDIF  
  ENDIF  
  RESULT:= dRes
ENDFUNCTION

PROCEDURE RegisterDownloadCheckNeeded
PARAMETERS
  pGUID: STRING
  pToDownload: OPEN //;-separated strings of key values
  pToDownLoadCount: INTEGER
  pOrigin: INTEGER
AUXFIELDS
  aOK: (yes),EMPTY  
INSTRUCTIONS  
  IF pToDownLoadCount>0 THEN
    IF pGuid<> tToHandleD.SurveyGUID THEN
      tToHandleD.GET(pGuid)
      IF tToHandleD.RESULTOK THEN aOK:= yes ENDIF
    ELSE
      aOK:= yes
    ENDIF
    IF aOK=yes THEN  
      tToHandleD.IDs:= tToHandleD.IDs+';'+pToDownload
      tToHandleD.IDsCount:= tToHandleD.IDsCount+pToDownLoadCount
    ELSE
      tToHandleD.INITRECORD
      tToHandleD.SurveyGUID:= pGUID
      tToHandleD.IDs:= pToDownload
      tToHandleD.IDsCount:= pToDownLoadCount
    ENDIF
    tToHandleD.WRITE
    AddToLog('To download-'+str(pOrigin)+': '+ pGUID+' '+pToDownload)    
  ENDIF  
ENDPROCEDURE

PROCEDURE RegisterDeleteCheckNeeded
PARAMETERS
  pGUID: STRING
  pToDelete: OPEN //;-separated strings of key values
  pToDeleteCount: INTEGER
AUXFIELDS
  aOK: (yes),EMPTY  
INSTRUCTIONS  
  IF pToDeleteCount>0 THEN
    IF pGuid<> tToHandleR.SurveyGUID THEN
      tToHandleR.GET(pGuid)
      IF tToHandleR.RESULTOK THEN aOK:= yes ENDIF
    ELSE
      aOK:= yes
    ENDIF
    IF aOK=yes THEN    
      tToHandleR.IDs:= tToHandleR.IDs+';'+pToDelete
      tToHandleR.IDsCount:= tToHandleR.IDsCount+pToDeleteCount
    ELSE
      tToHandleR.INITRECORD
      tToHandleR.SurveyGUID:= pGUID
      tToHandleR.IDs:= pToDelete
      tToHandleR.IDsCount:= pToDeleteCount
    ENDIF
    tToHandleR.WRITE
    AddToLog('To delete: '+ pGUID+' '+pToDelete)    
  ENDIF  
ENDPROCEDURE

PROCEDURE RegisterUploadCheckNeeded
PARAMETERS
  pGUID: STRING
  pToUpLoad: OPEN //;-separated strings of key values
  pToUpLoadCount: INTEGER
AUXFIELDS
  aOK: (yes),EMPTY  
INSTRUCTIONS
  IF pToUpLoadCount>0 THEN  
    IF pGuid<> tToHandleU.SurveyGUID THEN
      tToHandleU.GET(pGuid)
      IF tToHandleU.RESULTOK THEN aOK:= yes ENDIF
    ELSE
      aOk:= yes
    ENDIF    
    IF aOK=yes THEN
      tToHandleU.IDs:= tToHandleU.IDs+';'+pToUpLoad
      tToHandleU.IDsCount:= tToHandleU.IDsCount+pToUpLoadCount
    ELSE
      tToHandleU.INITRECORD
      tToHandleU.SurveyGUID:= pGUID
      tToHandleU.IDs:= pToUpLoad
      tToHandleU.IDsCount:= pToUpLoadCount
    ENDIF
    tToHandleU.WRITE
    AddToLog('To upload: '+ pGUID+' '+pToUpLoad)
  ENDIF  
ENDPROCEDURE

FUNCTION HandleAdditionalDownloads:INTEGER
AUXFIELDS 
  Index: INTEGER
  dRes,iRes: INTEGER
  NrHandled: INTEGER
  RetryCount: INTEGER
INSTRUCTIONS
  tToHandleD.RESET
  dRes:= 0
  IF tToHandleD.FORMCOUNT>0 THEN AddToLog('Starting Downloads. #Surveys to handle: '+STR(tToHandleD.FORMCOUNT)) ENDIF
  FOR Index:= 1 to tToHandleD.FORMCOUNT DO
    RetryCount:= 0
    tToHandleD.READNEXT
    IF tToHandleD.Handled=EMPTY THEN //check if survey has been installed.
      srvList.GET(tToHandleD.SurveyGUID)
      IF srvList.RESULTOK AND srvList.SurveyState=InstalledOnClient THEN
        IF srvList.SetupFilename=EMPTY THEN
          dRes:= DownloadCaseData(tToHandleD.SurveyGUID,tToHandleD.IDs,tToHandleD.IDsCount)
          IF dRes=-2 THEN //try again
            REPEAT
              RetryCount:= RetryCount+1
              AddToLog('Download of case data retry. Retry:'+STR(RetryCount))
              DELAY(cRetryDelay)
              dRes:= DownloadCaseData(tToHandleD.SurveyGUID,tToHandleD.IDs,tToHandleD.IDsCount)
            UNTIL dRes>=0 OR RetryCount=cMaxRetryDownload 
          ENDIF  
          IF dRes>=0 THEN
            tToHandleD.Handled:= yes
            tToHandleD.WRITE
            NrHandled:= NrHandled+1
            IF dRes>0 THEN
              AddToLog('Download of case data succeeded for '+tToHandleD.SurveyGUID+'. Count:'+STR(dRes)+' of possible '+STR(tToHandleD.IDsCount))
  {$IFNDEF 5_10}
              iRes:= uTopic.OPEN(srvlist.GetSurveyDataFilename)
              tTopic.RESET
              REPEAT
                tTopic.READNEXT
                AddToLog('Downloaded case: '+tTopic.KEYUNFORMATTED)
                uTopic:= tTopic
                uTopic.WRITE
                WriteSyncTraceTopicDown(tToHandleD.SurveyGUID,tTopic.KEYUNFORMATTED)
              UNTIL tTopic.LASTRECORD
              uTopic.RELEASE
  {$ENDIF}            
            ELSE  
              AddToLog('Nothing to download for '+tToHandleD.SurveyGUID+'. #Potential cases: '+STR(tToHandleD.IDsCount))
            ENDIF  
          ELSE  
            AddToLog('Download of case data failed for '+tToHandleD.SurveyGUID+'. Error:'+STR(dRes))
          ENDIF  
        ELSE
          tToHandleD.Handled:= yes
          tToHandleD.WRITE
          NrHandled:= NrHandled+1
        ENDIF  
      ENDIF
    ELSE
      NrHandled:= NrHandled+1
    ENDIF  
  ENDDO
  IF NrHandled=tToHandleD.FORMCOUNT THEN 
    IF tToHandleD.FORMCOUNT>0 THEN AddToLog('All downloads handled') ENDIF
    tToHandleD.ERASE 
    tToHandleD.INITRECORD
    RESULT:= 0
  ELSE
    RESULT:= -1  
  ENDIF
ENDFUNCTION

FUNCTION HandleAdditionalDeletes: INTEGER
AUXFIELDS 
  Index: INTEGER
  dRes: INTEGER
  NrHandled: INTEGER
INSTRUCTIONS
  tToHandleR.RESET
  dRes:= 0
  IF tToHandleR.FORMCOUNT>0 THEN AddToLog('Starting DELETES. #Surveys to handle: '+STR(tToHandleR.FORMCOUNT)) ENDIF
  FOR Index:= 1 to tToHandleR.FORMCOUNT DO
    tToHandleR.READNEXT
    IF tToHandleR.Handled=EMPTY THEN 
      srvList.GET(tToHandleR.SurveyGUID)
      IF srvList.RESULTOK AND srvList.SurveyState=InstalledOnClient THEN
        dRes:= DeleteCaseData(tToHandleR.SurveyGUID,tToHandleR.IDs,tToHandleR.IDsCount)    
        IF dRes>=0 THEN
          tToHandleR.Handled:= yes
          tToHandleR.WRITE
          NrHandled:= NrHandled+1
          IF dRes>0 THEN
            AddToLog('Delete of case data succeeded for '+tToHandleR.SurveyGUID+'. Count:'+STR(dRes))
          ENDIF  
        ELSE  
          AddToLog('Delete of case data failed for '+tToHandleR.SurveyGUID+'. Error:'+STR(dRes))
        ENDIF  
      ENDIF  
    ELSE
      NrHandled:= NrHandled+1
    ENDIF  
  ENDDO
  IF NrHandled=tToHandleR.FORMCOUNT THEN 
    IF tToHandleR.FORMCOUNT>0 THEN AddToLog('All deletes handled') ENDIF    
    tToHandleR.ERASE
    tToHandleR.INITRECORD 
    RESULT:= 0
  ELSE
    RESULT:= -1  
  ENDIF
ENDFUNCTION

FUNCTION HandleAdditionalUploads: INTEGER
AUXFIELDS 
  Index, I: INTEGER
  dRes: INTEGER
  NrHandled: INTEGER
  aKey: string
INSTRUCTIONS
  dRes:= 0
  tToHandleU.RESET
  IF tToHandleU.FORMCOUNT>0 THEN AddToLog('Starting upload. #Surveys to handle: '+STR(tToHandleU.FORMCOUNT)) ENDIF
  FOR Index:= 1 to tToHandleU.FORMCOUNT DO
    tToHandleU.READNEXT
    IF tToHandleU.Handled=EMPTY THEN
      srvList.GET(tToHandleU.SurveyGUID)
      IF srvList.RESULTOK AND srvList.SurveyState=InstalledOnClient THEN //= installed on server and client so an upload is okay
        IF srvList.SetupFilename=EMPTY THEN
          dRes:= UploadCaseData(tToHandleU.SurveyGUID,tToHandleU.IDs,tToHandleU.IDsCount)    
          IF dRes>=0 THEN
            tToHandleU.Handled:= yes
            tToHandleU.WRITE
            NrHandled:= NrHandled+1
            IF dRes>0 THEN
              AddToLog('Upload of case data succeeded for '+tToHandleU.SurveyGUID+'. Count:'+STR(dRes)+' of '+STR(tToHandleU.IDsCount))
              FOR i:= 1 TO tToHandleU.IDsCount DO
                aKey:= GetEntry(tToHandleU.IDs,i,';')
                WriteSyncTraceTopicUp(tToHandleU.SurveyGUID,aKey,yes)
              ENDDO
            ELSE  
              AddToLog('Nothing to upload for '+tToHandleU.SurveyGUID+'. #Potential cases: '+STR(tToHandleU.IDsCount))
            ENDIF  
          ELSE  
            AddToLog('Upload of case data failed for '+tToHandleU.SurveyGUID+'. Error:'+STR(dRes))
            //register this in de case...
            FOR i:= 1 TO tToHandleU.IDsCount DO
              aKey:= GetEntry(tToHandleU.IDs,i,';')
              ufServerCases.GET(tToHandleU.SurveyGUID,aKey)
              ufServerCases.CMA_Data.SurveyUploadFailed:= yes
              ufServerCases_Write(cTraceFailed)
              WriteSyncTraceTopicUp(tToHandleU.SurveyGUID,aKey,no)
            ENDDO
          ENDIF
        ELSE
          tToHandleU.Handled:= yes
          tToHandleU.WRITE
          NrHandled:= NrHandled+1
        ENDIF    
      ELSE
        FOR i:= 1 TO tToHandleU.IDsCount DO
          aKey:= GetEntry(tToHandleU.IDs,i,';')
          ufServerCases.GET(tToHandleU.SurveyGUID,aKey)
          ufServerCases.CMA_Data.SurveyUploadFailed:= yes
          ufServerCases_Write(cTraceMissing)
          WriteSyncTraceTopicUp(tToHandleU.SurveyGUID,aKey,no)
        ENDDO
      ENDIF 
    ELSE
      NrHandled:= NrHandled+1
    ENDIF   
  ENDDO
  IF NrHandled=tToHandleU.FORMCOUNT THEN 
    IF tToHandleU.FORMCOUNT>0 THEN AddToLog('All uploads handled') ENDIF
    tToHandleU.ERASE
    tToHandleU.INITRECORD
    RESULT:= 0
  ELSE
    RESULT:= -1  
  ENDIF
ENDFUNCTION

FUNCTION ReleaseCase: INTEGER //local actions only
PARAMETERS
  pCaseGUID: STRING
  pCaseID: STRING
  pAction: STRING
AUXFIELDS
  aRes: INTEGER  
  aNow: STRING
  aError: INTEGER
  I: INTEGER
INSTRUCTIONS
  IF ufLocalcases.MainSurveyID<>pCaseGUID OR ufLocalCases.ID<>pCaseID THEN
    ufLocalCases.GET(pCaseGUID,pCaseID)
  ENDIF  
  IF ufLocalCases.RESULTOK THEN
    aRes:= DeleteCaseData(pCaseGUID,pCaseID+';',1)
    ufServerCases:= ufLocalCases //content of local case is uploaded...
    IF UFLocalCases.IORESULTCODE<>0 THEN   
      AddToLog('Delete of case failed with resultcode='+STR(ufLocalCases.IORESULTCODE))
      aError:= aError+1 
    ENDIF
    IF aError=0 THEN
      ufServerCases.CMA_InPossession:= ''
      IF iSettings.sKeepForWhomOnRelease=EMPTY THEN
        ufServerCases.CMA_ForWhom:= ''
      ENDIF
      ufServerCases.CMA_Location:='RELEASED'
    ELSE  
      UFServerCases.CMA_Location:='RELEASE_FAILED'
    ENDIF  
    aNow:=  TIMETOSTR(SYSTIME,cDateTimeFormat)
    {$IFDEF UseDateTimeType} 
    ufServerCases.CMA_Process.LastUploaded.When:= STRTODATETIME(aNow,cDateTimeFormat)
    {$ELSE}
    ufServerCases.CMA_Process.LastUploaded.When:= aNow
    {$ENDIF}
    ufServerCases.CMA_Process.LastUploaded.User:= USERNAME
    ufServerCases_Write(cTraceConfirmed)
    IF aError=0 THEN
      AddToLog('Case RELEASE okay. GUID='+pCaseGuid+' ID='+pCaseID+' ACTION='+pAction)
    ELSE
      AddToLog('Case RELEASE failed. GUID='+pCaseGuid+' ID='+pCaseID+' ACTION='+pAction)
    ENDIF  
    RESULT:= aError
  ELSE
    AddToLog('Case RELEASE failed because not present on device. GUID='+pCaseGuid+' ID='+pCaseID+' ACTION='+pAction)
    UFServerCases.CMA_Location:='RELEASE_FAILED'
    ufServerCases_Write(cTraceError)
    RESULT:= -1
  ENDIF  
ENDFUNCTION

PROCEDURE RegisterUpload
PARAMETERS
  AlsoInLocalCase: (no(0),yes)
AUXFIELDS
  aNow: STRING
INSTRUCTIONS
  aNow:=  TIMETOSTR(SYSTIME,cDateTimeFormat)
  IF ufServerCases.CMA_Process.FirstUploaded.When=EMPTY THEN
    {$IFDEF UseDateTimeType} 
    ufServerCases.CMA_Process.FirstUploaded.When:= STRTODATETIME(aNow,cDateTimeFormat)
    {$ELSE}
    ufServerCases.CMA_Process.FirstUploaded.When:= aNow
    {$ENDIF}     
    ufServerCases.CMA_Process.FirstUploaded.User:= USERNAME
  ENDIF  
  {$IFDEF UseDateTimeType} 
  ufServerCases.CMA_Process.LastUploaded.When:= STRTODATETIME(aNow,cDateTimeFormat)
  {$ELSE}
  ufServerCases.CMA_Process.LastUploaded.When:= aNow
  {$ENDIF}     
  ufServerCases.CMA_Process.LastUploaded.User:= USERNAME
  IF AlsoInLocalCase=yes THEN
    ufLocalCases.CMA_Process.FirstUploaded:= ufServerCases.CMA_Process.FirstUploaded //block assignment
    ufLocalCases.CMA_Process.LastUploaded:= ufServerCases.CMA_Process.LastUploaded //block assignment
  ENDIF  
ENDPROCEDURE

PROCEDURE AddAttemptsForUpload
PARAMETERS 
  pCaseGuid: STRING
  pCaseID: STRING
AUXFIELDS
  i: INTEGER
  aInList: 0..1
INSTRUCTIONS
  GetSurveySettings(ufLocalCases.MainSurveyID)
  SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(ufLocalCases.CMA_AttemptsGUID))
  aInList:= 0
  FOR i:= 1 TO AttemptsUploadC DO
    IF AttemptsUploadA[i]=CurrentAttemptsGUID THEN aInList:= 1 ENDIF
  ENDDO
  IF aInList=0 THEN
    AttemptsUploadC:= AttemptsUploadC+1
    AttemptsUploadA[AttemptsUploadC]:= CurrentAttemptsGUID   
    ufServerAttempts.OPEN(aAttemptsFileName) //assume nothing is left in this database
    ufServerAttempts.ERASE 
    ufServerAttempts.RELEASE
  ENDIF
  ufServerAttempts.OPEN(aAttemptsFileName)
  ufLocalAttempts.SETRECORDFILTER('MainSurveyID=\''+pCaseGUID+'\' AND ID=\''+pCaseID+'\'')
  ufLocalAttempts.RESET
  FOR I:= 1 TO ufLocalAttempts.FORMCOUNT DO
    ufLocalAttempts.READNEXT
    ufServerAttempts:= ufLocalAttempts
    ufServerAttempts.WRITE
  ENDDO
  ufServerAttempts.RELEASE
  ufLocalAttempts.SETRECORDFILTER('')
ENDPROCEDURE

FUNCTION HandleAttemptsUpload: INTEGER
AUXFIELDS
  dRes: INTEGER
  i: INTEGER
  ResOk: INTEGER
  ResNotOK: INTEGER
INSTRUCTIONS
  for I:= 1 TO AttemptsUploadC do
     SwitchAttemptsSurveyIfNeeded(AttemptsUploadA[i])
     ufServerAttempts.OPEN(aAttemptsFileName)
     IF ufServerAttempts.FORMCOUNT>0 THEN
      ufServerAttempts.RELEASE
      srvList.GET(CurrentAttemptsGUID)
      AddToLog(CurrentAttemptsGUID+' '+ToString(srvList.RESULTOK))
      dRes:= srvList.UPLOADDATA
      IF dRes>=0 THEN //should always be more than 0...
        AddToLog('Attempts upload succeeded for '+AttemptsUploadA[i]+'. Count:'+STR(dRes))
      ELSE
        AddToLog('Attempts upload failed for '+AttemptsUploadA[i]+'. Error:'+STR(dRes))
      ENDIF  
    ELSE
      ufServerAttempts.RELEASE
      AddToLog('No atttempts to upload for '+AttemptsUploadA[i])
    ENDIF
    IF dRes>=0 THEN
      ufServerAttempts.ERASE 
      ufServerAttempts.RELEASE
      ResOk:= ResOk+1 
    ELSE
      ResNotOK:= ResNotOK+1   
    ENDIF
  ENDDO    
  IF ResNoTOK>0 THEN RESULT:= -1 ELSE RESULT:= 0 ENDIF
ENDFUNCTION

PROCEDURE UpdateUploadTimesInCases
INSTRUCTIONS
//process all cases in ufServerCases, read the correcsponding case in ufLocalCases and update
  ufServerCases.OPEN(aCasesFileName) //assume the nothing is left in this database
  ufServerCases.RESET
  REPEAT
    ufServerCases.READNEXT
    IF NOT (ufServerCases.CMA_Location IN ['RELEASED','TRANSFER_OK']) THEN
      ufLocalCases.GET(ufServerCases.MainSurveyID,ufServerCases.ID) 
      IF ufLocalCases.RESULTOK THEN //should always be the case...
        IF ufServerCases.CMA_Process.FirstUploaded<>EMPTY THEN
          ufLocalCases.CMA_Process.FirstUploaded:= ufServerCases.CMA_Process.FirstUploaded //block assignment
        ENDIF  
       IF ufServerCases.CMA_Process.LastUploaded<>EMPTY THEN
           ufLocalCases.CMA_Process.LastUploaded:= ufServerCases.CMA_Process.LastUploaded //block assignment
        ENDIF  
        WriteLocalCaseAndFlush
      ENDIF
    ENDIF  
  UNTIL ufServerCases.LASTRECORD
  ufServerCases.RELEASE
ENDPROCEDURE

FUNCTION HandleCasesUpload: INTEGER
PARAMETERS
  pNeeded: (yes,no)
AUXFIELDS
  dRes: INTEGER
INSTRUCTIONS
  dRes:= 0
  ufServerCases.RELEASE
  IF pNeeded=yes THEN
    srvList.GET(SECONDARY,srvCases)
    dRes:= srvList.UPLOADDATA
    IF dRes>=0 THEN
      IF dRes>0 THEN
        AddToLog('Cases upload succeeded. Count:'+STR(dRes))
        UpdateUploadTimesInCases
      ENDIF  
    ELSE
      AddToLog('Cases upload failed. Error:'+STR(dRes))
    ENDIF
  ELSE
    AddToLog('Cases upload not needed')
  ENDIF    
  IF dRes>=0 THEN
    RESULT:= 0
  ELSE
    RESULT:= -1  
  ENDIF  
ENDFUNCTION

FUNCTION ChangeSlashesIfNeeded: OPEN
PARAMETERS
  pName: OPEN
INSTRUCTIONS
  IF auxIsNonWindows=yes THEN
    RESULT:= REPLACE(pName,'\\','/')
  ELSE  
    RESULT:= pName
  ENDIF  
ENDFUNCTION


FUNCTION HandleInstructionIfPresent: INTEGER
AUXFIELDS 
  i, index, dRes: INTEGER
  aLoc: STRING
  aGUID, aID: STRING
  aGroupID: STRING
  aFile: STRING
  aSurveyList: OPEN
  aParentFolder: STRING
  aCMD: STRING
  files2zip: OPEN
  afolder: STRING
INSTRUCTIONS
  RESULT:= 0
  ufServerCases.SETRECORDFILTER('mainsurveyid=\''+cNullGUID+'\' OR mainsurveyid=\''+cNull+'\'')
  IF ufServerCases.FORMCOUNT>0 THEN
    FOR i:= 1 TO ufServerCases.FORMCOUNT DO 
      ufServerCases.READNEXT
      aLoc:= UPPERCASE(ufServerCases.CMA_Location)
      AddToLog('Instruction located: '+aLoc)
      WriteSyncTraceDown
      CASE aLoc OF //to be extended in the future with new instructions
      'RELEASE_ALL':
        //RemoveAllData
        ufLocalCases.RESET
        FOR index:= 1 TO ufLocalCases.FORMCOUNT DO
          ufLocalCases.READNEXT
          GetSurveySettings(ufLocalCases.MainSurveyID)
          SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(ufLocalCases.CMA_AttemptsGUID))
          dRes:= DeleteCaseData(ufLocalCases.MainSurveyID,ufLocalCases.ID+';',1)
          AddToLog('Delete case data '+ufLocalCases.MainSurveyID+'-'+ufLocalCases.ID+': '+str(dRes))
        ENDDO
        ufServerCases.CMA_Location:= 'RELEASE_DONE'
        ufServerCases_Write(cTraceConfirmed)
        RESULT:= 1 //upload needed
      'RELEASE_SOME':
         //info on to release cases is in CMA_CustomUse. surveyguid;id pairs
         //to do: also handle all other case with same cma_groupid
         Index:= 1
         REPEAT
           aGroupID:= EMPTY
           aGUID:= GetEntry(ufServerCases.CMA_CustomUse,Index,';')
           index:= index+1
           aID:= GetEntry(ufServerCases.CMA_CustomUse,Index,';')
           index:= index+1
           IF aGUID<>EMPTY AND aID<>EMPTY THEN
             ufLocalCases.GET(aGUID,aID)
             IF ufLocalCases.RESULTOK THEN
               IF ufLocalCases.CMA_GroupType=gParent THEN 
                 aGroupID:= ufLocalCases.CMA_GroupID
               ENDIF  
               GetSurveySettings(aGUID)
               SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(ufLocalCases.CMA_AttemptsGUID))
               dRes:= DeleteCaseData(aGUID,aID+';',1)
               AddToLog('Delete case data '+aGUID+'-'+aID+': '+str(dRes))
             ENDIF     
           ENDIF
           IF aGroupID<>EMPTY THEN
             ufLocalCases.SETRECORDFILTER('CMA_GroupID=\''+aGroupID+'\'')
             FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
               ufLocalCases.READNEXT
               GetSurveySettings(ufLocalCases.MainSurveyID)
               SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(ufLocalCases.CMA_AttemptsGUID))
               aGUID:= ufLocalCases.MainSurveyID
               aID:= ufLocalCases.ID
               dRes:= DeleteCaseData(aGUID,aID+';',1)
               AddToLog('Delete case data '+aGUID+'-'+aID+': '+str(dRes))
             ENDDO
             ufLocalCases.SETRECORDFILTER('')
           ENDIF
         UNTIL aGUID=EMPTY OR aID=EMPTY  
         ufServerCases.CMA_Location:= 'RELEASE_DONE'
         ufServerCases_Write(cTraceConfirmed)
         RESULT:= 1 //upload needed
      'RELEASE_SURVEYS':
         //info on to release surveys is in CMA_CustomUse. surveyguid;surveyguid;...
         Index:= 1
         REPEAT
           aGroupID:= EMPTY
           aGUID:= GetEntry(ufServerCases.CMA_CustomUse,Index,';')
           index:= index+1
           IF aGUID<>EMPTY THEN
             ufLocalCases.SETRECORDFILTER('mainsurveyid=\''+aGUID+'\'')
             GetSurveySettings(aGUID)
             IF ufLocalCases.FORMCOUNT>0 THEN
               REPEAT
                 ufLocalCases.READNEXT
                 SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(ufLocalCases.CMA_AttemptsGUID))
                 dRes:= DeleteCaseData(aGUID,ufLocalCases.ID+';',1)
                 AddToLog('Delete case data '+aGUID+'-'+ufLocalCases.ID+': '+str(dRes))
               UNTIL ufLocalCases.LASTRECORD     
             ENDIF  
             srvList.GET(aGUID)
             IF srvList.RESULTOK THEN
               AddToLog('Survey removed: '+aGUID)
               RemoveFromSurveysList(aGUID)
               dRes:= srvList.REMOVESURVEY
             ENDIF  
           ENDIF
         UNTIL aGUID=EMPTY  
         ufServerCases.CMA_Location:= 'RELEASE_DONE'
         ufServerCases_Write(cTraceConfirmed) 
         //Refresh overall surveylist...
         dRes:= GetListOfSurveysX(0)
         RESULT:= 1 //upload needed
      'RELEASE_ORPHANS':
         //find handled cases that do not have a survey installed anymore and remove them
         ufLocalCases.SETRECORDFILTER('CMA_CaseClosed=1')
         srvlist.RESET
         FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
           ufLocalCases.READNEXT
           srvList.GET(ufLocalCases.MainSurveyID)
           IF NOT srvList.RESULTOK OR 
              srvList.ServerInstallDate=EMPTY OR 
              srvList.ServerInstallDate=ToDate(1,1,1) 
           THEN //=not installed on server!!! is still installed localy...
             IF POSITION(ufLocalCases.MainSurveyID,aSurveyList)=0 THEN aSurveyList:= aSurveyList+ufLocalCases.MainSurveyID+';' ENDIF
             SwitchAttemptsSurveyIfNeeded(ufLocalCases.CMA_AttemptsGUID)
             ufLocalCases.DELETE
             ufLocalAttempts.SETRECORDFILTER('MainSurveyID=\''+ufLocalCases.MainSurveyID+'\' AND ID=\''+ufLocalCases.ID+'\'') 
             ufLocalAttempts.RESET
             FOR I:= 1 TO ufLocalAttempts.FORMCOUNT DO
               ufLocalAttempts.READNEXT
               ufLocalAttempts.DELETE
             ENDDO  
             ufLocalAttempts.SETRECORDFILTER('')
             AddToLog('Delete case data '+ufLocalCases.MainSurveyID+'-'+ufLocalCases.ID+': '+str(dRes))
           ENDIF    
         ENDDO
         IF aSurveyList<>EMPTY THEN
           //Get local surveylist...
           dRes:= GetListOfSurveysX(1)
           REPEAT
             srvList.READNEXT
             IF POSITION(srvList.Id+';',aSurveyList)>0 THEN 
               //If all case have been removed...
               ufLocalCases.SETRECORDFILTER('MainSurveyID=\''+srvList.Id+'\'')
               IF ufLocalCases.FORMCOUNT=0 THEN
                 AddToLog('Orphan survey removed: '+srvList.Id)
                 RemoveFromSurveysList(srvList.Id) 
                 dRes:= srvList.REMOVESURVEY 
               ELSE
                 FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
                   ufLocalCases.READNEXT
                   AddToLog('Non-completed Orphan case present: '+ufLocalCases.MainSurveyID+' - '+ufLocalCases.ID)
                 ENDDO  
               ENDIF  
             ENDIF
           UNTIL srvList.LASTRECORD or NOT srvList.RESULTOK   
           //Restore overall surveylist...
           dRes:= GetListOfSurveysX(0)
         ENDIF
         //now remove surveys that are not on server anymore but are still on client 
         ufServerCases.CMA_Location:= 'RELEASE_DONE'
         ufServerCases_Write(cTraceConfirmed) 
         RESULT:= 1 //upload needed      
       'GET_FILES':
         aParentFolder:= SUBSTRING(SetupPath,1,LEN(SetupPath)-4)
         index:= 0
         files2zip:= EMPTY
         afolder:= ExtractFilePath(aParentFolder+GetEntry(ufServerCases.CMA_CustomUse,1,';'))
         afolder:= substring(afolder,1,len(afolder)-1)
         REPEAT  
           index:= index+1
           aFile:= GetEntry(ufServerCases.CMA_CustomUse,index,';')
           IF aFile<>'' THEN files2Zip:= files2zip+' '+ExtractFileName(aParentFolder+aFile) ENDIF
         UNTIL afile=''
         IF files2zip<>'' THEN
           aCMD:= '"'+SetupPath+cmaGetFiles+'" -w:"'
                  +afolder
                  +'" -p -r '+files2zip
           dRes:= ZIPFILES(aCMD)
           AddToLog('getfiles.zip cmd: '+str(dRes)+' '+aCmd)
           IF dRes>0 THEN
             dRes:= ufServerCases.CMA_Data.Survey.LOADFROMDISK(SetupPath+cmaGetFiles)
             dRes:= DELETEFILE(SetupPath+cmaGetFiles)
             ufServerCases_Write(cTraceConfirmed)
           ELSE  
             ufServerCases_Write(cTraceError) 
           ENDIF
         ELSE
           ufServerCases_Write(cTraceError) 
         ENDIF    
         ufServerCases.CMA_Location:= 'HANDLED'
         RESULT:= 1 //upload needed 
       'PUT_FILES':
         afolder:= GetEntry(ufServerCases.CMA_CustomUse,1,';')
         IF ufServerCases.CMA_Data.Survey<>EMPTY THEN
           dRes:= ufServerCases.CMA_Data.Survey.SAVETODISK(SetupPath+cmaPutFiles)
           IF dRes=0 THEN
             IF GetEntry(ufServerCases.CMA_CustomUse,2,';')='REMOVE' THEN
               ufServerCases.CMA_Data.Survey:= EMPTY
             ENDIF  
             ufServerCases_Write(cTraceConfirmed)
             dRes:= UNZIPFILES('"'+setuppath+cmaPutFiles+'" -U:False -D:"'+SUBSTRING(SetupPath,1,LEN(SetupPath)-3)+aFolder+'"')
             dRes:= DELETEFILE(SetupPath+cmaPutFiles)
           ELSE
             ufServerCases_Write(cTraceError) 
           ENDIF  
         ELSE  
           ufServerCases_Write(cTraceError) 
         ENDIF  
         ufServerCases.CMA_Location:= 'HANDLED'
         RESULT:= 1 //upload needed      
       'DELETE_FILE':
         aParentFolder:= SUBSTRING(SetupPath,1,LEN(SetupPath)-4)
         aFile:= GetEntry(ufServerCases.CMA_CustomUse,1,';')
         dRes:= DELETEFILE(ChangeSlashesIfNeeded(aParentFolder+aFile))
         IF dRes=0 THEN
           ufServerCases_Write(cTraceConfirmed)
         ELSE
           ufServerCases_Write(cTraceError) 
         ENDIF  
         ufServerCases.CMA_Location:= 'HANDLED'
         RESULT:= 1 //upload needed      
       'LIST_FILES':
         aParentFolder:= SUBSTRING(SetupPath,1,LEN(SetupPath)-4)
         ufServerCases.CMA_CustomUse:= GETFILENAMES(aParentFolder,'*',true)
         ufServerCases_Write(cTraceConfirmed)
         ufServerCases.CMA_Location:= 'HANDLED'
         RESULT:= 1 //upload needed      
      ENDCASE
    ENDDO
  ENDIF 
  ufServerCases.SETRECORDFILTER('')
ENDFUNCTION

PROCEDURE HandleGroupStatusUpdates
PARAMETERS
  pGroupIDs: OPEN
  pCount: INTEGER
AUXFIELDS
  Index: INTEGER  
  aGroupID: STRING
INSTRUCTIONS
  IF pCount>0 THEN
    FOR Index:= 1 TO pCount DO
      aGroupID:= GetEntry(pGroupIDs,Index,cTab)
      DetermineGroupStatus(aGroupID,1)
    ENDDO
  ENDIF
ENDPROCEDURE

PROCEDURE RegisterUpdateOfGroupStatus
PARAMETERS
  pGroupID: STRING
  TRANSIT pToUpdate: OPEN
  TRANSIT pToUpdateCount: INTEGER
INSTRUCTIONS
  IF pGroupID<>'' AND POSITION(pGroupID,pToUpdate)=0 THEN
    //requires groupstatus update if child or parent... based on groupid
    pToUpdate:= pToUpdate+pGroupID+cTab
    pToUpdateCount:= pToUpdateCount+1
  ENDIF
ENDPROCEDURE

PROCEDURE HandleGroupTransfer
PARAMETERS
  pGroupToHandle: OPEN
  pGroupToHandleCount: INTEGER
AUXFIELDS
  aNewUser: STRING
  aGroupID: STRING
  Index, I: INTEGER  
INSTRUCTIONS
  FOR Index:= 1 TO pGroupToHandleCount DO
    aGroupID:= GetEntry(pGroupToHandle,Index,cTab)
    ufServerCases.SETRECORDFILTER('CMA_GroupID=\''+aGroupID+'\'')
    ufServerCases.READNEXT
    aNewUser:= ufServerCases.CMA_ForWhom
    ufServerCases.SETRECORDFILTER('')
    ufLocalCases.SETRECORDFILTER('CMA_GroupID=\''+aGroupID+'\'')
    FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
      ufLocalCases.READNEXT
      IF ufLocalCases.CMA_GroupType=gChild THEN
        ufServerCases:= ufLocalCases
        IF ufLocalCases.CMA_Process.LastInterviewEndTime<>EMPTY THEN
          RegisterUploadCheckNeeded(ufServerCases.MainSurveyID,ufServerCases.ID,1) 
        ENDIF  
        RegisterDeleteCheckNeeded(ufServerCases.MainSurveyID,ufServerCases.ID,1)        
        ufServerCases.CMA_InPossession:= ''
        ufServerCases.CMA_Location:='TRANSFER_OK'
        ufServerCases.CMA_ForWhom:= aNewUser
        ufServerCases_Write(cTraceConfirmed)      
      ENDIF
    ENDDO
    ufLocalCases.SETRECORDFILTER('')
  ENDDO  
ENDPROCEDURE  

PROCEDURE HandleGroupRelease
PARAMETERS
  pGroupToHandle: OPEN
  pGroupToHandleCount: INTEGER
AUXFIELDS
  aGroupID: STRING
  Index, I, dRes: INTEGER  
INSTRUCTIONS
  FOR Index:= 1 TO pGroupToHandleCount DO
    aGroupID:= GetEntry(pGroupToHandle,Index,cTab)
    ufLocalCases.SETRECORDFILTER('CMA_GroupID=\''+aGroupID+'\'')
    FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
      ufLocalCases.READNEXT
      IF ufLocalCases.CMA_GroupType=gChild THEN
        dRes:= ReleaseCase(ufLocalCases.MainSurveyID,ufLocalCases.ID,'RELEASE_REQ_PARENT')      
      ENDIF
    ENDDO
    ufLocalCases.SETRECORDFILTER('')
  ENDDO  
ENDPROCEDURE  

PROCEDURE HandleGroupClose
PARAMETERS
  pGroupToHandle: OPEN
  pGroupToHandleCount: INTEGER
AUXFIELDS
  aGroupID: STRING
  Index, I: INTEGER  
INSTRUCTIONS
  FOR Index:= 1 TO pGroupToHandleCount DO
    aGroupID:= GetEntry(pGroupToHandle,Index,cTab)
    ufLocalCases.SETRECORDFILTER('CMA_GroupID=\''+aGroupID+'\'')
    FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
      ufLocalCases.READNEXT
      IF ufLocalCases.CMA_GroupType=gChild THEN
        ufServerCases:= ufLocalCases
        ufLocalCases.CMA_CaseClosed:= yes
        ufLocalCases.CMA_Status:= 'Closed'
        WriteLocalCaseAndFlush
        ufServerCases.CMA_Location:= 'CLIENT'
        ufServerCases.CMA_Status:= 'Closed'
        ufServerCases_Write(cTraceConfirmed)
        AddToLog('CLOSE_REQ handled for child '+ufLocalCases.MainSurveyID+' '+ufLocalCases.ID)
      ENDIF
    ENDDO
    ufLocalCases.SETRECORDFILTER('')
  ENDDO  
ENDPROCEDURE  

PROCEDURE HandleGroupReopen
PARAMETERS
  pGroupToHandle: OPEN
  pGroupToHandleCount: INTEGER
AUXFIELDS
  aGroupID: STRING
  Index, I: INTEGER  
INSTRUCTIONS
  FOR Index:= 1 TO pGroupToHandleCount DO
    aGroupID:= GetEntry(pGroupToHandle,Index,cTab)
    ufServerCases.SETRECORDFILTER('CMA_GroupID=\''+aGroupID+'\'')
    ufServerCases.READNEXT
    ufServerCases.SETRECORDFILTER('')
    ufLocalCases.SETRECORDFILTER('CMA_GroupID=\''+aGroupID+'\'')
    FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
      ufLocalCases.READNEXT
      IF ufLocalCases.CMA_GroupType=gChild THEN
        ufServerCases:= ufLocalCases
        ufServerCases.CMA_CaseClosed:= EMPTY
        ufServerCases.CMA_Location:= 'CLIENT'
        ufServerCases.CMA_Status:= 'Reopened' 
        ufServerCases_Write(cTraceConfirmed)
        ufLocalCases.CMA_CaseClosed:= EMPTY
        ufLocalCases.CMA_Status:= 'Reopened'
        WriteLocalCaseAndFlush
        AddToLog('REOPEN_REQ handled for child '+ufLocalCases.MainSurveyID+' '+ufLocalCases.ID)        
      ENDIF
    ENDDO
    ufLocalCases.SETRECORDFILTER('')
  ENDDO  
ENDPROCEDURE  

PROCEDURE CheckForMissingSurveyData
AUXFIELDS
  Index, I, iRes: INTEGER  
  aGUID: STRING
  aKeyCount: INTEGER
INSTRUCTIONS
  IF iSettings.sCheckForMissingTopicData=yes THEN
    uSurveys.OPEN(SetupPath+srvSurveys)
    FOR Index:= 1 TO uSurveys.FORMCOUNT DO
      uSurveys.READNEXT
      aGUID:= uSurveys.SurveyGUID
      srvList.GET(aGUID)
      IF srvList.SetupFilename=EMPTY THEN
        GetSurveySettings(uSurveys.SurveyGUID)
        IF GetCheckServerForCase=1 {1=yes} THEN
          ufLocalCases.SETRECORDFILTER('MainSurveyID=\''+aGUID+'\' AND CMA_Data.Survey IS NULL') //no data collected...
          IF ufLocalCases.FORMCOUNT>0 THEN
            iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
            aKeyCount:= VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]])
            iRes:= uTopic.OPEN(srvlist.GetSurveyDataFilename)
            FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
              ufLocalCases.READNEXT
              uTopic.GETFORM(primary,ufLocalCases.ID)
              IF NOT uTopic.RESULTOK then //case not present
                  RegisterDownloadCheckNeeded(aGuid,ufLocalCases.ID,1,1) 
              ENDIF
            ENDDO  
            uTopic.RELEASE
          ENDIF  
          ufLocalCases.SETRECORDFILTER('') 
        ENDIF
      ENDIF  
    ENDDO  
    uSurveys.RELEASE
  ENDIF  
ENDPROCEDURE

PROCEDURE RefreshSurveyData
AUXFIELDS
  Index, I, iRes: INTEGER  
  aGUID: STRING
  aKeyCount: INTEGER
INSTRUCTIONS
  IF iSettings.sRefreshTopicData=yes THEN
    uSurveys.OPEN(SetupPath+srvSurveys)
    FOR Index:= 1 TO uSurveys.FORMCOUNT DO
      uSurveys.READNEXT
      aGUID:= uSurveys.SurveyGUID
      srvList.GET(aGUID)
      IF srvList.SetupFilename=EMPTY THEN
        GetSurveySettings(uSurveys.SurveyGUID)
        IF GetRefreshCaseDuringSync=1 {1=yes} THEN
          ufLocalCases.SETRECORDFILTER('MainSurveyID=\''+aGUID+'\' AND CMA_Data.Survey IS NULL') //no data collected...
          IF ufLocalCases.FORMCOUNT>0 THEN
            iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
            aKeyCount:= VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]])
            iRes:= uTopic.OPEN(srvlist.GetSurveyDataFilename)
            FOR i:= 1 TO ufLocalCases.FORMCOUNT DO
              ufLocalCases.READNEXT
                RegisterDownloadCheckNeeded(aGuid,ufLocalCases.ID,1,2) 
            ENDDO  
            uTopic.RELEASE
          ENDIF  
          ufLocalCases.SETRECORDFILTER('') 
        ENDIF
      ENDIF  
    ENDDO  
    uSurveys.RELEASE
  ENDIF  
ENDPROCEDURE

FUNCTION MakeLauncherFilter: OPEN
AUXFIELDS
  Index, dRes: INTEGER
  aStr: OPEN
  tmp: STRING
INSTRUCTIONS
  RESULT:= '' 
{$IFDEF MultiDevice}
  IF iSettings.sUseDeviceType=yes THEN
    srvList.GET(SECONDARY,srvClientInfo)
    IF srvList.SurveyState=InstalledOnClient THEN
      dRes:= srvList.DELETEDATA
      //now download all surveys specific for device type
      tmp:= '(ForWhichClient=\''+DeviceType+'\')'
      dRes:= srvList.DOWNLOADDATA(tmp)
      IF dRes>0 THEN
        dRes:= iClientInfo.OPEN(REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE))
        FOR Index:= 1 TO iClientInfo.FORMCOUNT DO
          iClientInfo.READNEXT
          IF Index>1 THEN aStr:= aStr+ ' OR ' ENDIF
          aStr:= aStr+'MainSurveyID=\''+iClientInfo.MainSurveyID+'\''
        ENDDO
        RESULT:= '('+aStr+')'
        iClientInfo.RELEASE
      ELSE //no specific surveys mentioned for this device then exclude all surveys mentioned in database
        tmp:= '(ForWhichClient <> \''+DeviceType+'\')'
        dRes:= srvList.DOWNLOADDATA(tmp)
        IF dRes>0 THEN
          dRes:= iClientInfo.OPEN(REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE))
          FOR Index:= 1 TO iClientInfo.FORMCOUNT DO
            iClientInfo.READNEXT
            IF Index>1 THEN aStr:= aStr+ ',' ENDIF
            aStr:= aStr+'\''+iClientInfo.MainSurveyID+'\''
          ENDDO
          RESULT:= 'MainSurveyID NOT IN ('+aStr+')'
          iClientInfo.RELEASE
        ENDIF  
      ENDIF
      AddToLog('Launcher filter: '+RESULT)
    ENDIF
  ENDIF  
{$ENDIF}
ENDFUNCTION

PROCEDURE UpdateSurveysDuringSync
PARAMETERS
  pGUID: STRING
INSTRUCTIONS
  IF POSITION(pGUID+';',SurveysDuringSync)=0 THEN SurveysDuringSync:= SurveysDuringSync+pGUID+';' ENDIF  
ENDPROCEDURE

PROCEDURE WriteSyncTraceFileToDisk
AUXFIELDS 
  res, Index: INTEGER
INSTRUCTIONS
  IF iSettings.sWriteSyncTraceFile=yes THEN
    res:= oSyncTrace.OPEN(SetupPath+cmaSyncTrace)
    tSyncTrace.RESET
    FOR Index:= 1 TO tSyncTrace.FORMCOUNT DO
      tSyncTrace.READNEXT
      oSyncTrace:= tSyncTrace
      oSyncTrace.WRITE
    ENDDO
    oSyncTrace.RELEASE
    IF iSettings.sPreserveSyncTracefileOnClient=yes THEN
      res:= osyncTrace.OPEN(SetupPath+cmaSyncTraceAll,APPEND)
      tSyncTrace.RESET
      FOR Index:= 1 TO tSyncTrace.FORMCOUNT DO
        tSyncTrace.READNEXT
        oSyncTrace:= tSyncTrace
        oSyncTrace.WRITE
      ENDDO
      oSyncTrace.RELEASE
    ENDIF
  ENDIF
  tSyncTrace.ERASE
  tSyncTrace.INITRECORD
ENDPROCEDURE

PROCEDURE WriteSyncTraceDown
INSTRUCTIONS
  tSyncTrace.INITRECORD
  tSyncTrace:= ufServerCases
  tSyncTrace.CMA_ForWhomD:= ufServerCases.CMA_ForWhom
  tSyncTrace.CMA_InPossessionD:= ufServerCases.CMA_InPossession
  tSyncTrace.CMA_LocationD:= ufServerCases.CMA_Location
  tSyncTrace.TimeStamp:= NowDTMS
  tSyncTrace.WRITE
  UpdateSurveysDuringSync(tSyncTrace.MainSurveyID)
ENDPROCEDURE

PROCEDURE WriteSyncTraceTopicDown
PARAMETERS
   pGUID: STRING
   pID: STRING
INSTRUCTIONS
  tSyncTrace.GET(pGUID,pID)
  tSyncTrace.TopicDownloaded:= yes
  tSyncTrace.WRITE
  UpdateSurveysDuringSync(tSyncTrace.MainSurveyID)
ENDPROCEDURE  

PROCEDURE WriteSyncTraceTopicUp
PARAMETERS
   pGUID: STRING
   pID: STRING
   pUploaded: (yes,no)
INSTRUCTIONS
  tSyncTrace.GET(pGUID,pID)
  tSyncTrace.TopicUploaded:= ord(pUploaded)
  tSyncTrace.WRITE
  UpdateSurveysDuringSync(tSyncTrace.MainSurveyID)
ENDPROCEDURE  

PROCEDURE WriteSyncTraceUp
PARAMETERS
  pReason: STRING
INSTRUCTIONS
  tSyncTrace.GET(ufServerCases.MainSurveyID,ufServerCases.ID)
  IF NOT tSyncTrace.RESULTOK THEN
    tSyncTrace:= ufServerCases
    tSyncTrace.TimeStamp:= NowDTMS
  ENDIF  
  tSyncTrace.CMA_ForWhomU:= ufServerCases.CMA_ForWhom
  tSyncTrace.CMA_InPossessionU:= ufServerCases.CMA_InPossession
  tSyncTrace.CMA_LocationU:= ufServerCases.CMA_Location
  tSyncTrace.ReasonU:= pReason
  tSyncTrace.WRITE
  UpdateSurveysDuringSync(tSyncTrace.MainSurveyID)
ENDPROCEDURE

PROCEDURE ufServerCases_Write
PARAMETERS
  pReason: STRING
INSTRUCTIONS
  ufServerCases.WRITE
  WriteSyncTraceUp(pReason)  
ENDPROCEDURE  

PROCEDURE RegisterUploadFailedInTrace
AUXFIELDS Index: INTEGER
INSTRUCTIONS
  tSyncTrace.RESET
  FOR Index:= 1 TO tSyncTrace.FORMCOUNT DO
    tSyncTrace.READNEXT
    tSyncTrace.CaseUploadFailed:= yes
  tSyncTrace.WRITE
  ENDDO
ENDPROCEDURE      
  
PROCEDURE Sync 
PARAMETERS pInitial: INTEGER
AUXFIELDS
  dRes, rRes, index, I: INTEGER
  NewC, DelC, ComC, BckC, ResC, RelC, ReoC, ClsC: INTEGER
  UploadNeeded: (yes,no),EMPTY
  aNow: STRING
  aCaseGUID, aCaseID: STRING
  ToUpdate: OPEN
  ToUpdateCount: INTEGER
  aLastUploaded: STRING
  aKeyFilter: STRING
  aRestoreRequested: (yes), EMPTY
  aNewUser: STRING
  SurveysEncountered: OPEN
  GroupTransferToHandle: OPEN //store group-id to handle of child surveys
  GroupTransferToHandleCount: INTEGER //store group-id to handle of child surveys
  GroupReleaseToHandle: OPEN //store group-id to handle of child surveys
  GroupReleaseToHandleCount: INTEGER //store group-id to handle of child surveys
  GroupCloseToHandle: OPEN //store group-id to handle of child surveys
  GroupCloseToHandleCount: INTEGER //store group-id to handle of child surveys
  GroupReopenToHandle: OPEN //store group-id to handle of child surveys
  GroupReopenToHandleCount: INTEGER //store group-id to handle of child surveys
  aUploadFailed: (yes),EMPTY
  aLocation: STRING
  aCasePresent: (yes),EMPTY
  aSurveyPresent: (yes),EMPTY
  aLauncherFilter: OPEN
  LauncherInactive: (yes),EMPTY
INSTRUCTIONS
  IF IsConnected=1 THEN
    IF initOK=EMPTY THEN
      InitCases(1)
    ELSE
      IF srvList.USERISAUTHENTICATED THEN
        DisplayOnScreen(msgInitializing,3)
      ENDIF
      dRes:= GetListOfSurveysX(0)
    ENDIF
    srvList.GET(SECONDARY,srvCases)
    IF [[srvList.datamodel.FieldExists('IsActive')]]='True' THEN
      IF srvList.GETVALUE('IsActive',UF)='1' THEN LauncherInactive:=yes ENDIF
    ELSE
      IF srvList.StartCondition<>EMPTY THEN
        //Display(srvList.StartCondition,wait)
        LauncherInactive:=yes 
      ENDIF  
    ENDIF
    IF dRes <> 0 THEN // GetListOfSurveysX failed
      DisplayOnScreen(msgUnexpectedSyncError, 1)
    ELSE
       IF srvList.USERISAUTHENTICATED AND (initOK=2) AND (LauncherInactive=EMPTY) THEN
         AddToLog('Network Connectivity: '+NETWORKCONNECTIVITYTYPE)
         DisplayOnScreen(msgSyncing,3)
         InitSync_msg
         NewC:= 0
         DelC:= 0
         ComC:= 0
         BckC:= 0
         RelC:= 0
         ClsC:= 0
         SurveysWithoutSettings:= EMPTY
         SurveysDuringSync:= EMPTY
         UploadNeeded:= EMPTY
         tToHandleD.ERASE tToHandleD.INITRECORD
         tToHandleU.ERASE tToHandleU.INITRECORD
         tToHandleR.ERASE tToHandleR.INITRECORD
         
         //Clean up cases database on client. It is just for temporary usage
         ufServerCases.OPEN(aCasesFileName) 
         ufServerCases.ERASE //to make sure it is empty before the down/up load
         ufServerCases.RELEASE 
         tCaseCache.ERASE 
         tCase.ERASE
         AttemptsUploadC:= 0
         AttemptsUploadA:= EMPTY
         aLauncherFilter:= MakeLauncherFilter
         //Download cases from server. Download interceptor is used of the cases-survey that filters what is needed
         srvList.GET(SECONDARY,srvCases)
         dRes := srvList.DOWNLOADDATA(aLauncherFilter)
         ufServerCases.OPEN(aCasesFileName) //assume the nothing is left in this database
         //check if it is a special instruction with 'null guid'
         //00000000-0000-0000-0000-000000000000. If so: act on it. 
         AddToLog('Number of cases downloaded: '+STR(dRes))
         IF dRes>0 THEN //process the result of Downloaddata
           IF HandleInstructionIfPresent=1 THEN UploadNeeded:= yes ENDIF
           InstallNeededSurveys
           //now process the cases
           ufServerCases.RESET
           FOR Index:= 1 to ufServerCases.FORMCOUNT DO
             ufServerCases.READNEXT
             ufLocalcases:= ufServerCases
             IF ufServerCases.MainSurveyID<>cNullGUID AND ufServerCases.MainSurveyID<>cNull THEN
               WriteSyncTraceDown
               aRestoreRequested:= EMPTY
               aCasePresent:= EMPTY
               aCaseGUID:= ufServerCases.MainSurveyID
               aCaseID:= ufServerCases.ID
               srvList.Get(aCaseGUID)
               aSurveyPresent:= EMPTY
               IF srvList.RESULTOK AND srvList.ServerInstallDate<>EMPTY AND srvList.ServerInstallDate<>ToDate(1,1,1) AND srvList.SurveyState=InstalledOnClient
               THEN 
                 aSurveyPresent:= yes 
               ENDIF
               IF aSurveyPresent=yes THEN
                 IF (ufServerCases.CMA_InPossession='' OR  UPPERCASE(ufServerCases.CMA_Location) IN ['RESTORE','RESTORE_REQ']) THEN //download the case
                   IF UPPERCASE(ufServerCases.CMA_Location) IN ['RESTORE','RESTORE_REQ'] THEN 
                     ResC:= ResC+1
                     aRestoreRequested:= yes
                     AddToLog('Restore requested for case: '+ufServerCases.MainSurveyID+','+ufServerCases.ID)
                   ELSE
                     IF ufServerCases.CMA_GroupType=EMPTY OR ufServerCases.CMA_GroupType=gParent THEN NewC:= NewC+1 ENDIF //a true new case
                   ENDIF
                   //now check if case is already present on client...
                   IF ufLocalCases.SEARCH(ufServerCases.MainSurveyID,ufServerCases.ID) THEN 
                     ufLocalCases.READ
                     aCasePresent:= yes
                     AddToLog('Case already present: '+ufServerCases.MainSurveyID+' '+ufServerCases.ID)
                   ELSE   
                     RestoreAttemptsFromCase
                   ENDIF
                   IF aCasePresent=EMPTY OR (aCasePresent=yes AND ufLocalCases.CMA_Data.Survey=EMPTY) THEN
                     IF srvList.SetupFilename=EMPTY THEN
                       RegisterDownloadCheckNeeded(aCaseGuid,aCaseID,1,3)
                     ENDIF     
                   ENDIF 
                   //end
                   ufServerCases.CMA_InPossession:= USERNAME
                   ufLocalCases.CMA_InPossession:= USERNAME
                   IF ufServerCases.CMA_GroupID=EMPTY THEN
                     ufServerCases.CMA_GroupID:= aCaseGUID+aCaseID
                     ufLocalCases.CMA_GroupID:= ufServerCases.CMA_GroupID             
                   ENDIF
                   aLocation:= 'CLIENT'
                   IF UPPERCASE(ufServerCases.CMA_Location) IN ['RESTORE','RESTORE_REQ'] THEN
                     IF ufServerCases.CMA_CaseClosed=yes AND ufServerCases.CMA_Status<>'Closed' AND 
                        ufServerCases.CMA_Process.LastUploaded.When>ufServerCases.CMA_Process.LastChangedDT
                     THEN    
                       aLocation:= 'SERVER'
                     ENDIF  
                   ENDIF  
                   IF aCasePresent=yes THEN
                     //best to do is copy local case back to server...
                     ufServerCases:= ufLocalCases
                   ENDIF  
                   ufServerCases.CMA_Location:= aLocation
                   IF aCasePresent=yes THEN
                     ufServerCases_Write(cTracePresent)
                   ELSE
                     ufServerCases_Write(cTraceConfirmed)
                   ENDIF  
                   UploadNeeded:= Yes
                   IF aCasePresent=EMPTY THEN 
                     ufLocalCases.CMA_Location:= 'CLIENT'
                     WriteLocalCaseAndFlush 
                   ENDIF 
                 ELSEIF LOWERCASE(ufServerCases.CMA_InPossession)=LOWERCASE(USERNAME) AND 
                        LOWERCASE(ufServerCases.CMA_ForWhom)<>LOWERCASE(USERNAME) AND 
                        UPPERCASE(ufServerCases.CMA_Location)='TRANSFER_REQ' 
                 THEN //give this case up
                   IF ufLocalCases.CMA_Process.LastInterviewEndTime<>EMPTY THEN
                     RegisterUploadCheckNeeded(aCaseGuid,aCaseID,1) 
                   ENDIF  
                   RegisterDeleteCheckNeeded(aCaseGuid,aCaseID,1)        
                   aNewUser:= ufServerCases.CMA_ForWhom
                   ufLocalCases.GET(aCaseGuid,aCaseID)
                   ufServerCases:= ufLocalCases
                   ufServerCases.CMA_InPossession:= ''
                   ufServerCases.CMA_Location:='TRANSFER_OK'
                   ufServerCases.CMA_ForWhom:= aNewUser
                   RegisterUpload(no)
                   IF ufServerCases.CMA_GroupType=gParent AND ufServerCases.CMA_SpawnCount>0 THEN
                     GroupTransferToHandleCount:= GroupTransferToHandleCount+1
                     GroupTransferToHandle:= GroupTransferToHandle+ufServerCases.CMA_GroupID+cTab
                   ENDIF
                   ufServerCases_Write(cTraceConfirmed)
                   UploadNeeded:= Yes
                   DelC:= DelC+1
                 ELSEIF UPPERCASE(ufServerCases.CMA_Location)='RELEASE_REQ' 
                 THEN //remove case from client. the case, the attempts for the case and survey data of the case will be deleted
                   rRes:= ReleaseCase(aCaseGUID,aCaseID,'RELEASE_REQ')
                   IF rRes=0 AND ufServerCases.CMA_GroupType=gParent AND ufServerCases.CMA_SpawnCount>0 THEN
                     GroupReleaseToHandleCount:= GroupReleaseToHandleCount+1
                     GroupReleaseToHandle:= GroupReleaseToHandle+ufServerCases.CMA_GroupID+cTab
                   ENDIF
                   UploadNeeded:= yes
                   IF rRes=0 THEN
                     RelC:= RelC+1
                   ENDIF  
                 ELSEIF UPPERCASE(ufServerCases.CMA_Location)='REOPEN_REQ' 
                 THEN //reopen closed case
                   UploadNeeded:= yes
                   ufLocalCases.Get(aCaseGuid,aCaseID)
                   IF ufLocalCases.IORESULTCODE=0 THEN
                     ufServerCases:= ufLocalCases
                     RegisterUpload(no)
                     ufServerCases.CMA_CaseClosed:= EMPTY
                     ufServerCases.CMA_Location:='CLIENT'
                     ufServerCases.CMA_Status:= 'Reopened' 
                     ufServerCases_Write(cTraceConfirmed)
                     ufLocalCases.CMA_CaseClosed:= EMPTY
                     ufLocalCases.CMA_Location:= 'REOPEN_REQ'
                     ufLocalCases.CMA_Status:= 'Reopened'
                     IF ufServerCases.CMA_GroupType=gParent AND ufServerCases.CMA_SpawnCount>0 THEN
                       GroupReopenToHandleCount:= GroupReopenToHandleCount+1
                       GroupReopenToHandle:= GroupReopenToHandle+ufServerCases.CMA_GroupID+cTab
                     ENDIF 
                     IF ufLocalCases.CMA_GroupType<>EMPTY THEN
                       //requires groupstatus update...
                       RegisterUpdateOfGroupStatus(ufLocalCases.CMA_GroupID,ToUpdate,ToUpdateCount)
                     ENDIF
                     WriteLocalCaseAndFlush
                     ReoC:= ReoC+1
                     AddToLog('REOPEN_REQ handled for '+aCaseGuid+' '+aCaseID)
                   ELSE
                     ufServercases.CMA_Location:= 'REOPEN_FAILED'
                     ufServerCases_Write(cTraceError)
                     AddToLog('Reopen not possible of case '+aCaseGuid+','+aCaseID)
                   ENDIF  
                 ELSEIF UPPERCASE(ufServerCases.CMA_Location)='CLOSE_REQ' 
                 THEN //close case on client but leave the case as is on client without further uploads...
                   ufLocalCases.Get(aCaseGuid,aCaseID)
                   ufServerCases:= ufLocalCases
                   ufLocalCases.CMA_CaseClosed:= yes
                   ufLocalCases.CMA_Status:= 'Closed'
                   ufLocalCases.CMA_Location:= 'CLOSE_REQ'
                   WriteLocalCaseAndFlush
                   ufServerCases.CMA_Location:='CLIENT'
                   ufServerCases.CMA_Status:='Closed'
                   ufServerCases_Write(cTraceConfirmed)
                   UploadNeeded:= yes
                   ClsC:= ClsC+1
                   IF ufServerCases.CMA_GroupType=gParent AND ufServerCases.CMA_SpawnCount>0 THEN
                     GroupCloseToHandleCount:= GroupCloseToHandleCount+1
                     GroupCloseToHandle:= GroupCloseToHandle+ufServerCases.CMA_GroupID+cTab
                   ENDIF 
                   IF ufLocalCases.CMA_GroupType<>EMPTY THEN
                     //requires groupstatus update...
                     RegisterUpdateOfGroupStatus(ufLocalCases.CMA_GroupID,ToUpdate,ToUpdateCount)
                   ENDIF
                   AddToLog('CLOSE_REQ handled for '+aCaseGuid+' '+aCaseID)
                 ELSEIF UPPERCASE(ufServerCases.CMA_Location) IN ['REFRESHCASE_REQ','REFRESHDATA_REQ','REFRESHBOTH_REQ'] THEN
                   ufLocalCases.Get(aCaseGuid,aCaseID)
                   IF UPPERCASE(ufServerCases.CMA_Location) IN ['REFRESHCASE_REQ','REFRESHBOTH_REQ'] THEN
                     //assign new values
                     ufLocalCases.CMA_StartDate:= ufServerCases.CMA_StartDate
                     ufLocalCases.CMA_EndDate:= ufServerCases.CMA_EndDate
                     ufLocalCases.CMA_Supervisor:= ufServerCases.CMA_Supervisor
                     ufLocalCases.CMA_CmdLineForEdit:= ufServerCases.CMA_CmdLineForEdit
                     ufLocalCases.CMA_PreLoadForEdit:= ufServerCases.CMA_PreLoadForEdit
                     ufLocalCases.CMA_TimeZone:= ufServerCases.CMA_TimeZone
                     ufLocalCases.CMA_AttemptsRoute:= ufServerCases.CMA_AttemptsRoute
                     ufLocalCases.CMA_ContactImage:= ufServerCases.CMA_ContactImage
                     ufLocalCases.CMA_DetailsTemplate:= ufServerCases.CMA_DetailsTemplate
                     ufLocalCases.CMA_CustomUse:= ufServerCases.CMA_CustomUse
                     IF ufServerCases.LastChangedNote=EMPTY THEN
                       ufLocalCases.CaseNote:= ufServerCases.CaseNote
                     ENDIF  
                     IF ufServerCases.LastChangedCI=EMPTY THEN
                       ufLocalCases.CMA_ContactData:= ufServerCases.CMA_ContactData
                       ufLocalCases.ContactInfoShort:= ufServerCases.ContactInfoShort
                     ENDIF  
                   ENDIF  
                   IF UPPERCASE(ufServerCases.CMA_Location) IN ['REFRESHDATA_REQ','REFRESHBOTH_REQ'] THEN
                     //refresh the survey data but only if not 'touched' on client
                     IF ufServerCases.CMA_Data=EMPTY AND srvList.SetupFilename=EMPTY THEN
                       RegisterDownloadCheckNeeded(aCaseGuid,aCaseID,1,4)   
                     ENDIF
                   ENDIF 
                   ufLocalCases.CMA_Location:= ufServerCases.CMA_Location
                   WriteLocalCaseAndFlush
                   ufServerCases.CMA_Location:='CLIENT'
                   RegisterUpload(no) //lhfn added 5-11-2021
                   ufServerCases_Write(cTraceConfirmed)
                   UploadNeeded:= yes
                   AddToLog('Case refresh handled for '+aCaseGuid+' '+aCaseID)
                 ELSE
                   AddToLog('Unhandled case in download: '+aCaseGuid+', '+aCaseID+', cma_location:'+ufServerCases.CMA_Location)
                   ufServerCases.CMA_Location:= 'UNHANDLED'
                   ufServerCases_Write(cTraceUnhandled)
                 ENDIF  
               ELSE
                 AddToLog('Case skipped: '+ aCaseGuid+', '+aCaseID)  
                 IF ufServerCases.CMA_Location='DOWNLOAD_REQ' THEN
                   ufServerCases.CMA_Location:= EMPTY
                   ufServerCases_WRITE(cTraceSkipped)
                   ENDIF  
               ENDIF  
             ENDIF  
           ENDDO        
           IF GroupTransferToHandleCount>0 THEN //Now handle TRANSFER_REQ for parent also for cases child cases
             HandleGroupTransfer(GroupTransferToHandle,GroupTransferToHandleCount)
           ENDIF  
           IF GroupReopenToHandleCount>0 THEN //Now handle REOPEN_REQ for parent also for cases child cases
             HandleGroupReopen(GroupReopenToHandle,GroupReopenToHandleCount)
           ENDIF  
           IF GroupReleaseToHandleCount>0 THEN //Now handle RELEASE_REQ for parent also for cases child cases
             HandleGroupRelease(GroupReleaseToHandle,GroupReleaseToHandleCount)
           ENDIF  
           IF GroupCloseToHandleCount>0 THEN //Now handle CLOSE_REQ for parent also for cases child cases
             HandleGroupClose(GroupCloseToHandle,GroupCloseToHandleCount)
           ENDIF  
           //update the cases on the server bases on the content of the cases-survey database on client
         ELSEIF dRes=0 THEN
           IF pInitial<>1 THEN UpdateSync_msg(msgNothingToDownload) ENDIF
         ELSEIF dRes<0 THEN
           CASE dRes OF
             -10: UpdateSync_msg(msgSyncNotPossible+msgSyncErrorMinus10) 
             -4:  UpdateSync_msg(msgSyncNotPossible+msgSyncErrorMinus4)
             -2:  UpdateSync_msg(msgSyncNotPossible+msgSyncErrorMinus2)
             ELSE
             UpdateSync_msg(msgSyncNotPossible+STR(dRes)) 
           ENDCASE
         ENDIF
         IF dRes>=0 THEN //continue with sync
           //now check if an action is needed for cases on the client
           ufLocalCases.RESET
           FOR Index:= 1 to ufLocalCases.FORMCOUNT DO
             ufLocalCases.READNEXT
             ufServerCases:= ufLocalCases
             aCaseGUID:= ufServerCases.MainSurveyID
             aCaseID:= ufServerCases.ID
             IF ufLocalCases.CMA_CaseClosed=yes THEN
               IF ufLocalCases.CMA_Process.LastUploaded.When<ufLocalCases.CMA_Process.LastChangedDT AND ufLocalCases.CMA_Status<>'Closed' THEN 
                 IF ufLocalCases.CMA_Process.LastInterviewEndTime<>EMPTY AND ufLocalCases.CMA_Process.LastUploaded.When<ufLocalCases.CMA_Process.LastInterviewEndTime THEN
                   RegisterUploadCheckNeeded(aCaseGuid,aCaseID,1)  
                 ENDIF  
                 AddAttemptsForUpload(aCaseGuid,aCaseID)  
                 aLocation:= EMPTY
                 IF ufServerCases.SEARCH(aCaseGuid,aCaseID) THEN //already in list because of a transfer_req or refresh
                   ufServerCases.READ 
                   aNewUser:= ufServerCases.CMA_ForWhom
                   aLocation:= ufServerCases.CMA_Location
                   ufServerCases:= ufLocalCases
                   ufServerCases.CMA_ForWhom:= aNewUser
                   IF aLocation='TRANSFER_OK' THEN 
                     ufServerCases.CMA_InPossession:= '' 
                   ENDIF
                   ufServerCases.CMA_Location:= aLocation 
                 ENDIF
                 IF aLocation=EMPTY THEN
                   ufServerCases.CMA_Location:= 'SERVER'
                 ENDIF  
                 RegisterUpload(no)
                 UploadNeeded:= yes
                 ComC:= ComC+1
                 ufServerCases_Write(cClosed)
                 WriteLocalCaseAndFlush
               ELSEIF DaysToAutoRelease<>EMPTY AND ufLocalCases.CMA_EndDate<>EMPTY AND SysDate>ufLocalCases.CMA_EndDate+DaysToAutoRelease THEN
                 dRes:= ReleaseCase(aCaseGUID,aCaseID,'AUTORELEASE-1')
                 UploadNeeded:= yes
                 IF dRes=0 THEN
                   RelC:= RelC+1
                 ENDIF  
               ENDIF  
             ELSEIF UploadChanges=yes THEN //backup changed cases...
               IF ufLocalCases.CMA_Process.LastUploaded.When<ufLocalCases.CMA_Process.LastChangedDT
               THEN
                 //if not already in the ufServerCases then backup the changes
                 //this can happen when the case is not synchronized and there is a transfer_req...
                 IF NOT ufServerCases.SEARCH(aCaseGuid,aCaseID) THEN
                   IF ufLocalCases.CMA_Process.LastInterviewEndTime<>EMPTY AND ufLocalCases.CMA_Process.LastUploaded.When<ufLocalCases.CMA_Process.LastInterviewEndTime THEN
                     RegisterUploadCheckNeeded(aCaseGuid,aCaseID,1)  
                   ENDIF  
                   AddAttemptsForUpload(aCaseGuid,aCaseID)  
                   RegisterUpload(no) 
                   ufServerCases.CMA_Location:= 'CLIENT'
                   ufServerCases_Write(cTraceChanged) 
                   UploadNeeded:= yes
                   {$IFDEF UseDateTimeType} 
                   aLastUploaded:= DATETOSTR(ufLocalCases.CMA_Process.LastUploaded.When,cDateTimeFormat) 
                   {$ELSE}
                   aLastUploaded:= ufLocalCases.CMA_Process.LastUploaded.When 
                   {$ENDIF} 
                   BckC:= BckC+1
                   WriteLocalCaseAndFlush
                 ENDIF  
               ELSEIF DaysToAutoRelease<>EMPTY AND iSettings.sAutoReleaseNonCompleted=yes AND ufLocalCases.CMA_EndDate<>EMPTY AND SysDate>ufLocalCases.CMA_EndDate+DaysToAutoRelease THEN
                 dRes:= ReleaseCase(aCaseGUID,aCaseID,'AUTORELEASE-2')
                 UploadNeeded:= yes
                 IF dRes=0 THEN
                   RelC:= RelC+1
                 ENDIF
               ENDIF
             ELSEIF DaysToAutoRelease<>EMPTY AND iSettings.sAutoReleaseNonCompleted=yes AND ufLocalCases.CMA_EndDate<>EMPTY AND SysDate>ufLocalCases.CMA_EndDate+DaysToAutoRelease THEN
               dRes:= ReleaseCase(aCaseGUID,aCaseID,'AUTORELEASE-3')
               UploadNeeded:= yes
               IF dRes=0 THEN
                 RelC:= RelC+1
               ENDIF
             ENDIF
           ENDDO
           CheckForMissingSurveyData 
           RefreshSurveyData 
           dRes:= HandleAdditionalUploads
           dRes:= HandleAdditionalDownloads
           dRes:= HandleAttemptsUpload
           HandleGroupStatusUpdates(ToUpdate,ToUpdateCount)
           dRes:= HandleCasesUpload(UploadNeeded) //most important upload. Contains the launcher case include all data in xml blos
           IF dRes=0 THEN //only delete when case upload succeeded!
             dRes:= HandleAdditionalDeletes
           ELSE
             aUploadFailed:= yes
             RegisterUploadFailedInTrace
           ENDIF
   
           ufLocalCases.RESET 
           UploadLogging(0)
           RemoveNotUsedSurveys
           UpdateSurveys    //checks if update is available
           FillSurveyNamesArray
           WriteSyncTraceFileToDisk
           RunAtSyncSetups 
           CLEARDISPLAY
           IF aUploadFailed=EMPTY THEN
             IF ResC<>0 THEN
               UpdateSync_msg(msgRestoredCases+' '+str(ResC))  
             ENDIF
             IF NewC<>0 THEN
               UpdateSync_msg(msgNewCases+' '+str(NewC))  
             ENDIF
             IF DelC<>0 THEN
               UpdateSync_msg(msgCasesTransferred+' '+str(DelC))
             ENDIF
             IF ComC<>0 THEN
               UpdateSync_msg(msgCompletedCases+STR(ComC))
             ENDIF  
             IF BckC<>0 THEN
               UpdateSync_msg(msgBackupCases+STR(BckC))
             ENDIF  
             IF RelC<>0 THEN
               UpdateSync_msg(msgReleasedCases+STR(RelC))
             ENDIF  
             IF ReoC<>0 THEN
               UpdateSync_msg(msgReopenedCases+STR(ReoC))
             ENDIF  
             IF ClsC<>0 THEN
               UpdateSync_msg(msgClosedCases+STR(ClsC))
             ENDIF
             IF ComC=0 AND BckC=0 THEN
               IF pInitial<>1 THEN UpdateSync_msg(msgNothingToUpload) ENDIF
             ENDIF
           ELSE
             UpdateSync_msg(msgUploadFailed)
           ENDIF  
           IF sync_msg<>'' THEN DisplayOnScreen(sync_msg,1) ENDIF
           aLastSync:= NowDT
           WriteSettings
           AddToLog('Synchronization finished')  
         ELSE
           WriteSyncTraceFileToDisk
           IF sync_msg<>'' THEN 
             CLEARDISPLAY 
             DisplayOnScreen(sync_msg,1)
           ENDIF
         ENDIF
       ELSE
         IF LauncherInactive=yes THEN
           CLEARDISPLAY 
           DisplayOnScreen(msgServerMaintenance,1)
         ELSE  
           AddToLog('Synchronization cancelled')  
         ENDIF  
       ENDIF  
    ENDIF
  ELSE
    DisplayOnScreen(msgNotConnected,1)
  ENDIF
  CLEARDISPLAY
ENDPROCEDURE //Sync

FUNCTION CalculateTimeDifference: INTEGER
PARAMETERS
  pStart: STRING //format 'yyyyMMdd HH:mm:ss'
  pEnd: STRING   //format 'yyyyMMdd HH:mm:ss'
AUXFIELDS
  D1, D2: DATETYPE
  T1, T2: TIMETYPE  
INSTRUCTIONS
  RESULT:= 0
  D1:= STRTODATE(SUBSTRING(pStart,1,8),'yyyyMMdd')
  D2:= STRTODATE(SUBSTRING(pEnd,1,8),'yyyyMMdd')
  T1:= STRTOTIME(SUBSTRING(pStart,10,8),'HH:mm:ss')
  T2:= STRTOTIME(SUBSTRING(pEnd,10,8),'HH:mm:ss')
  Result:= (JULIAN(D2)-JULIAN(D1))*24*60*60+ROUND((T2.ABSTIME-T1.ABSTIME)/1000)
ENDFUNCTION 

FUNCTION KeyFieldsCountOK: INTEGER
PARAMETERS
  pKey: STRING
  pKeyCount: INTEGER
AUXFIELDS
  s: STRING
  p,i: INTEGER  
INSTRUCTIONS
  RESULT:= 0
  s:= pKey+','
  FOR i:= 1 TO pKeyCount DO
    IF GetEntry(s,i,',')='' THEN
      RESULT:= 1
      EXITFOR
    ENDIF
  ENDDO 
  IF RESULT=0 THEN //now check if key has not too many entries...
    p:= 1 i:= 0
    REPEAT
      p:= POSITION(',',s,p) 
      IF p<>0 THEN p:= p+1 ENDIF
      i:= i+1
    UNTIL i=pKeyCount+1
    IF p<>0 THEN RESULT:= 1 ENDIF
  ENDIF    
ENDFUNCTION

FUNCTION AddDoubleQuotesIfNeeded:OPEN
PARAMETERS pText: OPEN
INSTRUCTIONS
  RESULT:= pText
  IF POSITION(' ',pText)>0 AND POSITION('"',pTExt)<>1 THEN
    RESULT:= '"'+RESULT+'"'
  ENDIF
ENDFUNCTION    

FUNCTION RunSetupAtSync: INTEGER
PARAMETERS
  pGUID: STRING
AUXFIELDS
  sPath: STRING
  cLine: OPEN
INSTRUCTIONS  
  ufLocalCases.RELEASE
  sPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
  cLine:= sPath+iSurveySettings.Survey_SetupAtSync+ 
        ' -V:"cmdGUID='+pGuid+'"'+
        ' -Q:True'+ //IMPORTANT: will not run when not set
        ' -K:"launcher='+[[Launcher.FileName]]+
            ',synctrace='+[[synctrace.FileName]]+
            ',LogMeta='+[[LogMeta.FileName]]+'"'+
        ' -N:"ufLocalCases='+cases_loc+
            ',iSyncTrace='+oSyncTrace.PATHNAME+cmaSyncTrace+        
            ',oLog='+oLog.PATHNAME+oLog.FILENAME+'"'
  AddToLog('Executing setup: '+cLine)
  RESULT:= CALL(cLine)
  AddToLog('Call result: '+STR(RESULT))      
  ufLocalCases.OPEN(cases_loc)
ENDFUNCTION   

PROCEDURE RunAtSyncSetups
AUXFIELDS
  Index, I, iRes: INTEGER  
  aGUID: STRING
  aKeyCount: INTEGER
INSTRUCTIONS
  uSurveys.OPEN(SetupPath+srvSurveys)
  FOR Index:= 1 TO uSurveys.FORMCOUNT DO
    uSurveys.READNEXT
    IF POSITION(uSurveys.SurveyGUID+';',SurveysDuringSync)>0 THEN
      aGUID:= uSurveys.SurveyGUID
      srvList.GET(aGUID)
      IF srvList.RESULTOK THEN
        GetSurveySettings(aGUID)
        IF iSurveySettings.Survey_SetupAtSync<>'' THEN
          iRes:= RunSetupAtSync(aGUID)
          IF iRes<>0 THEN
            AddToLog('SyncSetup failed for '+aGUID+': '+STR(iRes))
            UpdateSync_msg('SyncSetup failed for '+aGUID)  
          ENDIF
        ENDIF
      ENDIF
    ENDIF  
  ENDDO  
  uSurveys.RELEASE
ENDPROCEDURE

FUNCTION RunAtSpawnSetup: INTEGER
PARAMETERS 
  pGuid: STRING
  pID: STRING
AUXFIELDS
  res: INTEGER
  sPath: STRING
  cLine: OPEN
INSTRUCTIONS
  ufLocalCases.RELEASE
  srvList.GET(pGuid) //topic survey
  sPath:= ExtractFilePath(srvList.GetSurveyDataFilename)
  cLine:= sPath+iSurveySettings.Survey_SetupAtSpawn+ 
          ' -V:"cmdID='+pID +
              ',cmdGUID='+pGuid+'"'+
          ' -Q:True'+ //perhaps also allow dialog setup?
          ' -K:"topicmeta='+srvList.getsurveymetafilename+
              ',launcher='+[[Launcher.FileName]]+
              ',LogMeta='+[[LogMeta.FileName]]+'"'+
          ' -N:"topic='+srvList.GetSurveyDataFilename+
              ',ufLocalCases='+cases_loc+
              ',oLog='+oLog.PATHNAME+oLog.FILENAME+'"'
  AddToLog('Executing setup: '+cLine)
  RESULT:= CALL(cLine,tSpawnID)
  AddToLog('Call result: '+STR(RESULT))      
  ufLocalCases.OPEN(cases_loc)
ENDFUNCTION

PROCEDURE RunAtEndSetup
PARAMETERS 
  pGuid: STRING
  pID: STRING
  pGroupID: STRING
  pAfterInterview: INTEGER
  pPrevStatus: STRING
AUXFIELDS
  res: INTEGER
  sPath: STRING
  cLine: OPEN
  attempts_metafile: STRING
  attempts_datafile: STRING
INSTRUCTIONS
  GetSurveySettings(pGUID)
  IF iSurveySettings.Survey_SetupAtEnd<>'' THEN
    ufLocalCases.RELEASE
    ufLocalAttempts.RELEASE
    srvList.GET(CurrentAttemptsGUID)
    attempts_datafile:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+'_loc'
    attempts_metafile:= srvList.GetSurveyMetaFilename
    srvList.GET(pGuid) //topic survey
    sPath:= ExtractFilePath(srvList.GetSurveyDataFilename)
    cLine:= sPath+iSurveySettings.Survey_SetupAtEnd+ 
          ' -V:"cmdID=\''+pID +'\''+
              ',cmdGUID='+pGuid+
              ',cmdPrevStatus='+pPrevStatus+
              ',cmdAfterInterview='+STR(pAfterInterview)+'"'+
            ' -Q:True' //perhaps also allow dialog setup?
    IF srvList.SetupFilename=EMPTY THEN //a true survey...
      cLine:= cLine+
          ' -K:"topicmeta='+srvList.getsurveymetafilename+
              ',launcher='+[[Launcher.FileName]]+
              ',LogMeta='+[[LogMeta.FileName]]+
              ',attempts='+attempts_metafile+'"'+
          ' -N:"topic='+srvList.GetSurveyDataFilename+
              ',ufLocalCases='+cases_loc+
              ',ufLocalAttempts='+attempts_datafile+
              ',oLog='+oLog.PATHNAME+oLog.FILENAME+'"'
    ELSE
      cLine:= cLine+
            ' -K:"launcher='+[[Launcher.FileName]]+
                ',LogMeta='+[[LogMeta.FileName]]+
                ',attempts='+attempts_metafile+'"'+
            ' -N:"ufLocalCases='+cases_loc+
                ',ufLocalAttempts='+attempts_datafile+
                ',oLog='+oLog.PATHNAME+oLog.FILENAME+'"'    ENDIF
    AddToLog('Executing setup: '+cLine)
    res:= CALL(cLine)
    AddToLog('Call result: '+STR(res))      
    ufLocalCases.OPEN(cases_loc)
    ufLocalAttempts.OPEN(attempts_datafile)
  ENDIF   
  DetermineGroupStatus(pGroupID,0)
ENDPROCEDURE   

FUNCTION GetPassword: STRING
PARAMETERS
  pString: STRING
AUXFIELDS 
  s: STRING 
  i: INTEGER
INSTRUCTIONS
  FOR I:= 1 TO LEN(pString) DO
    IF SUBSTRING(pString,i,1) in ['0'..'9'] THEN S:= S+SUBSTRING(pString,i,1) ENDIF
  ENDDO 
  SETRANDOMSEED(VAL(SUBSTRING(S,LEN(S)-7,8))) //trunc last 8 positions
  RESULT:= STR(RANDOM(9)+1)+STR(100000000+RANDOM(100000000))
ENDFUNCTION

FUNCTION ZipData: INTEGER
PARAMETERS
  pFileName: OPEN
  pPassWord: STRING
AUXFIELDS
  cmd: OPEN
  iRes: INTEGER
INSTRUCTIONS
  cmd:= {SETUPPATH+}pFileName +'.zip -w:'+ExtractFilePath(pFileName)+' -s:'+pPassWord+' -p -r -E:128 '+ExtractFileName(pFileName)+'.xml'
  {$IFDEF develop}
  AddToLog('Zip cmd: '+cmd)
  {$ENDIF}
  iRes:= ZIPFILES(cmd)
  IF iRes=1 THEN
    RESULT:= 0
  ELSE
    RESULT:= 1
    AddToLog('Zip failed: '+pFileName)
  ENDIF  
  iRes:= DELETEFILE({SETUPPATH+}pFileName+'.xml')
ENDFUNCTION

PROCEDURE StartInterviewAfterSpawn
INSTRUCTIONS
  StartInterviewEx(1) 
ENDPROCEDURE  

PROCEDURE StartInterview //started by a button
INSTRUCTIONS
  StartInterviewEx(0)
ENDPROCEDURE

FUNCTION ProcessMappings_Put: OPEN
PARAMETERS
  pInitialValue: OPEN
  pForAttempt: INTEGER
AUXFIELDS 
  Index: INTEGER
  aValue: STRING
INSTRUCTIONS
  RESULT:= pInitialValue
  IF iSurveySettings.Survey_MappingCount>0 THEN
    FOR Index:= 1 TO iSurveySettings.Survey_MappingCount DO
      IF ((iSurveySettings.Survey_Mapping[Index].Target=tTopic AND pForAttempt=0) OR
          (iSurveySettings.Survey_Mapping[Index].Target=tAttempt AND pForAttempt=1)) AND
          iSurveySettings.Survey_Mapping[Index].Direction IN [dPut,dBoth] 
      THEN
        CASE iSurveySettings.Survey_Mapping[Index].Origin OF
          oCustomData: aValue:= GetEntryOnName(tCase.tCustomUse,iSurveySettings.Survey_Mapping[Index].OriginFieldName,customDataSep(1),customDataSep(2)) 
          oContactData: aValue:= GetEntryOnName(tCase.tContactData,iSurveySettings.Survey_Mapping[Index].OriginFieldName,contactdatasep(1),contactDataSep(2))
          oLauncher: aValue:= tCase.GETVALUE(iSurveySettings.Survey_Mapping[Index].OriginFieldName) 
        ENDCASE
        IF RESULT<>'' THEN RESULT:=RESULT+',' ENDIF
        IF POSITION(',',aValue)>0 THEN aValue:= '\''+aValue+'\'' ENDIF
        RESULT:= RESULT+iSurveySettings.Survey_Mapping[Index].TargetFieldName+'='+aValue
      ENDIF
    ENDDO 
  ENDIF   
  IF iSettings.sMappingCount>0 AND 
     (iSurveySettings.Survey_InheritMappings=yes OR 
      (iSurveySettings.Survey_InheritMappings=EMPTY AND iSurveySettings.Survey_MappingCount=0)) 
  THEN
    FOR Index:= 1 TO iSettings.sMappingCount DO
      IF ((iSettings.sMapping[Index].Target=tTopic AND pForAttempt=0) OR
          (iSettings.sMapping[Index].Target=tAttempt AND pForAttempt=1)) AND
          iSettings.sMapping[Index].Direction IN [dPut,dBoth] 
      THEN
        CASE iSettings.sMapping[Index].Origin OF
          oCustomData: aValue:= GetEntryOnName(tCase.tCustomUse,iSettings.sMapping[Index].OriginFieldName,customDataSep(1),customDataSep(2)) 
          oContactData: aValue:= GetEntryOnName(tCase.tContactData,iSettings.sMapping[Index].OriginFieldName,contactdatasep(1),contactDataSep(2))
          oLauncher: aValue:= tCase.GETVALUE(iSettings.sMapping[Index].OriginFieldName) 
        ENDCASE
        IF RESULT<>'' THEN RESULT:=RESULT+',' ENDIF
        IF POSITION(',',aValue)>0 THEN aValue:= '\''+aValue+'\'' ENDIF
        RESULT:= RESULT+iSettings.sMapping[Index].TargetFieldName+'='+aValue
      ENDIF
    ENDDO
  ENDIF  
ENDFUNCTION  

PROCEDURE ProcessMappings_Get
PARAMETERS
  pForAttempt: INTEGER
AUXFIELDS 
  Index: INTEGER
  aValue: STRING
  aChange: (yes),EMPTY
INSTRUCTIONS
  IF iSurveySettings.Survey_MappingCount>0 THEN
    FOR Index:= 1 TO iSurveySettings.Survey_MappingCount DO
      IF ((iSurveySettings.Survey_Mapping[Index].Target=tTopic AND pForAttempt=0) OR
          (iSurveySettings.Survey_Mapping[Index].Target=tAttempt AND pForAttempt=1)) AND
          iSurveySettings.Survey_Mapping[Index].Direction IN [dGet,dBoth] 
      THEN
        IF (iSurveySettings.Survey_Mapping[Index].Target=tTopic AND pForAttempt=0) THEN
          aValue:= uiTopic.GETVALUE(iSurveySettings.Survey_Mapping[Index].TargetFieldName,UNFORMATTED)
        ELSEIF (iSurveySettings.Survey_Mapping[Index].Target=tAttempt AND pForAttempt=1) THEN
          aValue:= ufLocalAttempts.GETVALUE(iSurveySettings.Survey_Mapping[Index].TargetFieldName,UNFORMATTED)
        ENDIF
        CASE iSurveySettings.Survey_Mapping[Index].Origin OF
          oCustomData:   ReplaceEntryOnName(ufLocalCases.CMA_CustomUse,iSurveySettings.Survey_Mapping[Index].OriginFieldName,aValue,customDataSep(1),customDataSep(2))  
          oContactData:  ReplaceEntryOnName(ufLocalCases.CMA_ContactData,iSurveySettings.Survey_Mapping[Index].OriginFieldName,aValue,contactdatasep(1),contactDataSep(2))
          //oLaumcher. Better not...
        ENDCASE
        aChange:= yes
      ENDIF
    ENDDO
  ENDIF
  IF iSettings.sMappingCount>0 AND 
     (iSurveySettings.Survey_InheritMappings=yes OR 
      (iSurveySettings.Survey_InheritMappings=EMPTY AND iSurveySettings.Survey_MappingCount=0)) 
  THEN
    FOR Index:= 1 TO iSettings.sMappingCount DO
      IF ((iSettings.sMapping[Index].Target=tTopic AND pForAttempt=0) OR
          (iSettings.sMapping[Index].Target=tAttempt AND pForAttempt=1)) AND
          iSettings.sMapping[Index].Direction IN [dGet,dBoth] 
      THEN
        IF (iSettings.sMapping[Index].Target=tTopic AND pForAttempt=0) THEN
          aValue:= uiTopic.GETVALUE(iSettings.sMapping[Index].TargetFieldName,UNFORMATTED)
        ELSEIF (iSettings.sMapping[Index].Target=tAttempt AND pForAttempt=1) THEN
          aValue:= ufLocalAttempts.GETVALUE(iSettings.sMapping[Index].TargetFieldName,UNFORMATTED)
        ENDIF
        CASE iSettings.sMapping[Index].Origin OF
          oCustomData:  ReplaceEntryOnName(ufLocalCases.CMA_CustomUse,iSettings.sMapping[Index].OriginFieldName,aValue,customDataSep(1),customDataSep(2))  
          oContactData: ReplaceEntryOnName(ufLocalCases.CMA_ContactData,iSettings.sMapping[Index].OriginFieldName,aValue,contactdatasep(1),contactDataSep(2))
          //oLaumcher. Better not...
        ENDCASE
        aChange:= yes
      ENDIF
    ENDDO
  ENDIF
  IF aChange=yes THEN 
    tCase.tCustomUse:= ufLocalCases.CMA_CustomUse
    tCase.tContactData:= ufLocalCases.CMA_ContactData
    FillCustomColls 
  ENDIF
ENDPROCEDURE

PROCEDURE UpdateProcessDataAfterInterview
PARAMETERS pWhen, pNow: STRING
AUXFIELDS
  aTimeDiff: INTEGER
INSTRUCTIONS
  if ufLocalCases.CMA_Process.FirstInterviewTime=EMPTY THEN
    ufLocalCases.CMA_Process.FirstInterviewTime.User:= USERNAME
    {$IFDEF UseDateTimeType} 
    ufLocalCases.CMA_Process.FirstInterviewTime.When:= STRTODATETIME(aWhen,cDateTimeFormat)
    {$ELSE}
    ufLocalCases.CMA_Process.FirstInterviewTime.When:= pWhen
    {$ENDIF}              
    ufLocalCases.CMA_Process.LastInterviewTime:= ufLocalCases.CMA_Process.FirstInterviewTime
  ELSE
    ufLocalCases.CMA_Process.LastInterviewTime.User:= USERNAME
    {$IFDEF UseDateTimeType} 
    ufLocalCases.CMA_Process.LastInterviewTime.When:= STRTODATETIME(aWhen,cDateTimeFormat)
    {$ELSE}
    ufLocalCases.CMA_Process.LastInterviewTime.When:= pWhen
    {$ENDIF}              
  ENDIF
  {$IFDEF UseDateTimeType} 
  ufLocalCases.CMA_Process.LastInterviewEndTime:= STRTODATETIME(pNow,cDateTimeFormat)
  {$ELSE}
  ufLocalCases.CMA_Process.LastInterviewEndTime:= pNow
  {$ENDIF}              
  aTimeDiff:= CalculateTimeDifference(pWhen,pNow)
  IF GetTrackTimeUsed=1 THEN   
    ufLocalCases.CMA_Process.TotalInterviewTimeUsed:= ufLocalCases.CMA_Process.TotalInterviewTimeUsed+aTimeDiff
  ENDIF 
  {$IFDEF UseDateTimeType} 
  ufLocalCases.CMA_Process.LastChangedDT:= STRTODATE(NowDT,cDateTimeFormat)
  {$ELSE}
  ufLocalCases.CMA_Process.LastChangedDT:= NowDT
  {$ENDIF}
  WriteLocalCaseAndFlush //update case in local cases list
ENDPROCEDURE

PROCEDURE DisplayInterviewNotAllowed
INSTRUCTIONS
  IF tCase.tStartDate>SYSDATE THEN
    IF iSettings.sShowDateFormat<>EMPTY THEN 
      DisplayOnScreen(msgBeforeStartDate+' ('+DATETOSTR(tCase.tStartDate,iSettings.sShowDateFormat)+')',1) 
    ELSE
      DisplayOnScreen(msgBeforeStartDate+' ('+DATETOSTR(tCase.tStartDate)+')',1) 
    ENDIF  
  ELSE
    IF iSettings.sShowDateFormat<>EMPTY THEN
      DisplayOnScreen(msgAfterEndDate+' ('+DATETOSTR(tCase.tEndDate,iSettings.sShowDateFormat)+')' ,1)
    ELSE
      DisplayOnScreen(msgAfterEndDate+' ('+DATETOSTR(tCase.tEndDate)+')' ,1)
    ENDIF  
  ENDIF
ENDPROCEDURE


PROCEDURE StartSetup
AUXFIELDS
  iRes: INTEGER
  sPath: STRING
  aCmdLine: OPEN
  attempts_metafile: STRING
  attempts_datafile: STRING
  aWhen, aInterviewEnd: STRING
  {$IFDEF UseDateTimeType}
  aLastChanged: DATETIMETYPE
  {$ELSE}
  aLastChanged: STRING[24] //format 'yyyyMMdd,HH:mm:sszzz'
  {$ENDIF}  
  
INSTRUCTIONS
  aLastChanged:= ufLocalCases.CMA_Process.LastChangedDT
  ufLocalCases.RELEASE
  ufLocalAttempts.RELEASE
  srvList.GET(CurrentAttemptsGUID)
  attempts_datafile:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+'_loc'
  attempts_metafile:= srvList.GetSurveyMetaFilename
  srvList.GET(CurrentCaseGUID) //topic survey
  sPath:= ExtractFilePath(srvList.GetSurveyDataFilename)
  aCmdLine:= ' -InitialWindowState:Maximized'+
             ' -M:'+CurrentLanguage+
             ' -K:"launcher='+[[Launcher.FileName]]+
                 ',LogMeta='+[[LogMeta.FileName]]+
                 ',attempts='+attempts_metafile+'"'+
             ' -N:"ufLocalCases='+cases_loc+
                 ',ufLocalAttempts='+attempts_datafile+
                 ',oLog='+oLog.PATHNAME+oLog.FILENAME+'"'+
             ' -V:"cmdID=\''+CurrentCaseID +'\''+
                 ',cmdGUID='+CurrentCaseGUID+
                 ',cmdTextFontSize='+STR(auxTextFontSize)+
                 ',cmdStyle='+auxStyle+'"'+
             ' -P:"'+CurrentCaseGUID +',\''+CurrentCaseID+'\','+auxStyle+'"' //added to work around issue -V: not working 
  aWhen:= NowDT
  AddToLog('Executing setup: '+aCmdLine)
  iRes:= srvList.EDIT(aCmdLine)
  IF iRes<>0 THEN AddToLog('Edit result: '+STR(iRes)) ENDIF 
  aInterviewEnd:= NowDT     
  ufLocalCases.OPEN(cases_loc)
  ufLocalAttempts.OPEN(attempts_datafile)
  ufLocalCases.GET(PRIMARY,CurrentCaseGuid,CurrentCaseID)
  IF aLastChanged<>ufLocalCases.CMA_Process.LastChangedDT THEN
    aLastChange:= NowDT
    UpdateProcessDataAfterInterview(aWhen,aInterviewEnd)
    InitNewTemporaryCaseFromLocalDatabase
    RunAtEndSetup(CurrentCaseGuid,CurrentCaseID,ufLocalCases.CMA_GroupID,1,'')
  ENDIF  
  UpdateCasesScreen
  AutoSync
ENDPROCEDURE

PROCEDURE StartInterviewEx
PARAMETERS pOrigin: INTEGER
AUXFIELDS
  aValStat: STRING
  iRes, Res: INTEGER
  aCaseStatus: INTEGER
  aCmdLine: OPEN
  aWhen: STRING //format 'yyyyMMdd,HH:mm:sszzz'
  aInterviewEnd: STRING
  aTimeDiff: INTEGER
  aHappenings: STRING
  aFName: OPEN
  aExtra: STRING
  aKeyCount: INTEGER
  aText: STRING
  aKeys: STRING
  aKeyFilter: STRING
  aCmdForEdit: STRING
  aCmdPreLoadForEdit: OPEN
  index: INTEGER
  BreakOff: INTEGER
  aDefault: STRING
  aContinue: (yes),EMPTY
  aConfirmTxt: STRING
  aMappings: OPEN
  aFormAccessMode: STRING
INSTRUCTIONS
  IF (tCase.tMainSurveyID<>EMPTY) THEN 
    IF tCase.tCaseStatus='Interrupted' {was:cInterrupted} THEN
      aText:= msgContinueInterview
    ELSE
      aText:= msgStartInterview
    ENDIF    
    IF pOrigin=0 THEN
      aConfirmTxt:= tCase.tContactInfoShort
      IF iSettings.sUseIDinConfirm=yes THEN
        aConfirmTxt:= tCase.tIdentifier
      ENDIF
      IF CONFIRM(auxDisplaySetting+aText+' "'+aConfirmTxt+'"?') THEN
        aContinue:= yes
      ENDIF  
    ELSE
      aContinue:= yes    
    ENDIF
    IF aContinue=yes THEN  
      aExtra:= AdditionalSettings(1)
      CurrentCaseGuid:= tCase.tMainSurveyID
      GetSurveySettings(CurrentCaseGUID)
      CurrentCaseID:= tCase.tIdentifier
      AddToLog('Start interview for '+CurrentCaseGuid+' - '+CurrentCaseID)
      ufLocalCases.GET(CurrentCaseGuid,CurrentCaseID)
      iRes := GetListOfSurveysX(1)
      srvList.GET(CurrentCaseGuid)
      IF srvList.RESULTOK THEN
        IF srvList.SetupFilename<>EMPTY THEN
          IF (tCase.tStartDate=EMPTY AND (tCase.tEndDate=EMPTY OR tCase.tEndDate>=SYSDATE)) 
              OR (tCase.tStartDate<=SYSDATE AND (tCase.tEndDate=EMPTY OR tCase.tEndDate>=SYSDATE)) THEN
            StartSetup
          ELSE
            DisplayInterviewNotAllowed  
          ENDIF  
        ELSE  
          iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
          aFormAccessMode:= 'TryGet'
          IF iSettings.sHonourFormAccessMode=yes THEN
            aFormAccessMode:= GetFormAccessMode
          ELSEIF GetRequireCasePresent=1 THEN aFormAccessMode:= 'Get'   
          ENDIF
          aKeyCount:= VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]])
          //check if key tCase.tIdentifier matches expected number of primary key fields...
          IF KeyFieldsCountOK(CurrentCaseID,aKeyCount)=1 THEN
            AddToLog('Primary key not okay! Expected #key fields: '+str(aKeyCount))
            DisplayOnScreen(msgUnableToStartInterview,1)
          ELSEIF (tCase.tStartDate=EMPTY AND (tCase.tEndDate=EMPTY OR tCase.tEndDate>=SYSDATE)) 
                  OR (tCase.tStartDate<=SYSDATE AND (tCase.tEndDate=EMPTY OR tCase.tEndDate>=SYSDATE)) THEN
             //check if form with key is present. If not, create it. This is to get arround 'wrong' data entry setting that allow only to work on existing cases...
            iRes:= uTopic.OPEN(srvlist.GetSurveyDataFilename)
            uTopic.GETFORM(primary,CurrentCaseID)
            IF NOT uTopic.RESULTOK then
              IF aFormAccessMode in ['TryGet','New'] THEN //GetRequireCasePresent<>1 {1=yes}
                aKeys:= GetPrimaryKeyNames([[TopicMeta]]) 
                FOR index:= 1 TO aKeyCount DO
                  uTopic.PUTVALUE(GetEntry(aKeys,index,';'),GetEntry(CurrentCaseID,index,','))
                ENDDO   
                uTopic.WRITE
              ELSE
                IF GetAskDownloadWhenNeeded=1 {1=yes} AND IsConnected=1 THEN
                  IF CONFIRM(auxDisplaySetting+msgDownloadCase) THEN
                    uTopic.RELEASE
                    aKeyFilter:=  MakePrimaryKeyFilter(
                                     VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]]),
                                     GetPrimaryKeyNames([[TopicMeta]]),
                                     CurrentCaseID)
                    iRes:= srvList.DOWNLOADDATA(aKeyFilter)
                    AddToLog('Result of download of case '+aKeyFilter+' for survey '+CurrentCaseGUID+' = '+STR(iRes))                 
                    IF iRes<>1 THEN 
                      DisplayOnScreen(msgDownloadFailed,1) 
                      BreakOff:= 1
                    ENDIF
                  ELSE
                    BreakOff:= 1
                  ENDIF
                ELSE 
                  BreakOff:= 1
                ENDIF  
              ENDIF  
            ENDIF
            uTopic.RELEASE
            //end check
            IF BreakOff=EMPTY THEN
              aCmdLine:= '-KeyValue:'+CurrentCaseID
              aCmdForEdit:= GetCmdLineForEdit(ufLocalCases.CMA_CmdLineForEdit)
              IF POSITION('-LANGUAGE:',UPPERCASE(aCmdForEdit))=0 THEN
                aCmdLine:= aCmdLine+' -Language:'+CurrentLanguage
              ENDIF 
              IF POSITION('-FIELDS:',UPPERCASE(aCmdForEdit))=0 THEN
                aCmdPreLoadForEdit:= TRIM(ufLocalCases.CMA_PreLoadForEdit)
                aMappings:= ProcessMappings_Put(aCmdPreLoadForEdit,0)
                IF aMappings<>'' THEN
                  aCmdLine:= aCmdLine+' -Fields:'+AddDoubleQuotesIfNeeded(aMappings)+' -AssignMode:Always'
                ENDIF  
              ENDIF  
              IF aCmdForEdit<>'' THEN
                aCmdLine:= aCmdLine+' '+aCmdForEdit
              ENDIF 
              aCmdLine:= aCmdLine+aExtra
              IF POSITION('-MODE:',UPPERCASE(aCmdLine))=0 AND Position('-LAYOUTSETGROUP:',UPPERCASE(aCmdLine))=0 THEN
                aDefault:= GetDefaultMode
                IF aDefault<>EMPTY THEN aCmdLine:= aCmdLine+' -Mode:'+aDefault ENDIF
              ENDIF
              IF POSITION('-LAYOUTSET:',UPPERCASE(aCmdLine))=0  THEN
                aDefault:= GetDefaultLayoutSet
                IF aDefault<>EMPTY THEN aCmdLine:= aCmdLine+' -LayoutSet:'+aDefault ENDIF
              ENDIF
              IF POSITION('-DATAENTRYSETTINGS:',UPPERCASE(aCmdLine))=0  THEN
                aDefault:= GetDefaultdataEntrySettings
                IF aDefault<>EMPTY THEN aCmdLine:= aCmdLine+' -DataEntrySettings:'+aDefault ENDIF
              ENDIF
              aWhen:= NowDT
              AddToLog('CmdLine: "'+aCmdLine+'"')
              iRes:= srvlist.EDIT(aCmdLine)
              IF iRes<>0 THEN AddToLog('Edit result: '+STR(iRes)) ENDIF 
              aInterviewEnd:= NowDT
              Res:= uiTopic.OPEN(srvlist.GetSurveyDataFilename) //inputfile! That is all that is needed here.
              aFName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+'_'+CurrentCaseGUID+'_'+REPLACE(CurrentCaseID,',','_')//+'.xml'
              Res:= oTopic.OPEN(aFName+'.xml')
              uiTopic.SETREADKEY(PRIMARY)
              uiTopic.GETFORM(PRIMARY,CurrentCaseID)
              aValStat:= UPPERCASE([[uiTopic.StoredValidationStatus]]) //was: //aValStat:= uTopic.VALIDATIONSTATUS but this required a checkrules...
              AddToLog('Stored validation status after Edit: '+aValStat)
              oTopic:= uiTopic
              oTopic.WRITE
              otopic.RELEASE
              //start zipping this...
              IF iSettings.sZipData=yes THEN
                Res:= ZipData(aFName,GetPassword(ufLocalCases.MainSurveyID+ufLocalCases.ID))
                IF Res=0 THEN
                Res:= ufLocalCases.CMA_Data.Survey.LOADFROMDISK(aFName+'.zip')
                {$IFNDEF develop}
                Res:= DELETEFILE(aFName+'.zip') 
                {$ENDIF}
                ENDIF  
              ELSE  
                Res:= ufLocalCases.CMA_Data.Survey.LOADFROMDISK(aFName+'.xml')
                {$IFNDEF develop}
                Res:= DELETEFILE(aFName+'.xml') 
                {$ENDIF}
              ENDIF  
              //end zipping
              //check if there is a value available for Happenings...
              IF [[uiTopic.datamodel.FieldExists('Happenings')]]='True' THEN
                aHappenings:= uiTopic.GETVALUE('Happenings',UNFORMATTED) //code value of Happenings field
                AddToLog('Value of Happenings: '+aHappenings) 
              ENDIF
              ProcessMappings_Get(0)
              uiTopic.RELEASE
              aCaseStatus:= 0
              IF iRes<>0 THEN //.EDIT failed
                ufLocalCases.CMA_Status:= 'Interrupted'
                aCaseStatus:= 1
              ELSEIF aValStat='CLEAN' THEN 
                ufLocalCases.CMA_Status:= 'Completed'
                aCaseStatus:= 2
              ELSE
                ufLocalCases.CMA_Status:= 'Interrupted'
                aCaseStatus:= 1
              ENDIF
              UpdateProcessDataAfterInterview(aWhen,aInterviewEnd)
              tCase.tCaseStatus:= TranslateStatus(GetDisplayStatus)
              IF ufLocalCases.CMA_HappeningsCod<>EMPTY THEN
                CASE ShowResult OF
                  rCodeOnly: tCase.tLastResult:= ufLocalCases.CMA_HappeningsCod
                  rStrOnly:  tCase.tLastResult:= ufLocalCases.CMA_HappeningsStr
                  rBoth:     tCase.tLastResult:= ufLocalCases.CMA_HappeningsCod+':'+ufLocalCases.CMA_HappeningsStr
                  rLabOnly:  tCase.tLastResult:= ufLocalCases.CMA_HappeningsLbl
                  rCodeLab:  tCase.tLastResult:= ufLocalCases.CMA_HappeningsCod+':'+ufLocalCases.CMA_HappeningsLbl
                ENDCASE
              ENDIF  
              {$ifdef UseDateTimeType}
              tCase.tInterviewStart:= DATETOSTR(ufLocalCases.CMA_Process.LastInterviewTime.When,cDateTimeFormat)
              {$else}
              tCase.tInterviewStart:= ufLocalCases.CMA_Process.LastInterviewTime.When
              {$endif}
              tCase.tInterviewEnd:= aInterviewEnd
              WriteTempCaseAndUpdateCache
              ProcessAttempts
              AddAttempt(1,aCaseStatus,aHappenings) 
              HandleChange
            ELSE
              DisplayOnScreen(msgCaseNotPresent,1)
            ENDIF
          ELSE
            DisplayInterviewNotAllowed
          ENDIF    
        ENDIF 
      ELSE
        DisplayOnScreen(msgSurveyNotPresent,1)
      ENDIF
    ENDIF    
  ELSE
    DisplayOnScreen(msgNoCases,1)
  ENDIF
ENDPROCEDURE

PROCEDURE SpawnCase
AUXFIELDS
  I: INTEGER
  SpawnStartStr: STRING
  NewIDVal: INTEGER
  OK: 0..2
  SurveyName: STRING
  aExtra: STRING
  aZeros: (yes)
  aStartEdit: (yes),EMPTY
  res: integer
  aContinue: (yes),EMPTY
  aCreated: (yes),EMPTY
INSTRUCTIONS
  IF tCase.tAllowSpawning = yes THEN
    GetSurveySettings(CurrentCaseGuid)  
    IF iSurveySettings.Survey_StartInterviewAtSpawn=yes THEN
      IF CONFIRM(auxDisplaySetting+REPLACE(msgCreateAndInterview,'$contactinfoshort',tCase.tContactInfoShort),IGNORE) THEN
        aContinue:= yes
      ENDIF
    ELSEIF CONFIRM(auxDisplaySetting+msgConfirmSpawn) THEN
      aContinue:= yes
    ENDIF      
    IF aContinue=yes THEN
      IF iSurveySettings.Survey_SetupAtSpawn<>'' THEN
        aStartEdit:= tCase.tIsDonorCase
        tSpawnID.NewID:= EMPTY
        res:= RunAtSpawnSetup(CurrentCaseGuid,CurrentCaseID) 
        IF res=0 THEN
          IF tSpawnID.NewID<>EMPTY THEN
            ufLocalCases.GET(tCase.tMainSurveyID,tSpawnID.NewID)
            IF ufLocalCases.RESULTOK THEN 
              AddToLog('New case created by RunAtSpawnSetup for '+tCase.tMainSurveyID+' with key '+ufLocalCases.ID)
              aCreated:= yes 
            ELSE
              DisplayOnScreen(msgSpawnNotPossible,1)
              AddToLog('Case create by RunAtSpawnSetup NOT okay for '+ tCase.tMainSurveyID+' id='+tCase.tIdentifier)
            ENDIF
          ENDIF       
        ENDIF
      ELSE
        //determine what new identifier needs to be
        OK:= 1
        I:= LastPosition(',',tCase.tIdentifier)
        IF I=0 THEN 
          //only one primary key field and we assume it is a string field
          //add '-' plus number to identify new case
          IF LastPosition('-000',tCase.tIdentifier)>0 AND LastPosition('-000',tCase.tIdentifier)=LEN(tCase.tIdentifier)-3 then
            ok:= 1
            SpawnStartStr:= '0'
            I:= LEN(tCase.tIdentifier)-3
            aZeros:= yes
          ELSE
            OK:= 1 
            SpawnStartStr:= '0'
            I:= LEN(tCase.tIdentifier)
            aExtra:= '-'
          ENDIF  
        ELSE
          SpawnStartStr:= SUBSTRING(tCase.tIdentifier,I+1,255)
          IF SpawnStartStr<>NUMERIC THEN 
            OK:= 0 
          ENDIF
        ENDIF
        IF OK=0 THEN
          DisplayOnScreen(msgSpawnNotPossible,1)
          AddToLog('Case create not possible for '+ tCase.tMainSurveyID+' id='+tCase.tIdentifier)
        ELSE
          ufLocalCases.GET(tCase.tMainSurveyID,tCase.tIdentifier)
          ufLocalCases.CMA_SpawnCount:= ufLocalCases.CMA_SpawnCount+1
          {$ifdef UseDateTimeType}
          ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(NowDT,cDateTimeFormat) 
          {$else}
          ufLocalCases.CMA_Process.LastChangedDT:= NowDT 
          {$endif}
          aStartEdit:= ufLocalCases.CMA_IsDonorCase
          WriteLocalCaseAndFlush //update of original
          tCase.tSpawnCount:= STR(ufLocalCases.CMA_SpawnCount)
          WriteTempCaseAndUpdateCache
          ufLocalCases.ID:= SUBSTRING(ufLocalCases.ID,1,I)+aExtra
          IF aZeros=yes THEN
            ufLocalCases.ID:= ufLocalCases.ID+TOSTRING(ufLocalCases.CMA_SpawnCount+VAL(SpawnStartStr),'000')
          ELSE
            ufLocalCases.ID:= ufLocalCases.ID+STR(ufLocalCases.CMA_SpawnCount+VAL(SpawnStartStr))
          ENDIF  
          ufLocalCases.CMA_AllowSpawning:= EMPTY
          IF ufLocalCases.CMA_GroupType=gParent THEN
            ufLocalCases.CMA_GroupType:= gChild
          ENDIF   
          ufLocalCases.CMA_IsDonorCase:= EMPTY
          ufLocalCases.CMA_Process:= EMPTY
          ufLocalCases.CMA_Data:= EMPTY
          ufLocalCases.CMA_Appointment:= EMPTY
          {$ifdef UseDateTimeType}
          ufLocalCases.CMA_Process.CreatedDT:= SYSDATETIME
          {$else}
          ufLocalCases.CMA_Process.CreatedDT:= TIMETOSTR(SYSTIME,cDateTimeFormat)
          {$endif}
          ufLocalCases.CMA_Status:= 'Added' 
          ufLocalCases.CMA_CaseClosed:= EMPTY
          ufLocalCases.CMA_HappeningsStr:= EMPTY 
          ufLocalCases.CMA_HappeningsLbl:= EMPTY
          ufLocalCases.CMA_HappeningsCod:= EMPTY //added 4-8-2020
          {$ifdef UseDateTimeType}
          ufLocalCases.CMA_Process.LastChangedDT:= STRTODATETIME(NowDT,cDateTimeFormat) 
          {$else}
          ufLocalCases.CMA_Process.LastChangedDT:= NowDT 
          {$endif}
          ufLocalCases.LastChangedCI:= EMPTY
          ufLocalCases.LastChangedNote:= EMPTY
          ufLocalCases.CaseNote:= EMPTY
          ReplaceEntryOnName(ufLocalCases.CMA_ContactData,
            'MainSurveyID',tCase.tMainSurveyID,contactdatasep(1),contactDataSep(2))          
          ReplaceEntryOnName(ufLocalCases.CMA_ContactData,
            'ID',ufLocalCases.ID,contactdatasep(1),contactDataSep(2))          
          ReplaceEntryOnName(ufLocalCases.CMA_ContactData,
            'CaseNote','',contactdatasep(1),contactDataSep(2))          
          WriteLocalCaseAndFlush //write the spawned case
          AddToLog('New case created for '+tCase.tMainSurveyID+' with key '+ufLocalCases.ID)
          aCreated:= yes
        ENDIF  
      ENDIF  
    ENDIF 
    IF aCreated=yes THEN      
      InitNewTemporaryCaseFromLocalDatabase
      aLastChange:= NowDT
      WriteSettings
      IF aStartEdit=yes THEN
        IF iSurveySettings.Survey_StartInterviewAtSpawn=yes THEN
          StartInterviewAfterSpawn
        ELSE
          UpdateCaseEntry
        ENDIF  
      ENDIF
      CurrentTheSortValue:= tCase.TheSortValue
      tCase.GET(SECONDARY(secSort),CurrentTheSortValue)
    ENDIF 
  ENDIF   
ENDPROCEDURE

FUNCTION TranslateStatus: STRING
PARAMETERS pStatus: STRING
INSTRUCTIONS
  RESULT:= ''
  IF iSettings.sShowNotStartedTxt=yes THEN
    Result:= cNotStarted
  ENDIF  
  CASE pStatus OF
   'Added':           RESULT:= cAdded
   'Started':         RESULT:= cStarted
   'Interrupted':     RESULT:= cInterrupted
   'Completed':       RESULT:= cCompleted
   'Finalized':       RESULT:= cFinalized
   'Uploaded':        RESULT:= cUploaded
   'Reopened':        RESULT:= cReopened
   'InterruptedDone': RESULT:= cInterruptedDone
   'Done':            RESULT:= cDone
   'Closed':          RESULT:= cClosed
  ENDCASE
ENDFUNCTION 

FUNCTION ExtractValueForFieldFromList: STRING
PARAMETERS
  pValuePairs: OPEN
  pFieldName: STRING
AUXFIELDS
  aPosStart, aPosEnd: INTEGER
  aString: STRING
INSTRUCTIONS
  aPosStart:= POSITION(UPPERCASE(pFieldName+'='),UPPERCASE(pValuePairs))
  //check for fieldname. If present use it.
  IF aPosStart>0 THEN
    aPosEnd:= POSITION(',',pValuePairs,aPosStart)   
    IF aPosEnd=0 THEN aPosEnd:= LEN(pValuePairs)+1 ENDIF
    aString:= SUBSTRING(pValuePairs,aPosStart,aPosEnd-aPosStart)
    RESULT:= SUBSTRING(aString,POSITION('=',aString)+1,255)
  ELSE
    RESULT:= ''
  ENDIF  
ENDFUNCTION 

FUNCTION ExtractTextForDisplay: STRING
PARAMETERS
  pName: STRING
AUXFIELDS
  aPosStart, aPosEnd: INTEGER
  aString: STRING
INSTRUCTIONS
  aPosStart:= POSITION(UPPERCASE(GetCategoryName(ACTIVELANGUAGE))+'=',UPPERCASE(pName))
  //check for language. If present use it.
  IF aPosStart>0 THEN
    aPosEnd:= POSITION(',',pName,aPosStart)   
    IF aPosEnd=0 THEN aPosEnd:= LEN(pName)+1 ENDIF
    aString:= SUBSTRING(pName,aPosStart,aPosEnd-aPosStart)
    RESULT:= SUBSTRING(aString,POSITION('=',aString)+1,255)
  ELSE
    RESULT:= pName
  ENDIF  
ENDFUNCTION  

FUNCTION DetermineSurveyName: STRING
PARAMETERS 
  pSurveyDisplayName: STRING
AUXFIELDS 
  aSurveyName: STRING
INSTRUCTIONS
  aSurveyName:= pSurveyDisplayName
  IF aSurveyName='' THEN
    aSurveyName:= iSurveySettings.Survey_DisplayName
  ENDIF
  IF aSurveyName<>'' THEN
    RESULT:= ExtractTextForDisplay(aSurveyName)
  ELSE
    IF srvList.SetupFilename<>'' THEN
      RESULT:= Replace(ExtractFileName(srvList.SetupFilename),'.msux','')
    ELSE
      RESULT:= srvList.Name
    ENDIF  
    IF srvList.WaveName<>EMPTY THEN
      RESULT:= RESULT+' ('+srvList.WaveName+')'
    ENDIF
  ENDIF
ENDFUNCTION

PROCEDURE FillCustomColls
auxfields
  Index: integer
  aValue: STRING
  aName: STRING
INSTRUCTIONS
  IF iSurveySettings.Survey_CustomColCount<>EMPTY THEN
    FOR Index:= 1 TO iSurveySettings.Survey_CustomColCount DO
      CASE iSurveySettings.Survey_CustomCol[Index].Origin OF
        oCustomData: aValue:= GetEntryOnName(tCase.tCustomUse,iSurveySettings.Survey_CustomCol[Index].FieldName,customDataSep(1),customDataSep(2))  
        oContactData: aValue:= GetEntryOnName(tCase.tContactData,iSurveySettings.Survey_CustomCol[Index].FieldName,contactdatasep(1),contactDataSep(2))
      ENDCASE
      tCase.PUTVALUE('tCustomCol'+STR(Index),aValue)
    ENDDO  
  ELSE
    FOR Index:= 1 TO iSettings.sCustomColCount DO
      CASE iSettings.sCustomCol[Index].Origin OF
        oCustomData: aValue:= GetEntryOnName(tCase.tCustomUse,iSettings.sCustomCol[Index].FieldName,customDataSep(1),customDataSep(2))  
        oContactData: aValue:= GetEntryOnName(tCase.tContactData,iSettings.sCustomCol[Index].FieldName,contactDataSep(1),contactDataSep(2))
      ENDCASE
      tCase.PUTVALUE('tCustomCol'+STR(Index),aValue)
    ENDDO  
  ENDIF
ENDPROCEDURE

FUNCTION GetCustomFilterValue: STRING
INSTRUCTIONS
  CASE GetCustomFieldFilterOrigin OF
  1 {oContactData}: RESULT:= GetEntryOnName(tMainCase.tContactData,GetCustomFieldFilterName,contactdatasep(1),contactDataSep(2))
  2 {oCustomData}:  RESULT:= GetEntryOnName(tMainCase.tCustomUse,GetCustomFieldFilterName,customDataSep(1),customDataSep(2))  
  ENDCASE
ENDFUNCTION

FUNCTION GetCustomFilterValueLoc: STRING
INSTRUCTIONS
  CASE GetCustomFieldFilterOrigin OF
  1 {oContactData}: RESULT:= GetEntryOnName(ufLocalCases.CMA_ContactData,GetCustomFieldFilterName,contactDataSep(1),contactDataSep(2))
  2 {oCustomData}:  RESULT:= GetEntryOnName(ufLocalCases.CMA_CustomUse,GetCustomFieldFilterName,customDataSep(1),customDataSep(2)) 
  ENDCASE
ENDFUNCTION

PROCEDURE DetermineCustomFilterValues
AUXFIELDS
   Index: INTEGER
   aValue: STRING
INSTRUCTIONS
  FOR Index:= 1 to cCFVUpper DO 
    CustomFV[Index]:= '' 
  ENDDO
  //Process all records in tCase to extract filter value
  tMainCase.RESET
  tCustomFilter.ERASE
  IF tMainCase.RECORDCOUNT>0 THEN
    REPEAT
      tMainCase.READNEXT
      GetSurveySettings(tMainCase.tMainSurveyID)
      aValue:= GetCustomFilterValue
      IF aValue<>EMPTY THEN
        tCustomFilter.cCustomV:= aValue
        tCustomFilter.WRITE
      ENDIF  
    UNTIL tMainCase.LASTRECORD
  ENDIF 
  tMainCase.RESET 
  tCustomFilter.RESET
  Index:= 0
  auxCustomFilterCount:= 0
  IF tCustomFilter.FORMCOUNT>0 THEN
    REPEAT
      tCustomFilter.READNEXT
      index:= index+1
      CustomFV[index]:= tCustomFilter.cCustomV
    UNTIL tCustomFilter.LASTRECORD OR Index=cCFVUpper
    auxCustomFilterCount:= Index
  ENDIF 
  auxCustomFilter:= cfvAll   
ENDPROCEDURE

PROCEDURE InitNewTemporaryCaseFromLocalDatabase
AUXFIELDS
  aHappeningsStr: STRING
INSTRUCTIONS
  tCase.INITRECORD
  IF srvList.Id<>ufLocalCases.MainSurveyID THEN
    srvList.GET(ufLocalCases.MainSurveyID)
    GetSurveySettings(ufLocalCases.MainSurveyID)
  ENDIF  
  tCase.tSurveyName:= DetermineSurveyName(ufLocalCases.SurveyDisplayName)
  tCase.tIdentifier:= ufLocalCases.ID
  tCase.tCaseStatus:= TranslateStatus(GetDisplayStatus)
  tCase.tGroupStatus:= TranslateStatus(GetGroupDisplayStatus)
  tCase.tGroupSummary:= ufLocalCases.CMA_GroupSummary
  IF auxParentChildView=EMPTY THEN //on main cases screen...
    IF ufLocalCases.CMA_GroupType=gParent AND ufLocalCases.CMA_AllowSpawning<>yes THEN
      tCase.tStatus:= TranslateStatus(GetGroupDisplayStatus)
    ELSE  
      tCase.tStatus:= TranslateStatus(GetDisplayStatus)
    ENDIF  
    tCase.tGroupSort:= '*'
  ELSE
    tCase.tStatus:= TranslateStatus(GetDisplayStatus)
    tCase.tGroupSort:= ufLocalCases.CMA_GroupSort
  ENDIF
  tCase.tLastResult:= EMPTY
  IF (auxParentChildView=EMPTY AND 
      (ufLocalCases.CMA_GroupType=EMPTY OR 
      (ufLocalCases.CMA_GroupType=gParent AND iSettings.sHideResultOfParent=EMPTY))) OR 
     (auxParentChildView=Yes)
  THEN
    IF ufLocalCases.CMA_HappeningsCod<>EMPTY THEN
      IF ShowResult IN [rStrOnly,rBoth] THEN
        SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(ufLocalCases.CMA_AttemptsGUID))
        aHappeningsStr:= GetCategoryText([[attempts]],'Happenings',GetCategoryName(ACTIVELANGUAGE),VAL(ufLocalCases.CMA_HappeningsCod))
      ENDIF  
      CASE ShowResult OF
        rCodeOnly: tCase.tLastResult:= ufLocalCases.CMA_HappeningsCod
        rStrOnly:  tCase.tLastResult:= aHappeningsStr
        rBoth:     tCase.tLastResult:= ufLocalCases.CMA_HappeningsCod+':'+aHappeningsStr
        rLabOnly:  tCase.tLastResult:= ufLocalCases.CMA_HappeningsLbl
        rCodeLab:  tCase.tLastResult:= ufLocalCases.CMA_HappeningsCod+':'+ufLocalCases.CMA_HappeningsLbl
      ENDCASE
    ENDIF
  ENDIF
  IF ufLocalCases.CMA_Appointment.AppDate >= SYSDATE THEN
    IF iSettings.sShowDateFormat<>EMPTY THEN
      tCase.tAppointment:= DATETOSTR(ufLocalCases.CMA_Appointment.AppDate,iSettings.sShowDateFormat)+', '+TIMETOSTR(ufLocalCases.CMA_Appointment.AppTime)
    ELSE
      tCase.tAppointment:= DATETOSTR(ufLocalCases.CMA_Appointment.AppDate)+', '+TIMETOSTR(ufLocalCases.CMA_Appointment.AppTime)
    ENDIF
    tCase.tAppForToday:= EMPTY
    IF ufLocalCases.CMA_Appointment.AppDate=SYSDATE THEN tCase.tAppForToday:= yes ENDIF
    IF iSettings.sTodayAppointmentPreFix<>EMPTY THEN  
      IF tCase.tAppForToday=yes THEN
        tCase.tAppointment:= iSettings.sTodayAppointmentPreFix+tCase.tAppointment
      ENDIF  
    ENDIF  
  ENDIF
  tCase.tMainSurveyID:= ufLocalCases.MainSurveyID
  tCase.tContactData:= ufLocalCases.CMA_ContactData
  tCase.tContactInfoShort:= ufLocalCases.ContactInfoShort
  tCase.tCaseNote:= ufLocalCases.CaseNote
  {$IFDEF UseDateTimeType}
  tCase.tLastAttempt:= DateForDisplay(DATETOSTR(ufLocalCases.CMA_Process.LastAttempt.When,cDateTimeFormat))
  {$ELSE}
  tCase.tLastAttempt:= DateForDisplay(ufLocalCases.CMA_Process.LastAttempt.When)
  {$ENDIF}
  tCase.tFinal:= ufLocalCases.CMA_CaseClosed
  tCase.tAllowSpawning:= ufLocalCases.CMA_AllowSpawning
  tCase.tIsDonorCase:= ufLocalCases.CMA_IsDonorCase
  tCase.tStartDate:= ufLocalCases.CMA_StartDate 
  tCase.tEndDate:= ufLocalCases.CMA_EndDate 
  tCase.tGroupType:= ufLocalCases.CMA_GroupType
  tCase.tGroupID:= ufLocalCases.CMA_GroupID  
  tCase.tCustomUse:= ufLocalCases.CMA_CustomUse
  IF tCase.tGroupSort=EMPTY THEN 
    IF tCase.tGroupType=Parent THEN 
      tCase.tGroupSort:= '1' 
    ELSEIF tCase.tGroupType=Child THEN 
      tCase.tGroupSort:= '2' 
    ELSE 
      tCase.tGroupSort:= '3' 
    ENDIF
  ENDIF  
  IF ufLocalCases.CMA_SpawnCount>0 THEN
    tCase.tSpawnCount:= STR(ufLocalCases.CMA_SpawnCount)
  ELSE
    tCase.tSpawnCount:= EMPTY
  ENDIF  
  IF ufLocalCases.CMA_Data.AttemptsCount>0 THEN
    tCase.tAttemptsCount:= STR(ufLocalCases.CMA_Data.AttemptsCount)
  ELSE
    tCase.tAttemptsCount:= EMPTY
  ENDIF  
  tCase.tAttemptsRoute:= ufLocalCases.CMA_AttemptsRoute
  tCase.tGeoLocation:= ufLocalCases.CMA_GeoLocation
  IF ufLocalCases.CMA_ContactImage<>EMPTY THEN tCase.tHasImage:= yes ENDIF
  tCase.tAttemptsGUID:= ufLocalCases.CMA_AttemptsGUID
  tCase.tDetailsTemplate:= ufLocalCases.CMA_DetailsTemplate
  tCase.tContactInfoGUID:= ufLocalCases.CMA_ContactInfoGUID
  IF ufLocalCases.CMA_Data.Survey<>EMPTY THEN tCase.tHasInterview:= yes ENDIF
  FillCustomColls
  IF auxParentChildView=EMPTY THEN
    IF auxSortOn<>EMPTY THEN
      tCase.TheSortValue:= GetValueForSort(ORD(auxSortOn))
    ELSE
      tCase.TheSortValue:= tCase.tGroupSort+tCase.tContactInfoShort+tCase.tMainSurveyID+tCase.tIdentifier  
    ENDIF
  ELSE
    IF auxSortGrpOn<>EMPTY THEN
      GetSurveySettings(CurrentGroupGUID)
      tCase.TheSortValue:= GetValueForSortGrp(ORD(auxSortGrpOn))
    ELSE
      tCase.TheSortValue:= tCase.tGroupSort+tCase.tContactInfoShort+tCase.tMainSurveyID+tCase.tIdentifier  
    ENDIF
  ENDIF  
  tCase.tActiveLanguage:= CurrentLanguage
  WriteTempCaseAndUpdateCache
ENDPROCEDURE

PROCEDURE InitTemporaryCaseFromLocalDatabase
AUXFIELDS
  aHappeningsStr: STRING
INSTRUCTIONS
  IF auxParentChildView=EMPTY THEN 
    tCaseCache.Get(ufLocalCases.MainSurveyID,ufLocalCases.ID)
    IF tCaseCache.RESULTOK AND tCaseCache.tActiveLanguage=CurrentLanguage THEN
      tCase:= tCaseCache
      IF auxParentChildView=EMPTY THEN
        IF auxSortOn<>EMPTY THEN
          tCase.TheSortValue:= GetValueForSort(ORD(auxSortOn))
        ELSE
          tCase.TheSortValue:= tCase.tGroupSort+tCase.tContactInfoShort+tCase.tMainSurveyID+tCase.tIdentifier  
        ENDIF
      ELSE
        IF auxSortGrpOn<>EMPTY THEN
          GetSurveySettings(CurrentGroupGUID)
          tCase.TheSortValue:= GetValueForSortGrp(ORD(auxSortGrpOn))
        ELSE
          tCase.TheSortValue:= tCase.tGroupSort+tCase.tContactInfoShort+tCase.tMainSurveyID+tCase.tIdentifier  
        ENDIF
      ENDIF  
      WriteTempCaseAndUpdateCache
    ELSE    
      InitNewTemporaryCaseFromLocalDatabase     
    ENDIF    
  ELSE    
    InitNewTemporaryCaseFromLocalDatabase     
  ENDIF    
ENDPROCEDURE

PROCEDURE CheckIfSelectedSurveyStillPresent
PARAMETERS
  TRANSIT pSurvey: STRING
AUXFIELDS 
  I: INTEGER 
  Present: (yes),EMPTY
INSTRUCTIONS
  IF pSurvey<>'*' THEN
    //check if still in list...
    FOR I:= 1 TO srvNamesCount DO 
      IF srvID[I]=pSurvey THEN
        Present:= yes
        EXITFOR
      ENDIF
    ENDDO    
    IF Present=EMPTY THEN
      auxWhatSurveyToShowGUID:= '*'
      pSurvey:= '*'
      SelectedSurvey:= ''
      auxWhatSurveyToShow:= srvAll
    ENDIF
  ENDIF
ENDPROCEDURE  

PROCEDURE UpdateTemporaryCasesFile
PARAMETERS
  pWhichCases: INTEGER //pvAll=0, pvNoncompleted=1, pvCompleted=2, Group = 3
  pWhichSurvey: STRING //EMPTY = All surveys
AUXFIELDS 
  index: INTEGER
  continue: (yes)
  res: INTEGER
  recfilter: OPEN
  defFilter: OPEN
  ShowC: (yes), EMPTY
  aSearchFilter: STRING
  NrOfCases: INTEGER
  aWhichSurvey: STRING
INSTRUCTIONS
  //to handle re-location selected record
  IF auxIsNonWindows=Yes THEN
    DISPLAY('',HOURGLASS)
  ENDIF  
  AddToLog('UpdateTemporaryCasesFile - '+str(pWhichCases)+' - '+pWhichSurvey+ ' - '+ str(auxParentChildView))
  res := GetListOfSurveysX(1)
  auxWhatSurveyToShowGUID:= '*'
  aWhichSurvey:= pWhichSurvey
  CheckIfSelectedSurveyStillPresent(aWhichSurvey)
  ComputePortraitHeader
  IF aWhichSurvey<>'*' THEN
    auxWhatSurveyToShowGUID:= aWhichSurvey
    //check if this survey is still installed. Could have been removed because cases have been transferred
    srvList.GET(auxWhatSurveyToShowGUID)
    auxWhatSurveyToShowGUID:= srvList.Id //empty when survey not found...
    if auxWhatSurveyToShowGUID='' THEN auxWhatSurveyToShowGUID:= '*' ENDIF
  ENDIF
  auxFieldFilter:= GetFieldFilter(aWhichSurvey,auxParentChildView)
  auxFieldFilterWidths:= GetFieldWidths(auxFieldFilter,auxWhatSurveyToShowGUID)
  auxFieldFilterTitles:= GetFieldTitles(auxFieldFilter,auxWhatSurveyToShowGUID)
  PrepareSort(auxWhatSurveyToShowGUID)
  IF auxWhatSurveyToShowGUID='*' OR auxParentChildView<>EMPTY THEN
    recfilter:= ''
  ELSE  
    recfilter:= 'MainSurveyID=\''+auxWhatSurveyToShowGUID+'\'' 
  ENDIF
  IF auxParentChildView=EMPTY THEN
    SelectedCasesToShow:= pWhichCases
    CASE pWhichCases of
      1: If recfilter<>'' THEN recfilter:= recfilter+' AND ' ENDIF 
         recfilter:= recfilter+ '(((CMA_CaseClosed IS NULL) AND (CMA_GroupType IS NULL)) OR ((CMA_GroupType=1) AND '+ 
                  '((CMA_GroupStatus IS NULL) OR ((CMA_GroupStatus IS NOT NULL) AND 
                     ((CMA_GroupStatus <> \'Done\') AND (CMA_GroupStatus <> \'Closed\'))))))' 
      2: If recfilter<>'' THEN recfilter:= recfilter+' AND ' ENDIF 
         recfilter:= recfilter+ '((CMA_CaseClosed=1 AND CMA_GroupType IS NULL) OR (CMA_GroupType=1 AND 
                     ((CMA_GroupStatus=\'Done\') OR (CMA_GroupStatus=\'Closed\'))))'  
    ENDCASE    
  ENDIF
  IF auxUseSearchButton=yes THEN
    aSearchFilter:= auxConfirmedFilter
  ELSE
    aSearchFilter:= auxFilter
  ENDIF
  IF auxParentChildView=yes THEN 
    If recfilter<>'' THEN recfilter:= recfilter+' AND ' ENDIF recfilter:= recfilter+'CMA_GroupID = \''+CurrentGroupID+'\''  
  ELSEIF aSearchFilter<>'' THEN
    IF recFilter<>'' THEN
      recFilter:= recfilter +' AND ('
    ELSE   
      recFilter:= '('
    ENDIF
    IF iSettings.sSearchCount>0 THEN
      FOR Index:= 1 TO iSettings.sSearchCount DO
        defFilter:= '('+iSettings.sSearchName[Index]+' like \'%'+REPLACE(aSearchFilter,'\'','\'\'')+'%\')'
        IF Index>1 THEN defFilter:= ' OR '+defFilter ENDIF
        recFilter:= recFilter+ defFilter
      ENDDO
      recFilter:= recFilter+')'
    ELSE  
      recFilter:= recFilter+'ContactInfoShort like \'%'+REPLACE(aSearchFilter,'\'','\'\'')+'%\' OR ID like \'%'+REPLACE(aSearchFilter,'\'','\'\'')+'%\')'
    ENDIF  
  ENDIF
  ufLocalCases.SETRECORDFILTER(recfilter)
  NrOfCases:= ufLocalCases.FORMCOUNT
  AddToLog('Record filter="'+recfilter+'" Count='+str(NrOfCases))
  ufLocalCases.RESET
  IF auxParentChildView=yes THEN 
    tGroupCase.ERASE
    tGroupCase.INITRECORD
    tCase.INITRECORD
  ELSE
    tMainCase.ERASE
    tMainCase.INITRECORD
    tCase.INITRECORD
  ENDIF  
  auxStatus:= EMPTY
  auxGroupStatus:= EMPTY
  auxContactData:= EMPTY
  auxLastAttempt:= EMPTY
  auxCaseNote:= EMPTY
  auxCurrentSurvey:= EMPTY
  auxFinal:= EMPTY
  auxIsDonorCase:= EMPTY
  auxSpawnAllowed:= EMPTY
  auxHasCustomFilter:= EMPTY
  IF auxParentChildView=EMPTY AND GetCustomFieldFilterName<>'' THEN
    auxHasCustomFilter:= yes
    auxCustomFilterTxt:= ExtractTextForDisplay(GetCustomFieldFilterTxt)
  ENDIF
  FOR index:= 1 TO ufLocalCases.FORMCOUNT DO
    ufLocalCases.READNEXT
    ShowC:= yes
    IF iSettings.sUseStartDateInFilter=yes THEN
      IF ufLocalCases.CMA_StartDate<>EMPTY AND ufLocalCases.CMA_StartDate > SysDate+iSettings.sDaysToShowBefore THEN
        ShowC:= EMPTY
      ENDIF
    ENDIF    
    IF ShowC=yes AND iSettings.sUseEndDateInFilter=yes THEN
      IF ufLocalCases.CMA_EndDate<>EMPTY AND ufLocalCases.CMA_EndDate + iSettings.sDaysToShowAfter + 1 < SysDate THEN
        ShowC:= EMPTY
      ENDIF
    ENDIF  
    IF auxParentChildView=EMPTY AND ufLocalCases.CMA_GroupType=2 {child} THEN
      ShowC:= EMPTY
    ELSEIF auxParentChildView=yes AND ufLocalCases.CMA_GroupType=EMPTY THEN
      ShowC:= EMPTY   
    ENDIF
    IF auxCustomFilterValue<>'' THEN
      GetSurveySettings(ufLocalCases.MainSurveyID)
      IF auxCustomFilterValue<>GetCustomFilterValueLoc THEN ShowC:= EMPTY ENDIF
    ENDIF
    IF ShowC=yes AND LOWERCASE(ufLocalCases.CMA_ForWhom)=LOWERCASE(USERNAME) THEN
      InitTemporaryCaseFromLocalDatabase
    ENDIF  
  ENDDO
  IF auxHasCustomFilter=yes THEN
    IF auxCustomFilterValue='' THEN
      DetermineCustomFilterValues
    ENDIF  
  ENDIF  
  ufLocalCases.SETRECORDFILTER('')
  IF NrOfCases=0 THEN 
    UpdateCasesScreen 
  ELSE 
    PositionOnCurrentRecord
  ENDIF
  CLEARDISPLAY
ENDPROCEDURE //UpdateTemporaryCasesFile 

PROCEDURE SwitchToGroupView
AUXFIELDS
  aKey: STRING
  aGUID: STRING
  aWhatSurvey: STRING
  aCI: STRING
  aTitle: STRING
  aFieldFilter,aWidths,aTitles: OPEN
INSTRUCTIONS
  AddToLog('Start group dialog for '+CurrentCaseGUID+' - '+CurrentCaseID)
  auxParentChildView:= yes
  aFieldFilter:= auxFieldFilter
  aWidths:= auxFieldFilterWidths
  aTitles:= auxFieldFilterTitles
  aKey:= CurrentCaseID
  aGUID:= CurrentCaseGUID
  aWhatSurvey:= auxWhatSurveyToShowGUID
  CurrentGroupGUID:= CurrentCaseGUID
  aCI:= CurrentContactInfoShort
  CurrentContactInfoShort:= ''
  CurrentCaseGUID:= ''
  CurrentCaseID:= ''
  CurrentTheSortGrpValue:= ''
  UpdateTemporaryCasesFile(3,'*')
  GetSurveySettings(CurrentGroupGUID)
  aTitle:= ExtractTextForDisplay(iSurveySettings.Survey_GroupTitle)
  auxShowGroupDoneBtn:= iSurveySettings.Survey_GroupDoneBtn
  IF auxShowGroupDoneBtn=yes THEN 
    auxParentDoneValues:= ','+iSurveySettings.Survey_DoneValues+','
    DetermineGroupStatus(CurrentGroupID,0)
  ENDIF
  auxShowGroupAddAttemptBtn:= iSurveySettings.Survey_AddAttemptBtnOnGroupScr
  auxManualAttemptWhenIntStarted:= iSurveySettings.Survey_ManualAttemptWhenIntStarted
  IF aTitle<>'' THEN
    dGroup(aTitle)
  ELSE  
    dGroup
  ENDIF  
  CurrentGroupGUID:= EMPTY
  CurrentContactInfoShort:= aCI
  CurrentCaseGUID:= aGUID
  CurrentCaseID:= aKey
  auxFieldFilter:= aFieldFilter
  auxFieldFilterWidths:= aWidths
  auxFieldFilterTitles:= aTitles
  auxParentChildView:= EMPTY
  auxWhatSurveyToShowGUID:= aWhatSurvey
  ufLocalCases.GET(CurrentCaseGUID,CurrentCaseID)
  IF NOT ufLocalCases.RESULTOK THEN
    tMainCase.GET(PRIMARY,CurrentCaseGUID,CurrentCaseID)
    tMainCase.DELETE
  ELSE
    InitNewTemporaryCaseFromLocalDatabase
    PositionOnCurrentRecord
  ENDIF
  AddToLog('End group dialog')
ENDPROCEDURE  

FUNCTION GetValueForSort: STRING
PARAMETERS pKeyNr: INTEGER
AUXFIELDS
  Index: INTEGER
  L: INTEGER
  aSurvey: STRING
INSTRUCTIONS
  RESULT:= ''
  IF SelectedSurvey<>'' THEN
    IF iSurveySettings.Survey_DefSort[pKeyNr].FieldCount<>EMPTY THEN
      FOR Index:= 1 TO iSurveySettings.Survey_DefSort[pKeyNr].FieldCount DO
        RESULT:= RESULT+tCase.GETVALUE(iSurveySettings.Survey_DefSort[pKeyNr].FieldName[Index],UNFORMATTED)
      ENDDO 
    ELSE
      FOR Index:= 1 TO iSettings.sDefSort[pKeyNr].FieldCount DO
        RESULT:= RESULT+tCase.GETVALUE(iSettings.sDefSort[pKeyNr].FieldName[Index],UNFORMATTED)
      ENDDO 
    ENDIF  
  ELSE 
    FOR Index:= 1 TO iSettings.sDefSort[pKeyNr].FieldCount DO
      RESULT:= RESULT+tCase.GETVALUE(iSettings.sDefSort[pKeyNr].FieldName[Index],UNFORMATTED)
    ENDDO 
  ENDIF  
  L:= LEN(tCase.tMainSurveyID+tCase.tIdentifier)
  RESULT:= RESULT+
           FILL(' ',255-LEN(RESULT)-L)+
           tCase.tMainSurveyID+tCase.tIdentifier 
ENDFUNCTION

FUNCTION GetValueForSortGrp: STRING
PARAMETERS pKeyNr: INTEGER
AUXFIELDS
  Index: INTEGER
  L: INTEGER
INSTRUCTIONS
  RESULT:= STR(tCase.tGroupType) //''
  IF iSurveySettings.Survey_DefSortGrp[pKeyNr].FieldCount<>EMPTY THEN
    FOR Index:= 1 TO iSurveySettings.Survey_DefSortGrp[pKeyNr].FieldCount DO
      RESULT:= RESULT+tCase.GETVALUE(iSurveySettings.Survey_DefSortGrp[pKeyNr].FieldName[Index],UNFORMATTED)
    ENDDO 
  ELSE
    FOR Index:= 1 TO iSettings.sDefSortGrp[pKeyNr].FieldCount DO
      RESULT:= RESULT+tCase.GETVALUE(iSettings.sDefSortGrp[pKeyNr].FieldName[Index],UNFORMATTED)
    ENDDO 
  ENDIF  
  L:= LEN(tCase.tGroupSort+tCase.tMainSurveyID+tCase.tIdentifier)
  RESULT:= RESULT+
           FILL(' ',255-LEN(RESULT)-L)+
           tCase.tGroupSort+tCase.tMainSurveyID+tCase.tIdentifier 
ENDFUNCTION

PROCEDURE SortCases
INSTRUCTIONS
  IF tMainCase.FORMCOUNT>0 THEN
    AddToLog('Sort cases '+ToString(auxSortOn))
    SelectedSortOn:= ORD(auxSortOn)
    tMainCase.SETREADKEY(PRIMARY)
    tMainCase.RESET
    REPEAT
      tMainCase.READNEXT
      tCase:= tMainCase
      tCase.TheSortValue:= GetValueForSort(ORD(auxSortOn))
      WriteTempCaseAndUpdateCache
    UNTIL tMainCase.LASTRECORD   
    tMainCase.SETREADKEY(SECONDARY,secSort)
    tMainCase.RESET
    AddToLog('after sort')
    tMainCase.INITRECORD
  ENDIF
ENDPROCEDURE

PROCEDURE SortCasesGrp
INSTRUCTIONS
  IF tGroupCase.FORMCOUNT>0 THEN
    GetSurveySettings(CurrentGroupGUID)
    AddToLog('Sort cases grp '+ToString(auxSortGrpOn))
    SelectedSortGrpOn:= ORD(auxSortGrpOn)
    tGroupCase.SETREADKEY(PRIMARY)
    tGroupCase.RESET
    REPEAT
      tGroupCase.READNEXT
      tCase:= tGroupCase
      tCase.TheSortValue:= GetValueForSortGrp(ORD(auxSortGrpOn))
      WriteTempCaseAndUpdateCache
    UNTIL tGroupCase.LASTRECORD   
    tGroupCase.SETREADKEY(SECONDARY,secSort)
    tGroupCase.RESET
    AddToLog('after sort grp')
    tGroupCase.INITRECORD
  ENDIF
ENDPROCEDURE

PROCEDURE PrepareSort
PARAMETERS
  pWhichSurvey: STRING
AUXFIELDS  
  i: INTEGER
  aSurvey: STRING
INSTRUCTIONS
  IF pWhichSurvey<>'*' THEN
    aSurvey:= pWhichSurvey
  ENDIF
  IF aSurvey<>EMPTY and iSurveySettings.Survey_DefSortCount<>EMPTY THEN
    IF iSurveySettings.Survey_DefSortCount>0 THEN
      auxSortText:= EMPTY
      FOR i:= 1 TO iSurveySettings.Survey_DefSortCount DO
        auxSortText[i]:= ExtractTextForDisplay(iSurveySettings.Survey_DefSort[i].Title)
      ENDDO  
      auxSortOn:= SelectedSortOn
      IF auxSortOn=EMPTY OR auxSortOn>iSurveySettings.Survey_DefSortCount THEN auxSortOn:= 1 ENDIF
      SelectedSortOn:= ORD(auxSortOn)
    ENDIF  
    IF iSurveySettings.Survey_DefSortCount>1 THEN auxAllowSort:= yes ENDIF  
  ELSE
    IF iSettings.sDefSortCount>0 THEN
      auxSortText:= EMPTY
      FOR i:= 1 TO iSettings.sDefSortCount DO
        auxSortText[i]:= ExtractTextForDisplay(iSettings.sDefSort[i].Title)
      ENDDO  
      auxSortOn:= SelectedSortOn
      IF auxSortOn=EMPTY OR auxSortOn>iSettings.sDefSortCount THEN auxSortOn:= 1 ENDIF
      SelectedSortOn:= ORD(auxSortOn)
    ENDIF
    IF iSettings.sDefSortCount>1 THEN auxAllowSort:= yes ENDIF
  ENDIF
  IF aSurvey<>EMPTY and iSurveySettings.Survey_DefSortGrpCount<>EMPTY THEN
    IF iSurveySettings.Survey_DefSortGrpCount>0 THEN
      auxSortGrpText:= EMPTY
      FOR i:= 1 TO iSurveySettings.Survey_DefSortGrpCount DO
        auxSortGrpText[i]:= ExtractTextForDisplay(iSurveySettings.Survey_DefSortGrp[i].Title)
      ENDDO  
      auxSortGrpOn:= SelectedSortGrpOn
      IF auxSortGrpOn=EMPTY OR auxSortGrpOn>iSurveySettings.Survey_DefSortGrpCount THEN auxSortGrpOn:= 1 ENDIF
      SelectedSortGrpOn:= ORD(auxSortGrpOn)
    ENDIF
    IF iSettings.sDefSortGrpCount>1 THEN auxAllowGrpSort:= yes ENDIF
  ELSE
    IF iSettings.sDefSortGrpCount>0 THEN
      auxSortGrpText:= EMPTY
      FOR i:= 1 TO iSettings.sDefSortGrpCount DO
        auxSortGrpText[i]:= ExtractTextForDisplay(iSettings.sDefSortGrp[i].Title)
      ENDDO  
      auxSortGrpOn:= SelectedSortGrpOn
      IF auxSortGrpOn=EMPTY OR auxSortGrpOn>iSettings.sDefSortGrpCount THEN auxSortGrpOn:= 1 ENDIF
      SelectedSortGrpOn:= ORD(auxSortGrpOn)
    ENDIF
    IF iSettings.sDefSortGrpCount>1 THEN auxAllowGrpSort:= yes ENDIF
  ENDIF    
ENDPROCEDURE

PROCEDURE ProcessCasesAndStartDialog
AUXFIELDS 
  index: INTEGER
  res: INTEGER
  aWhatToShow: STRING
INSTRUCTIONS
  AddToLog('Cases dialog')
  IF srvNamesCount=1 THEN
    auxWhatSurveyToShow:= srv1 
  ELSE
    auxWhatSurveyToShow:= srvAll 
  ENDIF  
  IF SelectedSurvey<>'' and SelectedSurvey<>'*' THEN
    auxWhatSurveyToShow:= DetermineIndexOf(SelectedSurvey)
    aWhatToShow:= SelectedSurvey
  ELSE
    IF srvNamesCount=1 THEN
      auxWhatSurveyToShow:= srv1 
      aWhatToShow:= srvID[1]  
    ELSE
      auxWhatSurveyToShow:= srvAll 
      aWhatToShow:= '*'  
    ENDIF
  ENDIF
  UpdateTemporaryCasesFile(ord(auxWhatCasesToShow),aWhatToShow)
  IF NOT srvList.USERISAUTHENTICATED AND NOT NETWORKCONNECTIVITYTYPE IN ['Unknown', 'Offline'] THEN
    DisplayOnScreen(msgNotAuthenticatedUser,1)
  ENDIF
  dCases //main screen with overview of cases
  AddToLog('Quit cases dialog')
ENDPROCEDURE

PROCEDURE WriteSettings
AUXFIELDS x: INTEGER iRes: INTEGER
INSTRUCTIONS
  iRes:= oSettings.OPEN(SetupPath+cmaLocSettings)
  IF iRes=0 THEN
    AddToLog('Write settings')
    oSettings:= iSettings
   //update the fields that keep track of a value that can be changed in CMA  
    oSettings.sSelectedLanguage:= GetCategoryName(ACTIVELANGUAGE)
    oSettings.sLastLogUpload:= LastLogUpload
    oSettings.sLastChange:= aLastChange
    oSettings.sLastSync:= aLastSync
    AddToLog('Last sync: '+oSettings.sLastSync)
    oSettings.sSelectedStyle:= SelectedStyle
    oSettings.sSelectedSortOn:= SelectedSortOn
    oSettings.sSelectedSortGrpOn:= SelectedSortGrpOn
    oSettings.sSelectedSurvey:= SelectedSurvey  
    oSettings.sSelectedCasesToShow:= SelectedCasesToShow
    oSettings.WRITE
    oSettings.RELEASE
  ELSE
    AddToLog('Write settings failed, Error: '+STR(iRes))  
  ENDIF
ENDPROCEDURE

PROCEDURE HandleEverything
AUXFIELDS
  res,index: INTEGER
INSTRUCTIONS
  IF NETWORKCONNECTIVITYTYPE IN ['Unknown', 'Offline'] THEN
    //No login possible at this moment. Local actions only
    aConnected:= No
    AddToLog('Not connected')
  ELSE
    IF SrvList.USERISAUTHENTICATED THEN
      aConnected:= Yes
      AddToLog('Connected and authenticated')
    ELSE
      aConnected:= No
      AddToLog('Connected but not authenticated')
    ENDIF  
  ENDIF
  InitCases(ORD(aConnected))    
  IF aConnected=Yes THEN
    Sync(1)
  ELSE
    RefreshDependenciesList
    FillSurveyNamesArray    
  ENDIF
  IF initOk=2 THEN
    ProcessCasesAndStartDialog
  ELSE
    DisplayOnScreen(msgStartFailed,1)
  ENDIF  
ENDPROCEDURE

FUNCTION RefreshLocalDatabase: INTEGER
PARAMETERS
  pMetaName: STRING
  pFilePath: STRING
  pFileName: STRING
  pAlsoInCMAFolder: INTEGER
AUXFIELDS
  Checksum_Installed: STRING
  CheckSum_Old, CheckSum_New: STRING  
  FA_New: STRING
  x,dRes, Ind: INTEGER
  aMetaName, aMetaNameOri: STRING
  Okay: INTEGER
  zipCmd: STRING
  aFolder: STRING
INSTRUCTIONS
  RESULT:= 0
  Okay:= 1
  aMetaName:= pFilePath+pMetaName+'.bmix'
  aMetaNameOri:= pFilePath+'ori_'+pMetaName+'.bmix'
  IF NOT FileExists(aMetaNameOri) THEN
    dRes:= COPYFILE(aMetaName,aMetaNameOri)
  ELSEIF GetFileDateTime(aMetaName)<>GetFileDateTime(aMetaNameOri) THEN
    dRes:= TopicMeta.LOADDATAMODEL(aMetaName) 
    CheckSum_Installed:= [[TopicMeta.DataChecksum]]
    IF pAlsoInCMAFolder=1 THEN //applies only to lancher datamodel which is part of cma package 
      //Also check on the installed checksum for this survey. cma_+pmetaname. It needs to be same as in CMA installation
      //If installed survey checksum is not equal to the checksum in CMA folder then exit CMA with message that an r-install is needed of survey
      dRes:= TopicMeta.LOADDATAMODEL(SetupPath+pMetaName+'.bmix')
      CheckSum_New:= [[TopicMeta.DataChecksum]]
      IF CheckSum_Installed<>CheckSum_New THEN 
        Okay:= 0
        AddToLog('Re-install of '+pmetaname+' needed')
        RESULT:= 1
      ENDIF
    ENDIF
    IF Okay=1 THEN
      AddToLog('Check Refresh')
      dRes:= TopicMeta.LOADDATAMODEL(aMetaNameOri)
      CheckSum_Old:= [[TopicMeta.DataChecksum]]
      IF CheckSum_Old<>CheckSum_Installed THEN
        AddToLog('Start refreshing of file '+pFileName)
        //export to XML, erase file, import XML
        dRes:= uTopic.OPEN(pFileName)
        dRes:= oTopic.OPEN(pFileName+'.xml')
        FOR Ind:= 1 TO uTopic.FORMCOUNT DO
          uTopic.READNEXT
          oTopic:= uTopic
          oTopic.WRITE
        ENDDO 
        uTopic.RELEASE
        oTopic.RELEASE
        aFolder:= ExtractFilePath(pFileName)
        aFolder:= SUBSTRING(aFolder,1,LEN(aFolder)-1) //remove / at end
        zipCmd:= '"'+pfilename+'_backup.zip" -P:True -W:"'+aFolder+'" "'+ExtractFileName(pFileName)+'.*"'
        dRes:= ZIPFILES(zipCmd)
        AddToLog('Result of Zip '+zipCmd+' = '+STR(dRes))
        dRes:= DELETEFILE(pFileName+'.bdix')
        REPEAT
          dRes:= DELETEFILE(pFileName+'.bdbx')
          x:= x+1
        UNTIL dRes=0
        IF x<>1 THEN AddToLog('Delete failed. Retry count='+STR(x)) ENDIF
        dRes:= TopicMeta.LOADDATAMODEL(aMetaName)
        dRes:= uoTopic.OPEN(pFileName)
        dRes:= iTopic.OPEN(pFileName+'.xml')
        REPEAT
          iTopic.READNEXT
          IF iTopic.resultok THEN
            uoTopic:= iTopic
            uoTopic.WRITE
          ENDIF  
        UNTIL iTopic.LASTRECORD OR NOT iTopic.RESULTOK
        iTopic.RELEASE
        uoTopic.RELEASE 
        dRes:= COPYFILE(aMetaName,aMetaNameOri)
        AddToLog('End refreshing file '+pFileName)
      ELSE
        AddToLog('No refresh needed of '+pFileName)   
        dRes:= COPYFILE(aMetaName,aMetaNameOri)
      ENDIF 
    ENDIF  
  ENDIF
ENDFUNCTION

FUNCTION RefreshLocalDatabases: INTEGER 
//To handle updates on loc_* files for attempts and launcher.
AUXFIELDS
  dRes: INTEGER
  aFileName: STRING
  aPath, aMeta: STRING
  index: INTEGER
INSTRUCTIONS
  RESULT:= 0
  srvList.GET(SECONDARY,srvCases)
  IF srvList.RESULTOK THEN
    aPath:= ExtractFilePath(srvList.GetSurveyDataFilename)
    aFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+'_loc' 
    RESULT:= RefreshLocalDatabase('launcher',aPath,aFileName,1) 
    IF RESULT<>0 THEN
      DisplayOnScreen(msgError1005,1)
    ENDIF  
  ENDIF   
  IF RESULT=0 THEN
    //search for installed surveys with _loc file
    srvList.RESET
    FOR index:= 1 TO srvList.FORMCOUNT DO
      srvList.READNEXT
      IF (LOWERCASE(srvList.ServerPark)=CMAServerparkName OR LOWERCASE(srvList.ServerPark)=LauncherServerparkName)
         AND LOWERCASE(srvList.Name)<>srvCases
         AND srvlist.SetupFilename=EMPTY
      THEN
        aFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+'_loc'
        IF FILEEXISTS(aFileName+'.bdix') THEN
          aPath:= ExtractFilePath(srvList.GetSurveyDataFilename)
          aMeta:= REPLACE(ExtractFileName(srvList.GetSurveyMetaFilename),'.bmix','',IGNORE)
          RESULT:= RefreshLocalDatabase(aMeta,aPath,aFileName,0) 
        ENDIF
      ENDIF
    ENDDO
  ENDIF     
ENDFUNCTION

FUNCTION LanguageAllowed: INTEGER
PARAMETERS
  pLan: STRING
AUXFIELDS
  i,j: INTEGER  
INSTRUCTIONS  
  RESULT:= 0
  IF iSettings.sLanguageCount<>EMPTY THEN
    FOR i:= 1 TO iSettings.sLanguageCount DO
      j:= iSettings.sLanguages[i]
      IF VAL([[_locals.GetField('CurLan').Type.Categories.Count]])>=j THEN
        IF UPPERCASE([[_locals.GetField('CurLan').Type.Categories[j-1].Name]])=UPPERCASE(pLan) THEN
          RESULT:= 1
        ENDIF  
      ENDIF  
    ENDDO  
  ENDIF
ENDFUNCTION

PROCEDURE ImportSettingsFromInstallation
AUXFIELDS
  aLastLogUpload: DATETYPE
  aSelectedLanguage: STRING[10] //start language of UI.
  aLastChange: STRING[17] //date-time
  aLastSync: STRING[17] //date-time
  aSelectedStyle: 1..10,EMPTY
  aSelectedSurvey: STRING[36] //GUID of the survey selected in the Survey dropdown box
  aSelectedCasesToShow: 0..2,EMPTY
  aSelectedSortOn: 1..10
  aSelectedSortGrpOn: 1..10
  iRes: INTEGER
  aPresent: (yes),EMPTY
INSTRUCTIONS
  IF FILEEXISTS(SetupPath+cmaLocSettings) THEN
    iRes:= iSettings.OPEN(SetupPath+cmaLocSettings)
    IF iRes=0 THEN
      iSettings.READNEXT
      iSettings.RELEASE
      aLastLogUpload:= iSettings.sLastLogUpload
      aSelectedLanguage:= iSettings.sSelectedLanguage
      aLastChange:= iSettings.sLastChange
      aLastSync:= iSettings.sLastSync
      aSelectedStyle:= iSettings.sSelectedStyle
      aSelectedSurvey:= iSettings.sSelectedSurvey
      aSelectedCasesToShow:= iSettings.sSelectedCasesToShow
      aSelectedSortOn:= iSettings.sSelectedSortOn
      aSelectedSortGrpOn:= iSettings.sSelectedSortGrpOn
      aPresent:= yes
    ENDIF
  ENDIF
  iRes:= iSettings.OPEN(SetupPath+cmaSettings)
  IF iRes=0 THEN
    iSettings.READNEXT
    oSettings:= iSettings
    iSettings.RELEASE
    iSettings.ERASE
  ENDIF
  oSettings.sLastLogUpload:= aLastLogUpload
  IF aPresent=yes THEN
    IF LanguageAllowed(aSelectedLanguage)=1 THEN
      oSettings.sSelectedLanguage:= aSelectedLanguage
    ELSE
      oSettings.sSelectedLanguage:= iSettings.sSelectedLanguage
    ENDIF
    oSettings.sSelectedStyle:= aSelectedStyle
    oSettings.sSelectedCasesToShow:= aSelectedCasesToShow
    oSettings.sSelectedSortOn:= aSelectedSortOn
    oSettings.sSelectedSortGrpOn:= aSelectedSortGrpOn
  ENDIF
  oSettings.sSelectedSurvey:= aSelectedSurvey
  oSettings.sLastChange:= aLastChange
  oSettings.sLastSync:= aLastSync
  iRes:= oSettings.OPEN(SetupPath+cmaLocSettings)
  oSettings.WRITE
  oSettings.RELEASE
ENDPROCEDURE

PROCEDURE UpdateNotActiveSurveys
AUXFIELDS 
  iRes: INTEGER
  srvGUID, srvName: STRING
  I,C: INTEGER
INSTRUCTIONS
  iRes:= GetListOfSurveysX(1) //get local survey list
  IF srvList.FORMCOUNT>0 THEN
    uSurveys.OPEN(SetupPath+srvSurveys)
    REPEAT
      srvList.READNEXT
      IF srvList.RESULTOK THEN
        srvGUID:= srvList.Id
        srvName:= srvList.Name
        IF WasInstalledByCMA(srvGUID)=1 AND InstalledTopic(srvName)=1 THEN 
          IF srvList.IsActive=No THEN
            C:= C+1
            auxNotActiveSurveys:= auxNotActiveSurveys+srvGUID+';'
            AddToLog('Survey not active: '+srvGUID)
          ENDIF   
        ENDIF
      ENDIF
    UNTIL srvList.LASTRECORD
    uSurveys.RELEASE
  ENDIF  
ENDPROCEDURE

PROCEDURE Initialisation
AUXFIELDS
  iRes, I: INTEGER
  aHalt: INTEGER
  aLan: INTEGER
  tmp: STRING
  aGeoSet: STRING
INSTRUCTIONS
  cTab:= CHAR(9)
  DefaultLanguage:= LOWERCASE([[_locals.GetField('CurLan').Type.Categories[0].Name]])
  SetupPath:= ExtractFilePath(SETUPNAME)
  SETMESSAGEFILENAME(SetupPath+cmaMessageName)
  AddToLog('Start of CMA '+cmaVersion+ ' by user '+USERNAME)
  AddtoLog('Blaise run-time version: '+BLAISERUNTIMEVERSION)
  AddToLog('Blaise setup version: '+BLAISEVERSION)
  AddToLog('CMA location: '+SetupPath)
  AddToLog('Operation system: '+CURRENTOS+', '+CURRENTOSVERSION)
  AddToLog('Current culture: '+CURRENTCULTURE)
  AddToLog('Active language: '+GetCategoryName(ACTIVELANGUAGE))
  AddToLog('Memory info: '+CURRENTMEMORYINFO)
  AddToLog('Client info: '+GETCLIENTINFO)
  {$IFDEF MultiDevice}
  DeviceType:= ExtractValueForFieldFromList(GETCLIENTINFO,'Device')
  IF DeviceType='WindowsDesktop' THEN DeviceType:='WindowsPC' ENDIF
  AddToLog('Device:'+DeviceType)
  {$ENDIF}
  IF POSITION('WINDOWS',UPPERCASE(CurrentOS))=0 THEN auxIsNonWindows:= yes ENDIF 
  iRes:= GetListOfSurveysX(1) //get local survey list
  IF iRes=0 THEN
  srvList.GET(SECONDARY,'CMA') 
  CurrentVersion:= cmaVersion + '/'+DateToStr(srvList.InstallDate,'yyyyMMdd')+','+TimeToStr(srvList.InstallTime,'HH:mm:ss')
  CMAServerparkName:= LOWERCASE(srvList.ServerPark)
  AddToLog('Serverpark: '+CMAServerparkName)
  AddToLog('Auto sync: '+ GetCategoryName(srvList.SyncSurveysWhenConnected))   
  iRes:= uSurveys.OPEN(SetupPath+srvSurveys) //initial open to make sure it is created
  usurveys.RELEASE  
  IF srvList.SyncSurveysWhenConnected<>yes THEN
    aHalt:= 1    
  ENDIF
  auxTextFontSize:= 12
  IF aHalt=EMPTY THEN
    TrackGeoPosition:= yes //default
    TrackTimeUsed:= yes //default
    UploadChanges:= yes //default
    SyncWhenConnected:= yes
    AskSync:= yes
    DaysToAutoRelease:= EMPTY 
    RemoveSurveyWhenNoCasesLeft:= yes
    ShowResult:= rBoth
    Orientation:= both
    customDataSep1:= '='
    customDataSep2:= ';'
    contactDataSep1:= cTab
    contactDataSep2:= cTab
    IF FILEEXISTS(SetupPath+cmaSettings) THEN
      ImportSettingsFromInstallation
    ENDIF
    IF FILEEXISTS(SetupPath+cmaLocSettings) THEN
      iRes:= iSettings.OPEN(SetupPath+cmaLocSettings) 
      IF iRes=0 THEN 
        iSettings.READNEXT
        iSettings.RELEASE
        AddToLog('Settings read')
        IF iSettings.sUploadChanges=EMPTY THEN 
          Uploadchanges:= EMPTY
          AddToLog('Changes will NOT be uploaded each time') 
        ENDIF
        IF iSettings.sTrackLocation=EMPTY THEN 
          TrackGeoPosition:= EMPTY
          AddToLog('Geo position will NOT be determined') 
        ENDIF
        IF iSettings.sTrackTimeUsed=EMPTY THEN 
          TrackTimeUsed:= EMPTY
          AddToLog('Time used will NOT be determined') 
        ENDIF
        IF iSettings.sSyncWhenConnected=EMPTY THEN
          SyncWhenConnected:= EMPTY 
          AddToLog('No automatic syncing after interview/attempt')
        ENDIF
        IF iSettings.sAskSync=EMPTY THEN
          AskSync:= EMPTY 
          AddToLog('No confirmation of automatic syncing')
        ENDIF
        IF iSettings.sRemoveSurveyWhenNoCasesLeft=EMPTY THEN
          RemoveSurveyWhenNoCasesLeft:= EMPTY
          AddToLog('No automatic de-install of surveys')
        ENDIF
        IF iSettings.sLastLogUpload=EMPTY THEN
          LastLogUpload:= SYSDATE  //no upload on first day... 
        ELSE  
          LastLogUpload:= iSettings.sLastLogUpload
        ENDIF  
        IF iSettings.sShowResult<>EMPTY THEN 
          ShowResult:= iSettings.sShowResult
        ENDIF
        IF iSettings.sDoNotMaximizeEditWindow<>EMPTY THEN
          DoNotMaximizeEditWindow:= iSettings.sDoNotMaximizeEditWindow
        ENDIF  
        IF iSettings.sOrientation<>EMPTY THEN
          Orientation:= iSettings.sOrientation
          AddToLog('Orientation: '+GetCategoryName(Orientation))
        ENDIF  
        IF iSettings.sCasesToShow<>EMPTY THEN
          auxWhatCasesToShow:= iSettings.sCasesToShow
          SelectedCasesToShow:= iSettings.sCasesToShow
        ELSE
          auxWhatCasesToShow:= Noncompleted
          SelectedCasesToShow:= auxWhatCasesToShow
        ENDIF 
        IF iSettings.sSelectedCasesToShow<>EMPTY THEN
          SelectedCasesToShow:= iSettings.sSelectedCasesToShow
          auxWhatCasesToShow:= SelectedCasesToShow
        ENDIF 
        auxDoNotAllowEditCase:= iSettings.sDoNotAllowEditCase
        auxDoNotAllowManualAttempt:= iSettings.sDoNotAllowManualAttempt
        auxDoNotAllowShowingAttempts:= iSettings.sDoNotAllowShowingAttempts
        auxShowGeoPositionBtn:= iSettings.sShowGeoPositionBtn
        aLastChange:= iSettings.sLastChange
        aLastSync:= iSettings.sLastSync
        auxStyleNr:= iSettings.sSelectedStyle
        auxStyleCount:= iSettings.sStyleCount
        auxAutoSizeBtns:= iSettings.sSetAutoSizeBtns
        auxCollapseDetails:= iSettings.sCollapseDetails
        IF auxStyleNr<>EMPTY THEN
          auxStyle:= iSettings.sStyle[auxStyleNr]
          IF iSettings.sTextFontSize[auxStyleNr]<>EMPTY THEN
            auxTextFontSize:= iSettings.sTextFontSize[auxStyleNr]
          ENDIF
        ELSE
          IF auxStyleCount>0 THEN 
            auxStyleNr:= 1 
            auxStyle:= iSettings.sStyle[auxStyleNr]
            IF iSettings.sTextFontSize[auxStyleNr]<>EMPTY THEN
              auxTextFontSize:= iSettings.sTextFontSize[auxStyleNr]
            ENDIF 
          ENDIF  
        ENDIF  
        IF auxIsNonWindows=EMPTY THEN //no support for this on Android/iOS
          auxDisplaySetting:= REPLACE(cDisplayMessage,'{FontSize}',STR(auxTextFontSize)) 
        ENDIF
        IF iSettings.sCustomDataSep<>EMPTY THEN
          IF uppercase(iSettings.sCustomDataSep)='TAB' THEN
            customDataSep1:= cTab customDataSep2:= cTab
          ELSE
            IF LEN(iSettings.sCustomDataSep)=2 THEN
              customDataSep1:= SUBSTRING(iSettings.sCustomDataSep,1,1)   
              customDataSep2:= SUBSTRING(iSettings.sCustomDataSep,2,1)   
            ELSEIF LEN(iSettings.sCustomDataSep)=1 THEN
              customDataSep1:= iSettings.sCustomDataSep   
              customDataSep2:= customDataSep1
            ELSEIF LEN(iSettings.sCustomDataSep)=4 THEN
              IF UPPERCASE(SUBSTRING(iSettings.sCustomDataSep,2,3))='TAB' THEN
                customDataSep2:= cTab
                customDataSep1:= SUBSTRING(iSettings.sCustomDataSep,1,1)   
              ENDIF     
            ENDIF  
          ENDIF  
        ENDIF
        IF iSettings.sContactDataSep<>EMPTY THEN
          IF uppercase(iSettings.sContactDataSep)='TAB' THEN
            contactDataSep1:= cTab contactDataSep2:= cTab
          ELSE
            IF LEN(iSettings.sContactDataSep)=2 THEN
              contactDataSep1:= SUBSTRING(iSettings.sContactDataSep,1,1)   
              contactDataSep2:= SUBSTRING(iSettings.sContactDataSep,2,1)   
            ELSEIF LEN(iSettings.sContactDataSep)=1 THEN
              contactDataSep1:= iSettings.sContactDataSep   
              contactDataSep2:= contactDataSep1   
            ELSEIF LEN(iSettings.sContactDataSep)=4 THEN
              IF UPPERCASE(SUBSTRING(iSettings.sContactDataSep,2,3))='TAB' THEN
                contactDataSep2:= cTab
                contactDataSep1:= SUBSTRING(iSettings.sContactDataSep,1,1)   
              ENDIF     
            ENDIF 
          ENDIF  
        ENDIF
        SelectedStyle:= iSettings.sSelectedStyle
        SelectedSurvey:= iSettings.sSelectedSurvey
        SelectedSurveyAtStart:= SelectedSurvey
        SelectedSortOn:= iSettings.sSelectedSortOn
        SelectedSortGrpOn:= iSettings.sSelectedSortGrpOn
        IF iSettings.sDaysToAutoRelease=EMPTY THEN
          DaysToAutoRelease:= EMPTY
        ELSE  
          DaysToAutoRelease:= iSettings.sDaysToAutoRelease
        ENDIF
// languages...
        LanguageCount:= iSettings.sLanguageCount
        IF LanguageCount<>EMPTY AND VAL([[_locals.GetField('CurLan').Type.Categories.count]])>=LanguageCount THEN
          IF LanguageCount>0 THEN
            FOR i:= 1 TO LanguageCount DO
              LanguageID[i]:= iSettings.sLanguages[i]
              aLan:= LanguageID[i]
              LanguageImage[i]:= 'Flag_'+[[_locals.GetField('CurLan').Type.Categories[aLan-1].Name]]
            ENDDO
          ELSE
            auxShowLanguageDropDown:= yes
          ENDIF    
          CurrentLanguage:= iSettings.sSelectedLanguage
          Translate(CurrentLanguage)
        ELSE
          LanguageCount:= 1
          FOR i:= 0 TO val([[_locals.GetField('CurLan').Type.Categories.Count]])-1 DO
            IF [[_locals.GetField('CurLan').Type.Categories[i].Name]]=iSettings.sSelectedLanguage THEN
              LanguageID[1]:= i+1
            ENDIF  
          ENDDO  
          CurrentLanguage:= iSettings.sSelectedLanguage
          Translate(iSettings.sSelectedLanguage)
        ENDIF    
        IF iSettings.sCustomFilter.FieldName<>EMPTY THEN
          auxHasCustomFilter:= yes
        ENDIF 
        IF iSettings.sSearchButton=yes THEN
          auxUseSearchButton:= yes
        ENDIF
        CurLan:= LanguageID[1]
        LanguageID1:= GetCategoryName(CurLan)
        CurLan:= LanguageID[2]
        LanguageID2:= GetCategoryName(CurLan)
        CurLan:= LanguageID[3]
        LanguageID3:= GetCategoryName(CurLan)
      ELSE
        AddToLog('Open settings file failed. Error: '+STR(iRes))
        Translate(DefaultLanguage)
      ENDIF     
    ELSE
      AddToLog('Settings not present')
      Translate(DefaultLanguage)
    ENDIF    
    srvList.GET(SECONDARY,srvContactInfo)
    CMAContactInfoPath:= ExtractFilePath(srvList.GetSurveyMetaFileName)
    srvList.GET(SECONDARY,srvAttempts)
    CMAAttemptsPath:= ExtractFilePath(srvList.GetSurveyMetaFileName)
    IF RefreshLocalDatabases<>0 THEN HALT ENDIF
    IF auxShowGeoPositionBtn=yes THEN
      //start GPS service...
      aGeoSet:= 'Best'
      IF auxIsNonWindows=EMPTY THEN aGeoSet:= 'High' ENDIF 
      tmp:= GETGEOPOSITION(aGeoSet,cGeoWaitTime)
    ENDIF
    srvList.GET(SECONDARY,srvCases)
    LauncherServerparkName:= LOWERCASE(srvList.ServerPark)
    AddToLog('LauncherServerpark: '+CMAServerparkName)      
    IF InPortraitMode=1 THEN 
      auxInPortraitMode:= yes 
    ELSE 
      auxInPortraitMode:= EMPTY 
    ENDIF
    UpdateNotActiveSurveys  
  ELSE
    DisplayOnScreen(msgError1008,1)
    HALT
  ENDIF  
  ELSE
    DisplayOnScreen(msgError1009,1)
    HALT
  ENDIF 
ENDPROCEDURE

PROCEDURE AutoSync
AUXFIELDS doSync: (yes)
INSTRUCTIONS
  AddToLog('Sync needed? Last Sync='+ aLastSync+' Last Change='+aLastChange)
  IF (SyncWhenConnected=yes) AND (aLastSync < aLastChange) THEN
    doSync:= EMPTY
    IF IsConnected=1 THEN  
      IF AskSync=yes THEN 
        IF Confirm(auxDisplaySetting+msgSynchronize) THEN 
          doSync:= yes
        ELSE  
          AddToLog('Sync not accepted by user')
        ENDIF
      ELSE
        doSync:= yes
      ENDIF 
      IF doSync=yes THEN      
        Sync(0)
      ENDIF 
    ENDIF   
  ENDIF      
ENDPROCEDURE

FUNCTION ValidLanguage: INTEGER
PARAMETERS pLanguageID: STRING
INSTRUCTIONS
  IF [[_locals.Languages.Contains(pLanguageID)]]='True' THEN
    RESULT:= 1
  ELSE
    RESULT:= 0
  ENDIF  
ENDFUNCTION

PROCEDURE Translate //only possible on main cases screen
PARAMETERS pLanguageID: STRING
AUXFIELDS
  aNewLan: STRING
  aCulLan: STRING
INSTRUCTIONS
  IF pLanguageID<>GetCategoryName(ACTIVELANGUAGE) THEN
    aNewLan:= pLanguageID
    IF aNewLan='' THEN
      aCulLan:= CURRENTCULTURE
      IF POSITION('-',aCulLan)>0 THEN aCulLan:= SUBSTRING(aCulLan,1,POSITION('-',aCulLan)-1) ENDIF
      aNewLan:= aCulLan
    ENDIF
    IF ValidLanguage(aNewLan)=1 THEN
      AddToLog('Switch language from '+GetCategoryName(ACTIVELANGUAGE)+' to '+aNewLan)
      CurrentLanguage:= aNewLan
      //FillCustomTitles
      SETLANGUAGE(aNewLan)
      IF auxIsNonWindows=EMPTY THEN //no support for this on Android/iOS
        auxDisplaySetting:= REPLACE(cDisplayMessage,'{FontSize}',STR(auxTextFontSize)) 
      ENDIF  
      PrepareSort(SelectedSurvey)
      FillSurveyNamesArray
      HandleChange
      IF tCase<>EMPTY THEN
        UpdateCasesScreen
      ENDIF  
    ELSE
      AddToLog('Switch language from '+GetCategoryName(ACTIVELANGUAGE)+' to '+aNewLan+' NOT possible!')
    ENDIF  
  ENDIF  
ENDPROCEDURE 

PROCEDURE QuitCMA
AUXFIELDS
  tmp: STRING
INSTRUCTIONS
  AutoSync
  WriteSettings 
  AddToLog(FILL('=',120))
  IF auxShowGeoPositionBtn=yes THEN
     //stop GPS service...
    tmp:= GETGEOPOSITION('Best',-1)
  ENDIF
ENDPROCEDURE

PROCEDURE HandleSynchronization
//To trigger synchronization from another Manipula application 
//using the //commmand line option -&:HandleSynchronization(<parameters>)
PARAMETERS
  pServer,pBinding,pSecurityProtocol: STRING
  pPort: INTEGER
  pUser,pPassword,pDeployFolder: STRING
AUXFIELDS res: integer
INSTRUCTIONS
  res:= srvList.CONNECT(pServer,pBinding,pSecurityProtocol,
                        pPort,pUser,pPassword,pDeployFolder)
  IF res=0 THEN
    Initialisation
    AddToLog('External call to HandleSynchronization procedure')
    aConnected:= Yes
    InitCases(1)    
    Sync(1)
  ELSE
    HALT(1001) //connection could not be made
  ENDIF      
ENDPROCEDURE  

MANIPULATE
  Initialisation
  HandleEverything
  QuitCMA
 
