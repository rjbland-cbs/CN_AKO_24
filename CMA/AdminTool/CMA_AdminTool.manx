{**************************************************************}
{                                                              }
{  Blaise 5. A Survey Processing System                        }
{  Copyright (c) 1992, 2023 Statistics Netherlands          }
{  CMA Admin tool - Case Management tool to manage CMA case    }
{  version:  2.11 for Blaise 5.12 and greater                  }
{  date:     17-August-2023                                    }
{  author: Lon Hofman & Loek Rouschen,                         }
{          Team Blaise, Statistics Netherlands                 }
{                                                              }
{**************************************************************}
PROCESS CMA_AdminTool
{.$define develop} //when set some files will not be deleted. Handy for inspecting during development
{.$define usebdix} //arranges access through bdix file to databases. Please read the documention for additional instructions
{.$define vers_511} //when set it will probably also run in 5.10/5.11
SETTINGS
  CONNECT=NO
  ADDDATETIMETOMESSAGEFILE=YES
  
CONST
  cVersion = '2.11'
  
//1.0
//  - Initial release as part of 5.12, June 30, 2022
//1.01
//  - Date-time formatting in summary improved  
//  - Display of attempt result corrected
//1.02
//  - Assign of a Parent case now also assigns all child cases
//1.03
//  - Added support for allowing access to a survey for an interviewer through CMA_ManageInfo database
//1.40 
//  - Added consistency check and possibility to repair inconsistent topic data and attempt data
//1.402
//  - Added progress report
//  - Added import of launcher cases
//  - Added display of user logs
//1.403
//  - Supervisor now also allowed to be manager = ManagerID in UserInfo=EMPTY
//1.41
//  - Various changes / improvements
//1.42
//  - Import of user info and manage info added
//  - Support for administrator role added
//1.43
//  - Performance consistency check improved
//  - Support for various null guid actions added
//  - Support for assiging a case to a supervisor in case of
//    multiple supervisors for a survey
//1.45
//  - Support for refreshing added
//2.03
//  - Solved issue with updating all records with a requested action in case of an unallowed operation (empty recordfilter check)
//  - Solved issue when determining the credentials db path from the setuppath
// 2.04 
//  - Don't allow import of management info if UserInfo = empty
//  - sLastImportFolder functionality fix 
// 2.05 
//  - Display error message if import file is opened/locked by another process
//  - Support for Custom Reports
// 2.06 -> runtime 5.12 - depapp 5.12
//  - Maintain UserInfo 
//  - Maintain ManagementInfo
// 2.07 -> minimal: runtime 5.12 - depapp 5.12
//  - Changed header for cases dialog when navigating from progress dialog
// 2.1 -> minimal: runtime 5.12 - depapp 5.12
//  - Added support for CustomScriptFramework, changed reports to scripts
// 2.11 -> minimal: runtime 5.12 - depapp 5.12
//  - Fix Maintain User Info: Do not allow changes to User ID in Maintain User Info dialog
//  - Fix Maintain Manage Info: Do not allow changes to User / Survey in Maintain User Info dialog
//  - Fix Maintain Manage Info: No title in Add Management Info action dialog

LANGUAGES = EN "English"
          
ROLES = TOOLTIP, DISABLED

USES
  Launcher//installed survey that defines data structure for a case assignment
  Attempts (VAR) //installed survey that defines data structure for an attempt
  Contact (VAR) //installed survey that defines the data structure for contact data
  Logging //installed survey that defines data structure for of loggings
  LogMeta
  Surveys
  CMA_SettingsMeta
  CMA_AdminSettingsMeta
  CMA_SurveySettings
  CMA_ManageInfo
  CMA_UserInfo
  CMA_CustomScript
  LauncherExport (VAR)
  
  TopicMeta (VAR) //to allow access to topic data that corresponds with specific case assignment
 

  DATAMODEL Text
  FIELDS
    line: STRING[2000]
  ENDMODEL 

  DATAMODEL mUser
  LANGUAGES = EN "English"
  PRIMARY
    sUserID
  FIELDS
    sUserID EN "User ID": STRING[20]
    sUserFullName EN "User name": STRING[40]
    sUserType "Role": (interviewer "Interviewer",supervisor "Supervisor",manager "Field manager",administrator (9)"Administrator")
    sManagerID EN "Manager ID": STRING[20]
  ENDMODEL  

  DATAMODEL mConsistency
  LANGUAGES = EN "English"
  PRIMARY
    InstrumentID, ID
  FIELDS
    InstrumentID EN "Instrument GUID": STRING[36]
    ID EN "ID" : STRING[219]
    SurveyName EN "Survey name": STRING
    LauncherSurveyDataFound : (yes,no), EMPTY
    LauncherSurveyDataFoundStr EN "Survey data in case" : STRING[20], EMPTY
    LauncherAttemptsNo EN "#Attempts in case" : INTEGER, EMPTY
    SurveyDataFound : (yes,no), EMPTY
    SurveyDataFoundStr EN "Survey data in database" : STRING[20]
    AttemptsDataNo EN "#Attempts in database" : INTEGER, EMPTY
    LastAttempt EN "Last attempt in case": STRING[26],EMPTY           
    LastAttemptInData EN "Last attempt in database": STRING[26],EMPTY           
  ENDMODEL  
  
  DATAMODEL mProgress
  LANGUAGES = EN "English"
  FIELDS
    CMA_Status EN "Status": STRING[20]
    CMA_ForWhom EN "For whom": STRING[20] 
    CMA_InPossession EN "In possession": STRING[20]
    CMA_Location EN "Location": STRING[20]
    //CMA_CaseClosed EN "Closed": STRING[10]
    LastModification EN "Last modification": STRING[20] 
    Counter EN "Total" : INTEGER   
  ENDMODEL    
  
  DATAMODEL mKeys
  PRIMARY 
    ID
  FIELDS
    ID: STRING[219]
  ENDMODEL   
  
  DATAMODEL mAttemptsKeys
  PRIMARY 
    ID
  FIELDS
    ID: STRING[219]
    When: STRING
    Count: INTEGER
  ENDMODEL   

  DATAMODEL mManageInfo // datamodel for determining which users to supervise 
  LANGUAGES = EN "English"
  PRIMARY
    sInstrumentID
  FIELDS
    sInstrumentID EN "Instrument GUID": STRING[36]
    sSurveyName EN "Survey name": STRING
  ENDMODEL  
  
  DATAMODEL mManagementInfo // datamodel for maintaining management info
  LANGUAGES = EN "English"
  PRIMARY
    sUserId, sInstrumentID
  FIELDS
    sUserID EN "User ID": STRING[20]
    sInstrumentID EN "Instrument GUID": STRING[36]
    sSurveyName EN "Survey name": STRING
  ENDMODEL  

  DATAMODEL mCustomScript
  LANGUAGES = EN "English"
  PRIMARY
   sScriptID
  FIELDS
   sScriptID "Script ID": STRING[36]
   sScriptName "Script name": STRING
   sScriptSetup "Script setup": OPEN
   sScriptParameters "Script parameters": OPEN
  ENDMODEL     
  
  DATAMODEL locCases //used for temporary file displayed in cases overview dialog
  PRIMARY
     tMainSurveyID, tIdentifier
  SECONDARY 
     secSort = TheSortValue
     secSel = tSelected
  LANGUAGES = EN "English"
  
  TYPE
    TWhen = STRING[24] //format 'yyyyMMdd,HH:mm:sszzz'

  BLOCK bDT
  FIELDS
    When: TWhen  
    User: STRING[20]
  ENDBLOCK 
  
  BLOCK bCMA_Process
  FIELDS
    CreatedDT: TWhen
    LastChangedDT: TWhen
    FirstDownloaded: bDT
    FirstUploaded: bDT
    LastDownloaded: bDT
    LastUploaded: bDT
    LastAttempt: bDT //last known attempt result
    FirstInterviewTime: bDT //first time (if ever) the interview was started
    LastInterviewTime: bDT //last time (if ever) the interview was started
    LastInterviewEndTime: TWhen //last time (if ever) the interview was ended
    TotalInterviewTimeUsed: INTEGER[8] //in seconds. Keeps track of total interview time for easy monitoring
  ENDBLOCK
  
  FIELDS
    tSelected "☑":STRING[1] 
    TheSortValue: STRING[255] 
    tSurveyName EN "Survey" : STRING[30]
    tMainSurveyID: STRING[36]  //GUID of survey. Could be a WAVE
    tIdentifier EN "Key" : STRING[219]
    tLastResult EN "Result" : STRING[80],EMPTY //happenings code as string
    tAppointment EN "Appointment" : STRING[30], EMPTY
    tSupervisor EN "Supervisor" : STRING[20], EMPTY
    tStartDate "Start date": DATETYPE, EMPTY
    tSurveyData: BLOBTYPE
    tAttemptsData: BLOBTYPE
    tEndDate "End date": DATETYPE,EMPTY
    tForWhom "For whom": STRING[20]
    tInpossession EN "Current owner": STRING[20]
    tLocation EN "Location": STRING[20]
    tAppForToday: (yes),EMPTY
    tContactInfoShort EN "Contact info" : STRING,EMPTY
    tContactData: OPEN, EMPTY
    tLastAttempt EN "Last attempt" : STRING[24],EMPTY
    tCaseNote EN "Case note" : OPEN,EMPTY
    tFinal: (no (0), yes),EMPTY
    tInterviewStart: STRING[24],EMPTY
    tInterviewEnd: STRING[24],EMPTY
    tAllowSpawning: (no(0), yes), EMPTY
    tSpawnCount "#Created": STRING[3], EMPTY
    tGroupType: (parent,child),EMPTY
    tCMA_Status: STRING[20]  //original status
    tCMA_GroupStatus: STRING[20]  //original group status
    tStatus EN "Status": STRING[20],EMPTY //translated status
    tCaseStatus EN "Interview status" : STRING[20],EMPTY //translated status
    tGroupStatus EN "Group status":   STRING[20],EMPTY //translated status
    tGroupSummary: STRING[100]
    tGroupID "Group ID": STRING,EMPTY
    tIsDonorCase: (yes), EMPTY
    tAttemptsCount EN "#Attempts": STRING[3], EMPTY
    tAttemptsRoute: STRING[5],EMPTY
    tContactInfoGUID: STRING[36], EMPTY
    tDetailsTemplate: STRING[10]
    tGeoLocation "Geo position": STRING[22], EMPTY
    tHasImage: (yes),EMPTY
    tAttemptsGUID: STRING[36], EMPTY
    tGroupSort: STRING[5], EMPTY
    tHasInterview: (yes),EMPTY
    tCustomUse: STRING,EMPTY
    tCustomCol1  "CustumCol1": STRING,EMPTY  
    tCustomCol2  "CustumCol2": STRING,EMPTY  
    tCustomCol3  "CustumCol3": STRING,EMPTY  
    tCustomCol4  "CustumCol4": STRING,EMPTY  
    tCustomCol5  "CustumCol5": STRING,EMPTY  
    tCustomCol6  "CustumCol6": STRING,EMPTY  
    tCustomCol7  "CustumCol7": STRING,EMPTY  
    tCustomCol8  "CustumCol8": STRING,EMPTY  
    tCustomCol9  "CustumCol9": STRING,EMPTY  
    tCustomCol10 "CustumCol10": STRING,EMPTY  
    tActiveLanguage: STRING[5] //to keep track what the language was when the case was written
    tProcess: bCMA_Process
    tCmdLineForEdit: STRING[100], EMPTY
    tPreLoadForEdit: OPEN, EMPTY
    tLastModification: STRING[20] 
  ENDMODEL

  DATAMODEL locAttempts //used for temporary file displayed in attempts dialog
  PRIMARY
     atMainSurveyID, atID, SeqNr
  LANGUAGES = EN "English"
  FIELDS
    atMainSurveyID: STRING[36]  //GUID of survey. Could be a WAVE
    atID EN "Key" : STRING[219]
    SeqNr "#": 1..99
    When EN "When" : STRING[25]
    HappeningsStr EN "Result" : STRING[80]
    TheLastOne: 0..1
  ENDMODEL
  
  DATAMODEL DependencyMeta
  PRIMARY ParentGUID,ChildGUID
  SECONDARY ChildGUID sec2=ParentGUID
  FIELDS
    ParentGUID: STRING[36]
    ChildGUID: STRING[36]
  ENDMODEL
  
  DATAMODEL mImport
  FIELDS
    iValues: STRING[64000]
  ENDMODEL
  
  DATAMODEL mInterchange
  FIELDS 
   Message : OPEN
  ENDMODEL

SURVEYLIST srvList //lists all available surveys
  

INPUTFILE iCMASettings: CMA_SettingsMeta (XML)  
SETTINGS
  OPEN=NO

INPUTFILE iSettings: CMA_AdminSettingsMeta (XML)  
SETTINGS
  OPEN=NO
  
INPUTFILE iSurveySettings: CMA_SurveySettings (XML)
SETTINGS
  OPEN=NO

INPUTFILE iLog: LogMeta (ASCII) // to display the content of the log file
SETTINGS
  OPEN=NO
  SEPARATOR=';'
  
INPUTFILE iTopic: TopicMeta (XML) 
SETTINGS
  OPEN=NO
  CONTAINSCHECKS=YES
  
INPUTFILE iDetailsTemplate:Text (ASCII) //used for reading the active details template
SETTINGS
  OPEN=NO
  
INPUTFILE iAttempts: Attempts (XML)
SETTINGS
  OPEN=NO
  AUTOCOPY=NO
  CONTAINSCHECKS=YES 
  
INPUTFILE iGenericImport:mImport (ASCII)
SETTINGS
  OPEN=NO   

UPDATEFILE uSurveys:Surveys('Surveys',BLAISE)
SETTINGS
  OPEN=NO  
  
UPDATEFILE uTopic: TopicMeta (BDIX) // database of a topic instrument on client. Meta set just-in-time
SETTINGS
  OPEN=NO
  
UPDATEFILE ufServerLogging: Logging (BLAISE)  //used for uploading loggings to server
SETTINGS
  OPEN=NO  
  
UPDATEFILE ufAttempts: Attempts (BLAISE)  //used for uploading loggings to server
SETTINGS
  OPEN=NO  
  
UPDATEFILE ufServerCases: Launcher (BLAISE)  //used for exchanging case assignment records between client and server and for the .EDIT of an entry
SETTINGS
  OPEN=NO  
  
OUTPUTFILE oTopic: TopicMeta (ASCII) 
SETTINGS
  OPEN=NO
  HEADERLINE=YES
  SEPARATOR=';'
  //DELIMITER='"'
  CREATEBDIX=NO

INPUTFILE iUserLogtxt: Text (ASCII) // used for reading log entries from a specific user
SETTINGS
  OPEN=NO
  
OUTPUTFILE oUserLog: Text (ASCII) // used for writing the extracted log entries from a specific user to a file
SETTINGS
  OPEN=NO
  TRAILINGSPACES=NO
  
QUERYFILE qExcel 
SETTINGS
   SQLCONNECTIONDBTYPE=excel
   SQLCONNECTIONPROVIDER = 'system.data.oledb' 
   SQLCONNECTIONSTRING = 'Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties="Excel 12.0 Xml;IMEX=1;HDR=NO"' 
   OPEN=NO
  
TEMPORARYFILE tUsers:mUser

TEMPORARYFILE tBlaiseUsers:mUser

TEMPORARYFILE tConsistency:mConsistency

TEMPORARYFILE tCustomScript:mCustomScript

TEMPORARYFILE tInterchange:mInterchange
SETTINGS
   INTERCHANGE=TRANSIT

QUERYFILE tProgress
SETTINGS
    OPEN=NO

QUERYFILE tTopic
SETTINGS
    OPEN=NO

QUERYFILE tAttempts
SETTINGS
    OPEN=NO
    
QUERYFILE tCredentials
SETTINGS
  OPEN=NO    
  SQLCONNECTIONDBTYPE = SQLite
    
TEMPORARYFILE tQueryResults:mProgress

TEMPORARYFILE tManageInfo:mManageInfo

TEMPORARYFILE tManagementInfo:mManagementInfo

TEMPORARYFILE tDependency: DependencyMeta  

TEMPORARYFILE tSelUser:mUser

TEMPORARYFILE tSelConsistency:mConsistency

TEMPORARYFILE tTopicKeys:mKeys

TEMPORARYFILE tAttemptsKeys:mAttemptsKeys

TEMPORARYFILE tCase:locCases

TEMPORARYFILE tGrpCase:locCases

TEMPORARYFILE tAttempt:locAttempts  //used for dialog that shows attempts for a specific case assignment record. Populated using ufAttempts

TEMPORARYFILE tLauncher:launcher

OUTPUTFILE oLog: logMeta (ASCII) //the actual log file
SETTINGS
  MAKENEWFILE=NO  
  OPEN=NO
  SEPARATOR=';'
  TRAILINGSPACES=NO
  CREATEBDIX=NO

OUTPUTFILE oLogBackup=iLog (ASCII) 
SETTINGS
  MAKENEWFILE=NO  
  OPEN=NO
  SEPARATOR=';'
  TRAILINGSPACES=NO
  CREATEBDIX=NO  
  
OUTPUTFILE oSettings: CMA_AdminSettingsMeta (XML) //to keep track of last used language etc in UI
SETTINGS
  OPEN=NO
  MAKENEWFILE=YES
  CREATEBDIX=NO
  
OUTPUTFILE oAttempts:attempts (XML)
SETTINGS
  OPEN=NO  
  
OUTPUTFILE oLauncherExport:LauncherExport  (ASCII)
SETTINGS
  OPEN=NO
  HEADERLINE=YES
  SEPARATOR=';'
  //DELIMITER='"'
  CREATEBDIX=NO
  
{$IFNDEF usebdix}  
SURVEYDATAFILE sdUsers:CMA_UserInfo
SETTINGS
  OPEN=NO
  
SURVEYDATAFILE sdManageInfo:CMA_ManageInfo
SETTINGS
  OPEN=NO

SURVEYDATAFILE sdLauncher:Launcher
SETTINGS
  OPEN=NO

SURVEYDATAFILE sdLogging:Logging
SETTINGS
  OPEN=NO
 
SURVEYDATAFILE sdCustomScript:CMA_CustomScript
SETTINGS
  OPEN=NO

{$ELSE} 
UPDATEFILE sdUsers:CMA_UserInfo (BDIX)
SETTINGS
  OPEN=NO
  
UPDATEFILE sdManageInfo:CMA_ManageInfo (BDIX)
SETTINGS
  OPEN=NO

UPDATEFILE sdCustomScript:CMA_CustomScript (BDIX)
SETTINGS
  OPEN=NO

UPDATEFILE sdLauncher:Launcher (BDIX)
SETTINGS
  OPEN=NO

UPDATEFILE sdLogging:Logging (BDIX)
SETTINGS
  OPEN=NO  
  
{$ENDIF} 

SURVEYDATAFILE sdTopic:TopicMeta
SETTINGS
  OPEN=NO

SURVEYDATAFILE sdAttempts:Attempts
SETTINGS
  OPEN=NO

  
CONST
  cLogName = 'CMA_AdminTool_Logging.txt'
  cLogBackup = 'CMA_AdminTool_BackupLogging.txt'
  cMessageName = "CMA_Message.txt"
  cAdminTool = 'CMA_AdminTool'
  srvCases = 'cma_launcher'
  srvClientInfo = 'cma_clientinfo'
  srvAttempts = 'cma_attempts'
  srvLogging = 'cma_logging'
  srvContactInfo = 'cma_contactinfo'
  srvManageInfo = 'cma_manageinfo'
  srvUserInfo ='cma_userinfo'
  cDateTimeFormat = 'yyyyMMdd,HH:mm:sszzz'
  cDateTimeFormatMS = 'yyyyMMdd,HH:mm:ss.fff'
  cLocSettings = 'settings.xml'
  cCMASettings = "CMA_settings.xml"
  cSettings = "CMA_AdminSettings.xml"
  cNullGUID = '00000000-0000-0000-0000-000000000000'
  cNull = 'NULL'
  cSelected = '✓' 
  cEqual = '='
  cNotEqual = '≠'
  DefaultLanguage='EN'
  cPortraitSeparator = '<!--$Portrait-->'
  cLandscapeSeparator = '<!--$Landscape-->'
  cAttemptsTemplate = EN "<table borderwidth=1 bordercolor=black grid=both gridwidth=1><column width=auto><column width=*><row><cell margin=\"4,2,4,2\"><left>When made:</left></cell><cell margin=\"4,2,4,2\" background=lightgray><left>$Att_When</left></cell></row><row><cell margin=\"4,2,4,2\"><left>Result:</left></cell><cell margin=\"4,2,4,2\" background=lightgray><left>$Att_Result</left></cell></row><row><cell margin=\"4,2,4,2\"><left>Appointment:</left></cell><cell margin=\"4,2,4,2\" background=lightgray><left>$Att_Appointment</left></cell></row><row><cell margin=\"4,2,4,2\"><left>Note:</left></cell><cell margin=\"4,2,4,2\" background=lightgray><left>$Att_Note</left></cell></row></table>"

  cmaDetailsTemplate = 'detailstemplate_'
  cmaDefaultTemplate = 'detailstemplate_cma_'
  cmaAttemptsTemplate = 'attemptstemplate_'
  cmaDefaultAttemptsTemplate = 'attemptstemplate_cma_'
  
  cDefaultFieldFilter = 'tSurveyName,tContactInfoShort,tStatus,tAttemptsCount,tLastResult,tAppointment,tLastAttempt'
  cDefaultFieldFilterTopic = 'tContactInfoShort,tStatus,tAttemptsCount,tLastResult,tAppointment,tLastAttempt'
  cDefaultFieldFilterGroup = 'tSurveyName,tStatus,tAttemptsCount,tLastResult,tAppointment,tIdentifier,tSpawnCount,tLastAttempt'

  cLogFolder = 'Logs'
  cScriptFolder = 'CustomScript\\'
  
  //texts
  strYes = EN "Yes"
  strNo = EN "No"
  strWrongUser = EN "This user has no supervisor or project manager access to manage interviewers/supervisors"
  strNoSurveysToManage = EN "There are no surveys to manage"
  strConnectionFailed = EN "Connection failed!"
  strSupervisorTool = EN "CMA - Supervisor tool" 
  strAdministratorTool = EN "CMA - Administrator tool"
  strManagerTool = EN "CMA - Manager tool"
  msgLogUploadOKay = EN "The log has been uploaded"
  msgLogUploadFailed = EN "The upload of the log failed"
  msgNotConnected = EN "Synchronize not possible because you are not connected to the Internet." 
  cNotStarted = EN "Not started"
  cNotAssigned = EN "Not assigned"
  cNotDownloaded = EN "Not downloaded"
  cAdded = EN "Added"
  cCompleted = EN "Completed"
  cInterrupted = EN "Interrupted"
  cUploaded = EN "Uploaded"
  cStarted = EN "Started"
  cFinalized = EN "Finalized"
  cReopened = EN "Reopened"
  cDone = EN "Done"
  cClosed = EN "Closed"
  cAccepted = EN "Accepted"
  cNoUser = EN "<none>"
  cAllItems = EN "<All>"
  cCheckingConsistency = EN "One moment please. Checking consistency..."
  cRepairingInconsistentCases = EN "One moment please. Repairing inconsistent cases"
  cCalculatingProgress = EN "One moment please. Calculating progress overview..."
  cNoInconsistenciesFound = EN "Consistency check finished. No inconsistencies found."
  cProgressReportNoData = EN "Progress report. No data found."
  cProgressReportSurvey = EN "Progress report: "
  cConsistencyCheckSurvey = EN "Consistency check: "
  cLoggingForUser  = EN "Logging for user: "
  cNoLoggingFoundForUser = EN "No logging found for user: " 
  cRetrievingLoggingForUser = EN "Retrieving logging for user: "
  //cShowImage = EN "Click to show image..."
  msgInstallOfSurvey = EN "Install of survey" 
  msgUpdateOfSurvey = EN "Update of survey"
  msgFailed = EN "failed. Error: " 
  msgSucceeded = EN "Succeeded!" 
  msgNotPresent = EN "needed but not available for download on server" 
  msgAttemptsForCase = EN "Attempts for case" 
  strCasesForUser = EN "List of cases for"
  strCasesForSupervisor = EN "List of cases of supervisor"
  strCasesForSurvey = EN "List of cases for survey"
  strSurvey = EN "Survey"
  strListOfUnassignedCases = EN "List of unassigned cases"

  strConfirmAccepted = EN "Are you sure this case is accepted?"
  strConfirmAcceptedSel = EN "Are you sure all selected cases are accepted?"
  strCasesAccepted = EN "Number of cases accepted:"
  strAcceptedFailed = EN "Accept failed!"
  
  strConfirmReopen = EN "Are you sure this case needs to be reopened?"
  strConfirmReopenSel = EN "Are you sure all selected cases must be reopened?"
  strCasesReopened = EN "Number of reopened cases:"

  strConfirmClose = EN "Are you sure this case needs to be closed?"
  strConfirmCloseSel = EN "Are you sure all selected cases must be closed?"
  strCasesClosed = EN "Number of closed cases:"

  strConfirmRestoreUser = EN "Are you sure all cases of user $UserID need to be restored?"
  strConfirmRestoreSel = EN "Are you sure all selected cases must be restored?"
  strConfirmRestore = EN "Are you sure this case needs to be restored?"
  strCasesRestored = EN "Number of restored cases:"

  strConfirmTransfer = EN "Are you sure case $Identifier needs to be transferred to $UserID?"  
  strConfirmTransferSel = EN "Are you sure all selected cases need to be transferred to user $UserID?"  

  strConfirmAssign = EN "Are you sure case $Identifier needs to be assigned to $UserID?"  
  strConfirmAssignSel = EN "Are you sure all selected case need to be assigned to user $UserID?"  

  strConfirmRelease = EN "Are you sure this case needs to be released for the interviewer?"
  strConfirmReleaseSel = EN "Are you sure all selected cases must be released?"
  strCasesReleased = EN "Number of released cases:"

  strCasesAssigned = EN "Number of assigned cases:"
  strCasesTransfered = EN "Number of transfered cases:"
  strConfirmExcel = EN "Export done. Result can be found in file \"$eName\". Start Excel?"

  cNoSupervisorsFoundToAssignTo = EN "Could no find any supervisors to assign the case(s) to" 
  cCasesAssignedSuppervisor = EN "Number of assigned cases to supervisor:"
  cConfirmAssignSupervisor = EN "Are you sure you want to assign the selected case(s) to supervisor:"
  cAssignSupervisorSkippedCases = EN "The following cases could not be assigned to the supervisor because they were already downloaded by an interviewer: " 
  strUserNotAuthenticated = EN "User is not authenticated! Admintool will be halted."
  strConnectionNotOkay = EN "Connection failed"
  cTransferCasesOneOrTwoStep = EN "Do you want to wait for a transfer acknowledgement from the current interviewer before the actual transfer of cases takes place?"
  cNoCasesSelectedForAction = EN "Please select one or more cases first"
  cReleaseCasesOneOrTwoStep = EN "Do you want to wait for a release acknowledgement from the current interviewer before the actual release of cases takes place?" 
  cCreateInstruction = EN  "Create Instruction" 
  cCreatedInstructions = EN "Number of instructions created: :" 
  cInstructionReleaseAll = EN "Release all cases from client device"
  cInstructionReleaseSurvey = EN "Release all cases from selected survey from client device"
  cInstructionReleaseOrphans = EN "Release orphan cases from client device"
  strConfirmEditSel = EN "Are you sure you want to update the selected cases with the information you entered?" 
  strNoSurveySelectedForInstruction = EN "You have to select a survey in order to be able to create this kind of instruction."
  strConfirmReleaseSurveyCases = EN "Are you sure you want to create an instruction to release all cases of survey/user: " 
  strConfirmReleaseAll = EN "Are you sure you want to create an instruction to release all cases of user:" 
  strConfirmOrphans = EN "Are you sure you want to create an instruction to release all orphan cases of user: "   

  cNrOfCases = EN "#Cases:" 
  cFirstLastDownloaded = EN "First/Last download:"
  cFirstLastUploaded = EN "First/Last upload:"
  cLastAttempt = EN "Last attempt:"
  cFirstLastInterviewTime = EN "First/Last interview time:" 
  cLastInterviewEndTime = EN "Last interview end time:" 
  cNumberOfAttempts = EN "#Attempts:"
  cNumberOfCasesUpdated = EN "Number of cases updated :"
  cNumberOfCasesSelectedForEdit = EN "Number of cases to edit: "
  cNoFieldsSelectedForUpdate = EN "Please select one or more fields to update"
  cValidateUpdate = EN "Aborting update: "
  cTotalInterviewTimeUsed = EN "Interview time used:"
  
  strFieldNotInTopic = EN "Field \"$field\" does not exist in Topic"
  strFieldNotInLauncher = EN "Field \"$field\" does not exist in Launcher"
  strFieldNotInContact = EN "Field \"$field\" does not exist in Conact definition"
  strFieldError = EN "Field \"$field\" does not exist in import definition" 
  strIDMissing = EN "Field \"ID\" is missing in file"
  strSureToImport = EN "Are you sure you want to import the file<newline>\"$file\"<newline>for survey<newline>\"$survey?\""  
  strSureToImportFile = EN "Are you sure you want to import the file<newline>\"$file\"?"  
  strErrorInKey = EN "Error in key: "
  strErrorGUID = EN "Wrong GUID used in import"
  strNrImported = EN "Import finished!<newline>Number of cases imported:"
  strProcessing = EN "Processing..."
  strImportLauncherCases = EN "Import cases"
  strImportUserInfo =  EN "Import user info"
  strImportManageInfo = EN "Import manage info"
  strImportFileOpenError = EN "Import file not selected or could not be openened"
  
  strNeedsRefresh = EN "Request could not be executed because cases were changed in database. Please press the Refresh button and try again"
  strEndRecovery = EN "End recovery. Recovered $1 survey data records and $2 attempts data records"
  strReadOnlyNotSupported = EN "Read-only access not supported by current survey questionnaire..."
  strExtractFailed = EN "Extract of survey data failed."
  strRequestNotAllowed = EN "None of the cases could be procesed. Request not allowed: "
  
  cDeleteScript = EN "Delete script"
  cEditScript = EN "Edit script"
  cStartScript = EN "Start script"
  cNewScript = EN "New script"
  
  cDeleteUserInfo = EN "Delete user info"
  cEditUserInfo = EN "Edit user info"
  cAddUserInfo = EN "Add user info"
  cMaintainUserInfo = EN "Manage User Info"

  cDeleteManInfo = EN "Delete manage info"
  cEditManInfo = EN "Edit manage info"
  cAddManInfo = EN "Add manage info"
  cMaintainManageInfo = EN "Maintain Manage Info"

  cScriptCannotSave = EN "Cannot save script: "
  cScriptExecutedSuccess = EN "Script successfully executed: "
  cScriptExecutionError = EN "Manipula script failed to execute. Error code: "
  cScriptFileNotFound = EN "Cannot execute script. Script file not found: "
  cCannotSaveReport = EN "Cannot save script: "
  cScriptFileCannotbeEmpty = EN "Script file cannot be empty"
  cScriptIsnotAManipulaScript = EN "Selected script is not a Manipula script"
  cPleaseProvideAScriptName = EN "Please provide a script name"
  cScriptDoesntExists = EN "Selected script does not exists"
  cNoDatamodelsFound = EN "No datamodels found in setup path"
  cCustomScripts = EN "Custom Scripts"
  
AUXFIELDS
  DoNotAllowOverwrite: (yes),EMPTY
  ExportDataBtn: (yes),EMPTY
  ShowInterviewBtn: (yes),EMPTY
  AcceptBtn: (yes),EMPTY
  AssignBtn: (yes),EMPTY
  AssignSupervisorBtn: (yes),EMPTY
  TransferBtn: (yes),EMPTY
  RestoreUserBtn: (yes),EMPTY
  RestoreBtn: (yes),EMPTY
  ReopenBtn: (yes),EMPTY
  ReleaseBtn: (yes),EMPTY
  CloseBtn: (yes),EMPTY
  EditBtn: (yes), EMPTY
  EditParts: SET OF (seStartDate (1),
                     seEndDate (2),
                     seSupervisor (3),
                     seCmdlineForEdit (4),
                     sePreloadForEdit (5),
                     seAttemptsRoute (6),
                     seDetailsTemplate (7),
                     seCustomUse (8))
  ExportCSVBtn: (yes),EMPTY
  ImportCasesBtn: (yes),EMPTY
  CheckBtn: (yes),EMPTY
  LoggingBtn: (yes),EMPTY
  ProgressBtn: (yes),EMPTY
  CustomScriptsBtn: (yes), EMPTY
  MaintainUserInfoBtn: (yes), EMPTY
  MaintainManagementInfoBtn: (yes), EMPTY
  InstructionBtn: (yes),EMPTY
  AllowAdminTasksForManager: (yes),EMPTY
  MultiSelect: (yes),EMPTY
  auxSelCount: INTEGER
  auxCasesCount: INTEGER
  auxCaseIsSelected: (yes),EMPTY
  CMAContactInfoPath: STRING
  CMAAttemptsPath: STRING
  CMALauncherFileName: STRING
  cTab: STRING[1]
  customDataSep1,customDataSep2: STRING[1]
  contactDataSep1,contactDataSep2: STRING[1]
  LastLogUpload: DATETYPE
  ServerParkName: STRING
  ConnectionStr: OPEN
  SurveyStr: STRING
  CustomReportStr: STRING
  DefaultCMA_AttemptsGUID: STRING //original GUID. To be used when no other information is available
  CurrentAttemptsGUID: STRING
  aAttemptsFileName: STRING
  auxHasInterview: (yes),EMPTY
  auxCurrentStatus: STRING
  auxCurrentGrpStatus: STRING
  auxCurrentLocation: STRING
  auxCurrentIsClosed: (yes),EMPTY
  auxCurrentAttemptsCount: STRING,EMPTY
  auxSelectedSurveyDisplayName: STRING, EMPTY
  auxIsUserLog: (yes,no)
  auxTheLogUser: STRING[20], EMPTY
  aQuit: (yes),EMPTY

  //auxDetailsTemplate: OPEN
  CurrentCaseID: STRING
  CurrentLanguage: STRING
  CurrentCaseGUID: STRING
  
  // progress report selection values
  CurrentForWhom: STRING[20]
  CurrentInPossession: STRING[20]
  CurrentLocation: STRING[20]
  CurrentStatus: STRING[20]
  CurrentCaseClosed: STRING[10] 
  
  aShowGroup: (yes),EMPTY
  //allowed operations
  aoReopen: (yes),EMPTY
  aoRelease: (yes),EMPTY
  aoClose: (yes),EMPTY
  aoTransfer: (yes),EMPTY
  aoRestore: (yes),EMPTY
  aoAccept: (yes),EMPTY
  aoEdit: (yes), EMPTY
  
  LanguageCount: 0..3
  LanguageId: ARRAY[1..3] of INTEGER
  LanguageImage: ARRAY[1..3] of STRING
  LanguageEnum: (flag1 "<img src=^LanguageImage[1]>", 
                 flag2 "<img src=^LanguageImage[2]>", 
                 flag3 "<img src=^LanguageImage[3]>")

  auxCustomDetailsTable: OPEN
  auxAttemptsDetailsTable: OPEN
  auxStatisticsDetailsTable: OPEN
  auxCaseDetailsTable: OPEN

  auxDetails "^{auxCustomDetailsTable}": STRING[1]
  auxAttemptsDetails "^{auxAttemptsDetailsTable}": STRING[1]
  auxStatisticsDetails "^{auxStatisticsDetailsTable}": STRING[1]
  auxCaseDetails "^{auxCaseDetailsTable}": STRING[1]

  btnGroupCases: ( ShowSurveyData EN "Show interview", //.edit in RO mode
                   ShowAttempts   EN "Show attempts",  //show list of all attempts
                   Cancel         EN "Back"
                  ) ,EMPTY
                  
  btnConsistencyCheck: ( RepairData EN "Repair data", // repair inconsistent cases
                         Cancel         EN "Back"
                      ) ,EMPTY

  btnProgressOverview: ( ShowCases EN "Show cases", // show cases belonging to selected record
                         Cancel         EN "Back"
                      ) ,EMPTY

  btnLauncherCases: (
                     AssignCase     EN "Assign" TOOLTIP "Assign case to an interviewer",         //assign current case to user from supervisor
                     AssignSupervisor EN "Assign supervisor" TOOLTIP "Assign case to a supervisor",  // assign current case to a supervisor
                     ShowGroup      EN "Show group",
                     ShowSurveyData EN "Show interview", //.edit in RO mode
                     ShowAttempts   EN "Show attempts",  //show list of all attempts
                     ExportData     EN "Export survey data",
                     Refresh        EN "Refresh",
                     Cancel         EN "Back"
                     ) ,EMPTY

  btnLauncherActions: (
                     EditCase       EN "Change" TOOLTIP "Change selected cases",                 //edit cases e.g. start and end date
                     SetAccepted    EN "Accept" TOOLTIP "Accept the result of the case",         //set CMA_CaseStatus to 'Accepted' 
                     SetReopen      EN "Reopen" TOOLTIP "Reopen the case for the interviewer",   //reopen_req current case
                     CloseCase      EN "Close"  TOOLTIP "Close the case on the device",          //close_req current case 
                     TransferCase   EN "Transfer" TOOLTIP "Transfer the case to another interviewer / retrieve", //transfer_req current case to other user from supervisor
                     RestoreCase    EN "Restore" TOOLTIP "Make case available again on interview device",  //restore_req  current case 
                     ReleaseCase    EN "Release" TOOLTIP "Release case from interview device"    //release_rew  current case 
                     ) ,EMPTY

                     
  aShowing EN "Cases to show: ": 
            (
             shCompleted          (1) EN "Completed",  
             shFinalized          (2) EN "Finalized",  
             shCompletedFinalized (3) EN "Completed / Finalized",
             shReopened           (4) EN "Reopened",     
             shAccepted           (5) EN "Accepted",     
             shStarted            (6) EN "Started / Interrupted", 
             shClosed             (8) EN "Closed",  
             shAll                (7) EN "All"
             ) ,EMPTY
             
  btnSelect: ( 
             Select "<img src=Select>" DISABLED "<img src=SelectDisabled>" TOOLTIP EN "Select case" ,
             SelectAll "<img src=SelectAll>" DISABLED "<img src=SelectAllDisabled>" TOOLTIP EN "Select all cases" ,
             UnSelect "<img src=UnSelect>" DISABLED "<img src=UnSelectDisabled>" TOOLTIP EN "Unselect case" , 
             UnSelectAll "<img src=UnSelectAll>" DISABLED "<img src=UnSelectAllDisabled>" TOOLTIP EN "Unselect all cases" ),EMPTY

  btnCreateInstruction: ( CreateInstruction EN "Create instruction", // create instruction 
                         Cancel         EN "Back"
                      ) ,EMPTY
                      
  btnEditCases: ( EditCases EN "Update cases", // update cases 
                         Cancel         EN "Back"
                      ) ,EMPTY
                      
  AccessAllowed: (yes), EMPTY
  res: INTEGER
  aUserType: (interviewer "Interviewer",supervisor "Supervisor",manager "Field manager",administrator (9)"Administrator")
  aUserInfoCount: INTEGER
  aManagerID: STRING
  aIsAlsoSupervisor: (yes),EMPTY
  aIsAlsoManager: (yes),EMPTY
  aIsALoneManager: (yes),EMPTY
  aIsAlsoAdmin: (yes),EMPTY
  SetupPath: STRING  
  aUserBtnRow1: (select EN "Show cases",
                 ExportData EN "Export cases",
                 ImportCases EN "Import cases",
                 RetoreCases EN "Restore user",  //restore_req for all cases of current user
                 Instruction EN "Instruction"  // create (null guid) instruction for selected cases
              )
  aUserBtnRow2: (
             ImportUI EN "Import user info", 
             ImportMI EN "Import manage info", 
             Manage EN "Manage",
             Admin EN "Admin", 
             CheckConsistency EN "Check",
             Progress EN "Progress",
             MaintainUI EN "Maintain user info",
             MaintainMI EN "Maintain manage info",
             CustomScripts EN "Custom Scripts",
             Logging EN "Logging", 
             Switch EN "Switch Role",
             cancel EN "Exit") 

  aBtnUserInfoMaintenanceRow: (
             AddUI EN "Add user info", 
             EditUI EN "Edit user info", 
             DeleteUI EN "Delete user info",
             Cancel EN "Back") 

  aBtnManageInfoMaintenanceRow: (
             AddMI EN "Add manage info", 
             EditMI EN "Edit manage info", 
             DeleteMI EN "Delete manage info",
             Cancel EN "Back") 
             
  currentUserID EN "User ID": STRING
  currentUserStr: STRING
  download_msg: STRING
  CurrentSurveySettings: STRING
  CurrentSurveyGUID: STRING
  CurrentContactTemplate: OPEN
  CurrentContactTemplateID: STRING
  CurrentAttemptsTemplateID: STRING
  CurrentTemplateInfo: STRING
  CurrentAttemptsTemplateInfo: STRING
  srvGUIDsInCases: OPEN
  srvNames: ARRAY[0..20] OF STRING
  usrNames: ARRAY[0..20] OF STRING[20]
  srvID: ARRAY[0..20] OF STRING, EMPTY
  srvSupervisorCount:  ARRAY[0..20] OF INTEGER, EMPTY
  srvNamesCount: 0..20
  auxPreviousSurveyName: STRING
  auxPreviousSurveyID: STRING
  auxPreviousSupervisorCount: INTEGER
  auxFieldFilter: OPEN
  auxFieldFilterTitles: OPEN
  auxFieldFilterWidths: OPEN
  auxCustomCaseFilter : OPEN
  aOutput: OPEN
  CurLan: TLanguage
  CMAServerparkName: STRING
  LauncherServerParkName: STRING
  DataImportSep: STRING[1]
  DataExportSep: STRING[1]
  aTopicInImport: (yes),EMPTY
  auxDefaultNrOfDaysLoggingHistory EN "Nr of days logging history: " : 1..365 
  auxWhatSurveyToShow "Surveys: " : 
                                          (srvAll (0) "^SrvNames[0]", //"\<All\>",
                                           srv1 "^SrvNames[1]",
                                           srv2 "^SrvNames[2]",
                                           srv3 "^SrvNames[3]",
                                           srv4 "^SrvNames[4]",
                                           srv5 "^SrvNames[5]",
                                           srv6 "^SrvNames[6]",
                                           srv7 "^SrvNames[7]",
                                           srv8 "^SrvNames[8]",
                                           srv9 "^SrvNames[9]",
                                           srv10 "^SrvNames[10]",
                                           srv11 "^SrvNames[11]",
                                           srv12 "^SrvNames[12]",
                                           srv13 "^SrvNames[13]",
                                           srv14 "^SrvNames[14]",
                                           srv15 "^SrvNames[15]",
                                           srv16 "^SrvNames[16]",
                                           srv17 "^SrvNames[17]",
                                           srv18 "^SrvNames[18]",
                                           srv19 "^SrvNames[19]",
                                           srv20 "^SrvNames[20]"
                                           )
  SelectedSurvey: STRING[36],EMPTY
  SelectedSurveyIndex: INTEGER
  SelectedReportSurvey: STRING[36],EMPTY
  SelectedReportSurveyIndex: INTEGER
  auxWhatSurveyToShowGUID: STRING
  auxWhatUserToShow "Users: " : 
                                          (usrAll (0) "^UsrNames[0]", //"\<All\>",
                                           usr1 "^UsrNames[1]",
                                           usr2 "^UsrNames[2]",
                                           usr3 "^UsrNames[3]",
                                           usr4 "^UsrNames[4]",
                                           usr5 "^UsrNames[5]",
                                           usr6 "^UsrNames[6]",
                                           usr7 "^UsrNames[7]",
                                           usr8 "^UsrNames[8]",
                                           usr9 "^UsrNames[9]",
                                           usr10 "^UsrNames[10]",
                                           usr11 "^UsrNames[11]",
                                           usr12 "^UsrNames[12]",
                                           usr13 "^UsrNames[13]",
                                           usr14 "^UsrNames[14]",
                                           usr15 "^UsrNames[15]",
                                           usr16 "^UsrNames[16]",
                                           usr17 "^UsrNames[17]",
                                           usr18 "^UsrNames[18]",
                                           usr19 "^UsrNames[19]",
                                           usr20 "^UsrNames[20]"
                                           )

  auxStatus: STRING
  auxGroupStatus: STRING
  auxGroupSummary: STRING
  auxLastResult: STRING
  auxLastAttempt: STRING
  auxContactData: OPEN
  auxCaseNote: STRING
  auxCurrentSurvey: STRING
  auxExportSurveyPossible: (yes),EMPTY
  CurrentAttemptsTemplate: OPEN
  CurrentContactInfoShort: STRING
  CurrentGroupID: STRING
  CurrentGroupGUID: STRING
  CurrentGroupSort: STRING
  auxDoNotPosition: (yes),EMPTY
  auxSelectMoveNext: (yes),EMPTY
  auxFinal: (yes),EMPTY
  auxSpawnAllowed:(no (0), yes), EMPTY
  auxIsDonorCase: (yes), EMPTY
  auxHasImage: (yes),EMPTY
  auxParentChildView: (yes),EMPTY
  auxGroupType: (parent,child),EMPTY
  auxAllowTransfer: (yes),EMPTY
  auxCustomTemplate: STRING
  auxGeoLocation: STRING
  auxFilter EN "Filter:" : STRING, EMPTY
  auxAllowSort: (yes), EMPTY
  auxSortText: array[1..10] of STRING
  auxSortOn "Select display order: ": 
                (sec1 (1) "^AuxSortText[1]",
                 sec2 (2) "^AuxSortText[2]",
                 sec3 (3) "^AuxSortText[3]",
                 sec4 (4) "^AuxSortText[4]",
                 sec5 (5) "^AuxSortText[5]",
                 sec6 (6) "^AuxSortText[6]",
                 sec7 (7) "^AuxSortText[7]",
                 sec8 (8) "^AuxSortText[8]",
                 sec9 (9) "^AuxSortText[9]",
                 sec10 (10) "^AuxSortText[10]"),EMPTY
 auxInPortraitMode: (yes),EMPTY
 auxLayoutSetName: STRING                 
 SurveysWithoutSettings: OPEN
 //for statistics/summary
 auxS_NumberofCases: INTEGER
 auxS_OutcomeCode: STRING
 auxS_Status: ARRAY[0..9] OF STRING     
 auxS_StatusC: ARRAY[0..9] OF INTEGER     
 auxS_FirstDownloaded: STRING
 auxS_LastDownloaded: STRING
 auxS_FirstUploaded: STRING
 auxS_LastUploaded: STRING
 auxS_LastAttempt: STRING
 auxS_FirstInterviewTime: STRING
 auxS_LastInterviewTime: STRING
 auxS_LastInterviewEndTime: STRING
 auxS_TotalInterviewTimeUsed: INTEGER
 auxS_Appointments: INTEGER
 auxS_Attempts: INTEGER
 auxShowSummary: (yes),EMPTY
 auxLastImportFolder: STRING
 auxTotalInconsistentCases: INTEGER
 auxTotalProgressReportRecords: INTEGER
 auxColWidth: STRING
// auxInstruction: (ReleaseAll EN "Release all cases from client device", ReleaseSurvey EN "Release all cases from selected survey from client device", ReleaseOrphans EN "Release orphan cases from client device"), EMPTY

 auxInstructionText: ARRAY[1..3] of STRING
 auxInstruction: (ReleaseAll EN "^auxInstructionText[1]", ReleaseSurvey EN "^auxInstructionText[2]", ReleaseOrphans EN "^auxInstructionText[3]"), EMPTY
 auxUserFieldFilter: STRING
 
 // Edit case dialog fields
 auxCMA_StartDate EN "Start date": DATETYPE, EMPTY
 auxCMA_EndDate EN "End date": DATETYPE, EMPTY
 auxCMA_Supervisor EN "Supervisor" : STRING[20], EMPTY
 auxCMA_CmdLineForEdit EN "Command line for edit": STRING[100], EMPTY
 auxCMA_PreLoadForEdit "Preload for edit": OPEN, EMPTY
 auxCMA_AttemptsRoute EN "Attempts route": STRING[5], EMPTY
 auxCMA_DetailsTemplate EN "Details template": STRING[10], EMPTY
 auxCMA_CustomUse EN "Custom use": OPEN, EMPTY
 auxCMA_StartDateState : STRING[1], EMPTY
 auxCMA_EndDateState : STRING[1], EMPTY
 auxCMA_SupervisorState : STRING[1], EMPTY
 auxCMA_CmdLineForEditState : STRING[1], EMPTY
 auxCMA_PreLoadForEditState : STRING[1], EMPTY
 auxCMA_AttemptsRouteState : STRING[1], EMPTY
 auxCMA_DetailsTemplateState : STRING[1], EMPTY
 auxCMA_CustomUseState : STRING[1], EMPTY
 auxCMA_StartDateSelect : (yes), EMPTY
 auxCMA_EndDateSelect : (yes), EMPTY
 auxCMA_SupervisorSelect : (yes), EMPTY
 auxCMA_CmdLineForEditSelect : (yes), EMPTY
 auxCMA_PreLoadForEditSelect: (yes), EMPTY
 auxCMA_AttemptsRouteSelect : (yes), EMPTY
 auxCMA_DetailsTemplateSelect : (yes), EMPTY
 auxCMA_CustomUseSelect : (yes), EMPTY
                                       
FUNCTION GetEntryOnName: OPEN
PARAMETERS
  pText: OPEN
  pName: STRING
  pSep1: STRING
  pSep2: STRING
AUXFIELDS 
  p, p_sep: INTEGER
INSTRUCTIONS
  p:= POSITION(pSep2+UPPERCASE(pName)+pSep1,pSep2+UPPERCASE(pText))
  IF p>0 THEN
    IF SUBSTRING(pText,p+LEN(pName)+1,1)='"' THEN
      p_sep:= p+LEN(pName)+1 //search next not-escaped "...
      REPEAT
        p_sep:= POSITION('"',pText,p_sep+1)
      UNTIL SUBSTRING(pText,p_sep-1,1)<>'\\' OR p_sep=0
      IF p_sep=0 THEN p_sep:= LEN(pText)+1 ENDIF
      RESULT:= SUBSTRING(pText,p+LEN(pName)+2,p_sep-(p+LEN(pName))-2)
    ELSE
      p_sep:= POSITION(pSep2,pText,p+LEN(pName)+1)
      IF p_sep=0 THEN p_sep:= LEN(pText)+1 ENDIF
      RESULT:= SUBSTRING(pText,p+LEN(pName)+1,p_sep-(p+LEN(pName))-1)
    ENDIF  
  ELSE
    RESULT:= ''  
  ENDIF  
  RESULT:= REPLACE(RESULT,'\"','"')
ENDFUNCTION

PROCEDURE ReplaceEntryOnName
PARAMETERS
  TRANSIT pText: OPEN
  IMPORT pName: STRING
  IMPORT pValue: OPEN
  IMPORT pSep: STRING
AUXFIELDS 
  p, p_sep: INTEGER
INSTRUCTIONS
  p:= POSITION(UPPERCASE(pName),UPPERCASE(pText))
  IF p>0 THEN
    p_sep:= POSITION(pSep,pText,p+LEN(pName)+1)
    IF p_sep=0 THEN p_sep:= LEN(pText)+1 ENDIF
    pText:= SUBSTRING(pText,1,p+LEN(pName))+pValue+SUBSTRING(pText,p_sep,LEN(pText))
  ENDIF  
ENDPROCEDURE    

FUNCTION GetEntry: OPEN
PARAMETERS 
  pText: OPEN
  pIndex: INTEGER
  pSepChar: STRING
AUXFIELDS
  i, p, next: INTEGER
INSTRUCTIONS
  p:= 0
  RESULT:= ''
  FOR i:= 1 TO pIndex-1 DO 
    p:= POSITION(pSepChar,pText,p+1) 
  ENDDO
  IF p<>0 OR pIndex=1 THEN
    next:=  POSITION(pSepChar,pText,p+1) 
    IF next=0 THEN
      RESULT:= SUBSTRING(pText,p+1,LEN(pText))
    ELSE
      RESULT:= SUBSTRING(pText,p+1,next-p-1)   
    ENDIF
  ENDIF
ENDFUNCTION

//Function to extract a path from a full file path string
FUNCTION ExtractFilePath: STRING
PARAMETERS pFilename: STRING
INSTRUCTIONS
  RESULT:= REGEXSTRING('.*(\\\\|/)',pFileName)
ENDFUNCTION 

FUNCTION ExtractFileName: STRING
PARAMETERS pFilename: STRING
AUXFIELDS tmp: STRING
INSTRUCTIONS
  tmp:= ExtractFilePath(pFileName)
  RESULT:= REPLACE(pFileName,tmp,'')
ENDFUNCTION 

FUNCTION IsConnected: INTEGER
INSTRUCTIONS
   RESULT:=0
   IF NETWORKCONNECTIVITYTYPE IN ['Wifi', 'Mobile', 'Ethernet'] THEN RESULT:= 1 ENDIF
ENDFUNCTION

FUNCTION NowDT: STRING
INSTRUCTIONS
  RESULT:= TIMETOSTR(SYSTIME,cDateTimeFormat)
ENDFUNCTION 

FUNCTION NowDTMS: STRING
INSTRUCTIONS
  RESULT:= TIMETOSTR(SYSTIME,cDateTimeFormatMS)
ENDFUNCTION 

FUNCTION SysDateStr: STRING
INSTRUCTIONS
  RESULT:= TIMETOSTR(SYSTIME,'yyyyMMdd')
ENDFUNCTION 

PROCEDURE AddToLog
PARAMETERS pTextToLog: OPEN
INSTRUCTIONS
  oLog.OPEN(SetupPath+cLogName,APPEND)
  oLog.LogWhen:= NowDT
  oLog.LogText:= pTextToLog
  oLog.WRITE
  oLog.RELEASE
ENDPROCEDURE

PROCEDURE ShowUserLog
AUXFIELDS 
  sFileName: STRING  
INSTRUCTIONS
  sFileName:= WORKINGFOLDER+'\\'+cLogFolder+'\\'+auxTheLogUser+'_cma_logging.txt'
  IF FILEEXISTS(sFileName) THEN
    iLog.OPEN(sFileName)
    auxIsUserLog:= yes
    AddToLog('Show user log:' + auxTheLogUser + ', Nr of days log history : ' + STR(auxDefaultNrOfDaysLoggingHistory))
    dShowTheLogging (cLoggingForUser + auxTheLogUser)
    iLog.RELEASE
  ELSE
    Display(cNoLoggingFoundForUser + auxTheLogUser, WAIT) 
  ENDIF
ENDPROCEDURE

PROCEDURE ShowCustomScripts
INSTRUCTIONS
  auxPreviousSurveyName:= srvNames[0]
  auxPreviousSurveyID:= srvID[0]
  auxPreviousSupervisorCount:= srvSupervisorCount[0]
  srvNames[0]:= cNoUser
  srvID[0]:= ''
  srvSupervisorCount[0]:= 0
  auxWhatSurveyToShow:= 0    
  RefreshCustomReports
  dCustomScripts (cCustomScripts)
ENDPROCEDURE

PROCEDURE ResetSrvNamesToOldValues
INSTRUCTIONS
  srvNames[0]:= auxPreviousSurveyName
  srvID[0]:= auxPreviousSurveyID
  srvSupervisorCount[0]:= auxPreviousSupervisorCount
ENDPROCEDURE

PROCEDURE RefreshCustomReports
AUXFIELDS
   index: INTEGER
INSTRUCTIONS
  // load report
  tCustomScript.ERASE
  sdCustomScript.RESET
  FOR index:= 1 TO sdCustomScript.FORMCOUNT DO
    sdCustomScript.READNEXT
    tCustomScript.INITRECORD
    tCustomScript.sScriptID:= sdCustomScript.ScriptId
    tCustomScript.sScriptName:= sdCustomScript.ScriptName
    tCustomScript.sScriptSetup:= sdCustomScript.ScriptFile
    tCustomScript.sScriptParameters:= sdCustomScript.ScriptParameters
    tCustomScript.WRITE
  ENDDO 
  // navigate to last used reportid (if applicable)
  IF auxScriptID<>EMPTY THEN
      tCustomScript.GET(auxScriptID)
  ENDIF 
ENDPROCEDURE


PROCEDURE RefreshUserLog
AUXFIELDS 
  sFileName: STRING 
  iRes: INTEGER  
INSTRUCTIONS
  sFileName:= WORKINGFOLDER+'\\'+cLogFolder+'\\'+auxTheLogUser+'_cma_logging.txt'
  iLog.ERASE
  iLog.RELEASE
  IF FILEEXISTS(sFileName) THEN
    iRes:= DELETEFILE(sFileName)
  ENDIF
  Display(cRetrievingLoggingForUser + auxTheLogUser, Hourglass)
  ExtractLoggingForUser(auxTheLogUser, auxDefaultNrOfDaysLoggingHistory) 
  ClearDisplay
  AddToLog('Openening refreshed user log file:'+ sFileName)
  iLog.OPEN(sFileName)
  iLog.RESET
  iLog.INITRECORD
  auxIsUserLog:= yes
  AddToLog('Refreshed user log:' + auxTheLogUser + ', Nr of days log history : ' + STR(auxDefaultNrOfDaysLoggingHistory))
ENDPROCEDURE

PROCEDURE UploadOrRefreshLogging
INSTRUCTIONS
  IF auxIsUserLog=yes THEN
    RefreshUserLog
  ELSE
    UploadLogging(1)
  ENDIF
ENDPROCEDURE

PROCEDURE ShowLog
INSTRUCTIONS
  iLog.OPEN(SetupPath+cLogName)
  auxIsUserLog:= no
  AddToLog('Show logging:' + str(auxIsUserLog))
  dShowTheLogging
  iLog.RELEASE
ENDPROCEDURE

PROCEDURE CopyLog
INSTRUCTIONS
  iLog.OPEN(SetupPath+cLogName)
  oLogBackup.OPEN(SetupPath+cLogBackup)
  REPEAT
    iLog.READNEXT
    oLogBackUp.WRITE
  UNTIL iLog.LASTRECORD  
  iLog.RELEASE
  oLogBackup.RELEASE
ENDPROCEDURE 

PROCEDURE EraseLog
AUXFIELDS iRes: INTEGER
INSTRUCTIONS
  IF iSettings.sPreserveLogfileOnClient=yes THEN
    CopyLog
  ENDIF  
  iRes:= DELETEFILE(SetupPath+cLogName)
ENDPROCEDURE 
 
PROCEDURE EraseMessageFile
AUXFIELDS iRes: INTEGER
INSTRUCTIONS
  IF FILEEXISTS(SetupPath+cMessageName) THEN
    iRes:= DELETEFILE(SetupPath+cMessageName)
  ENDIF  
ENDPROCEDURE 

PROCEDURE UploadLogging
PARAMETERS pForced: INTEGER
AUXFIELDS 
  iRes: INTEGER
  iBlob: BLOBTYPE
INSTRUCTIONS
  IF IsConnected=1 THEN
    IF (SYSDATE<>LastLogUpload) OR (pForced=1) OR FILEEXISTS(SetupPath+cMessageName) THEN
      srvList.GET(SECONDARY,srvLogging) 
      IF srvList.RESULTOK THEN //Monitoring survey is installed
        iRes:= ufServerLogging.OPEN(REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE))
        IF iRes=0 THEN
          ufServerLogging.INITRECORD
          ufServerLogging.UserID:= USERNAME
          ufServerLogging.LogWhen:= NowDT
          iRes:= iBlob.LOADFROMDISK(cLogName)
          ufServerLogging.Logging:= iBlob
          IF FILEEXISTS(SetupPath+cMessageName) THEN
            iRes:= iBlob.LOADFROMDISK(SetupPath+cMessageName)
            ufServerLogging.Extra:= iBlob
          ENDIF  
          ufServerLogging.WRITE
          ufServerLogging.RELEASE
          iRes:= srvList.UPLOADDATA
          IF iRes>=1 THEN //1 or more records uploaded; should be only 1...
            EraseLog
            EraseMessageFile
            ufServerLogging.ERASE
            LastLogUpload:= SYSDATE
            WriteSettings
            AddToLog('Logging uploaded')
            IF pForced=1 THEN
              DISPLAY(msgLogUploadOKay,WAIT)
            ENDIF  
          ELSE
            AddToLog('Upload of logging failed. Result: '+str(iRes)) 
            IF pForced=1 THEN
              DISPLAY(msgLogUploadFailed,WAIT)
            ENDIF 
            ufServerLogging.ERASE 
          ENDIF  
        ELSE
          AddToLog('Open of logging database failed. Result: '+str(iRes))  
        ENDIF  
      ENDIF 
    ENDIF  
  ELSE
    IF pForced=1 THEN DisplayOnScreen(msgNotConnected,1) ENDIF 
  ENDIF
ENDPROCEDURE

PROCEDURE DisplayOnScreen
PARAMETERS S: OPEN Mode: INTEGER
INSTRUCTIONS
  AddToLog('Display: '+S)
  IF Mode=1 THEN
    DISPLAY(S,WAIT)
  ELSEIF Mode=2 THEN
    DISPLAY(S,PERMANENT)
  ELSEIF Mode=3 THEN
    DISPLAY(S,HOURGLASS)
  ENDIF
ENDPROCEDURE

FUNCTION DateForDisplay: STRING
PARAMETERS pDT: STRING
INSTRUCTIONS
  IF pDT<>'' THEN
    RESULT:= DATETOSTR(STRTODATE(pDT,cDateTimeFormat))+', '+TIMETOSTR(STRTOTIME(pDT,cDateTimeFormat),'H:mm:ss')
  ELSE
    RESULT:= ''
  ENDIF    
ENDFUNCTION

//general usage procedures/functions
FUNCTION GetCategoryText: STRING
PARAMETERS 
  pMeta: METATYPE 
  pName: STRING
  pLanguage: STRING
  pCode: INTEGER
AUXFIELDS
  i: INTEGER  
  aLan: STRING
INSTRUCTIONS
  RESULT:= ''
  FOR i:= 1 TO VAL([[pmeta.GetField(pName).Type.Categories.Count]]) DO
    IF VAL([[pmeta.GetField(pName).Type.Categories[i-1].Code]])=pCode THEN
      IF [[pmeta.GetField(pname).Type.Categories[i-1].Texts.Contains(pLanguage)]]='True' THEN
        RESULT:= [[pmeta.GetField(pname).Type.Categories[i-1].Texts.GetItem(pLanguage).Text]]
      ENDIF
      IF RESULT='' THEN //revert to first language of datamodel
        aLan:= [[pMeta.languages[0].name]]
        IF [[pmeta.GetField(pname).Type.Categories[i-1].Texts.Contains(aLan)]]='True' THEN
          RESULT:= [[pmeta.GetField(pname).Type.Categories[i-1].Texts.GetItem(aLan).Text]]
        ENDIF  
      ENDIF
      EXITFOR
    ENDIF  
  ENDDO
ENDFUNCTION

FUNCTION GetCategoryNameForCode: STRING
PARAMETERS 
  pMeta: METATYPE
  pName: STRING
  pCode: INTEGER
AUXFIELDS
  i: INTEGER  
INSTRUCTIONS
  RESULT:= ''
  FOR i:= 1 TO VAL([[pmeta.GetField(pName).Type.Categories.Count]]) DO
    IF VAL([[pmeta.GetField(pName).Type.Categories[i-1].Code]])=pCode THEN
      RESULT:= [[pmeta.GetField(pname).Type.Categories[i-1].Name]]
    ENDIF  
  ENDDO
ENDFUNCTION

FUNCTION GetDefaultMode: STRING
INSTRUCTIONS
  RESULT:= iSettings.sDefaultMode
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DefaultMode<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DefaultMode
  ENDIF
ENDFUNCTION

FUNCTION GetDefaultLayoutSet: STRING
INSTRUCTIONS
  RESULT:= iSettings.sDefaultLayoutSet
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DefaultLayoutSet<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DefaultLayoutSet
  ENDIF
ENDFUNCTION

FUNCTION GetDefaultDataEntrySettings: STRING
INSTRUCTIONS
  RESULT:= iSettings.sDefaultDataEntrySettings
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_DefaultDataEntrySettings<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_DefaultDataEntrySettings
  ENDIF
ENDFUNCTION

FUNCTION GetFieldFilter: STRING
PARAMETERS
  pGUID: STRING
  pShowGroup: INTEGER
INSTRUCTIONS
  RESULT:= cDefaultFieldFilter
  IF pGUID<>'*'THEN GetSurveySettings(pGUID) ELSE 
    CurrentSurveySettings:= ''
    CurrentSurveyGUID:= '' 
  ENDIF
  IF pShowGroup=1 THEN
    IF iSettings.sFieldFilterGroup<>'' THEN
       RESULT:= iSettings.sFieldFilterGroup
    ELSE
       RESULT:= cDefaultFieldFilterGroup
    ENDIF 
    IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_FieldFilterGroup<>'' THEN
      RESULT:= iSurveySettings.Survey_FieldFilterGroup
    ENDIF  
  ELSEIF pGUID='*' THEN
    IF iSettings.sFieldFilterAll<>'' THEN 
      RESULT:= iSettings.sFieldFilterAll 
    ENDIF
  ELSE  
    IF iSettings.sFieldFilterTopic<>'' THEN 
      RESULT:= iSettings.sFieldFilterTopic 
    ELSE  
      RESULT:= cDefaultFieldFilterTopic
    ENDIF
    IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_FieldFilter<>'' THEN
      RESULT:= iSurveySettings.Survey_FieldFilter
    ENDIF  
  ENDIF
  IF pShowGroup<>1 THEN 
    IF iSettings.sAddEndDateToFieldFilter=yes THEN
      IF POSITION(',TENDDATE,',','+UPPERCASE(RESULT)+',')=0 THEN RESULT:= 'tEndDate,'+RESULT ENDIF
    ENDIF  
    IF iSettings.sAddStartDateToFieldFilter=yes THEN
      IF POSITION(',TSTARTDATE,',','+UPPERCASE(RESULT)+',')=0 THEN RESULT:= 'tStartDate,'+RESULT ENDIF
    ENDIF  
    IF CurrentUserID<>'' OR aUserType=3 THEN
      IF POSITION(',TINPOSSESSION,',','+UPPERCASE(RESULT)+',')=0 THEN RESULT:= 'tInPossession,'+RESULT ENDIF
      IF POSITION(',TLOCATION,',','+UPPERCASE(RESULT)+',')=0 THEN RESULT:= 'tLocation,'+RESULT ENDIF
    ENDIF  
    IF aUserType=3 THEN
      IF POSITION(',TFORWHOM,',','+UPPERCASE(RESULT)+',')=0 THEN RESULT:= 'tForWhom,'+RESULT ENDIF
    ENDIF
    IF POSITION(',TIDENTIFIER,',','+UPPERCASE(RESULT)+',')=0 THEN RESULT:= 'tIdentifier,'+RESULT ENDIF
    IF (aUserType=manager OR aUserType=administrator) AND NumberOfSupervisorsForSurvey(pGUID)>1 THEN 
      RESULT:= 'tSupervisor,'+RESULT
    ENDIF  
    IF (iSettings.sMultiSelect=yes AND aUserType<>Manager) OR POSITION(',TSUPERVISOR,', ','+UPPERCASE(RESULT)+',') > 0  THEN 
      RESULT:= 'tSelected,'+RESULT
    ENDIF  
  ENDIF  
  AddToLog('Current field filter: '+RESULT) 
ENDFUNCTION


PROCEDURE ShowCreateInstructionDialog
AUXFIELDS
  sHeader: STRING
  TheUser: STRING
  FilterStr: STRING
  IndeX: INTEGER
INSTRUCTIONS
  IF aUserType=supervisor THEN
    TheUser:= currentUserID
  ELSE
    IF CurrentUserID<>EMPTY THEN
      FilterStr:= 'ManagerID=\''+CurrentUserID+'\'' 
    ELSE
      tUsers.RESET 
      tUsers.READNEXT //skip this one
      FilterStr:= ''
      FOR Index:= 2 TO tUsers.FORMCOUNT DO
        tUsers.READNEXT
        IF FilterStr<>'' THEN FilterStr:= FilterStr+' OR ' ENDIF
        FilterStr:= FilterStr+ 'ManagerID=\''+tUsers.sUserID+'\''
      ENDDO
    ENDIF  
    sdUsers.SETRECORDFILTER(FilterStr) 
    sdUsers.RESET
    tSelUser.ERASE
    FOR Index:= 1 to sdUsers.FORMCOUNT do
      sdUsers.READNEXT
      IF sdUsers.UserType=interviewer THEN
        tSelUser.sUserID:= sdUsers.UserID
        tSelUser.sUserFullName:= sdUsers.UserName
        tUsers.sUserType:= sdUsers.UserType
        tUsers.sManagerID:= sdUsers.ManagerID
        tSelUser.WRITE
      ENDIF  
    ENDDO
    SelectTransferUser
    IF aSelUserBtn=select THEN
      TheUser:= tSelUser.sUserID
    ENDIF
  ENDIF   
  IF TheUser<>EMPTY THEN
    auxInstruction:= EMPTY
      sHeader:= cCreateInstruction + ' - user: ' + TheUser
    auxInstructionText[1]:=cInstructionReleaseAll
    auxInstructionText[3]:=cInstructionReleaseOrphans
    IF (SelectedSurveyIndex>0) THEN
      auxInstruction:= ReleaseSurvey
      auxInstructionText[2]:= cInstructionReleaseSurvey
    ELSE
      auxInstruction:= ReleaseOrphans
      auxInstructionText[2]:= ''
    ENDIF  
    IF SelectedSurveyIndex>0 THEN
      sHeader:= sHeader + ' - ' + srvNames[SelectedSurveyIndex]
    ENDIF
    dCreateInstruction (sHeader)
    IF btnCreateInstruction=CreateInstruction THEN
      CreateInstructions(TheUser)
    ENDIF
  ENDIF  
ENDPROCEDURE

//PROCEDURE CreateReleaseSomeInstructionsForSelectedCases
//AUXFIELDS
//  Index: INTEGER
//  iRes: INTEGER
//INSTRUCTIONS
//  // create launcher record(s) and populate the cma_customeuse field with entries to be released,
//  // first ask for comfirmation
//  IF Confirm(strConfirmReleaseSomeeCases) THEN
//    AddToLog('Executing CreateReleaseSomeInstructions')
//    tInstruction.ERASE
//    tInstruction.RESET
//    tCase.RESET
//    FOR Index:= 1 TO tCase.FORMCOUNT DO
//      tCase.READNEXT
//      IF tCase.tInPossession<>empty AND tCase.tSelected=cSelected THEN
//        tInstruction.GET(tCase.tInPossession)
//        IF NOT tInstruction.RESULTOK THEN
//          tInstruction.sUserID:= tCase.tInPossession
//        ENDIF         
//        tInstruction.sInstruction:= tInstruction.sInstruction + tCase.tMainSurveyID + ';' + tCase.tIdentifier + ';' 
//        tInstruction.WRITE
//      ENDIF
//    ENDDO         
//    sdLauncher.RESET
    
//    // create launcher records with instruction
//    IF tInstruction.FORMCOUNT>0 THEN
//      tInstruction.RESET
//      FOR Index:= 1 TO tInstruction.FORMCOUNT DO
//        tInstruction.READNEXT    
//        AddToLog('Adding RELEASE_SOME instruction for : '+ tInstruction.sUserID + ', instruction: ' + tInstruction.sInstruction)
//        sdLauncher.MainSurveyID:= cNullGUID
//        sdLauncher.ID:= NowDT
//        sdLauncher.CMA_ForWhom:= tInstruction.sUserID
//        sdLauncher.CMA_Location:= 'RELEASE_SOME'
//        sdLauncher.CMA_CustomUse:= tInstruction.sInstruction
//        sdlauncher.CMA_GroupType:= gParent
//        sdLauncher.WRITE          
//      ENDDO
//    ENDIF
//    Display(cCreatedInstructions + STR(tInstruction.FORMCOUNT), WAIT)
//  ENDIF
//ENDPROCEDURE

// Create an instruction to remove all cases for a particular survey from the client device
// user and survey must both be selected
PROCEDURE CreateReleaseInstruction
PARAMETERS
  pFilter: OPEN
  pInstruction: STRING
  pConfirmationText : STRING
  pUserID: STRING
AUXFIELDS
  Index: INTEGER
  iRes: INTEGER
INSTRUCTIONS
  IF Confirm(pConfirmationText) THEN
    // set the status for all launcher cases for the specific user to Release_DONE
    IF pFilter<>EMPTY THEN
      sdLauncher.SETRECORDFILTER(pFilter) //no modified check needed
      srvList.GET(SECONDARY,srvCases)
      ufServerCases.OPEN(CMALauncherFileName)
      ufServerCases.ERASE 
      sdLauncher.RESET
      FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
        sdLauncher.READNEXT
        ufServerCases:= sdLauncher
        ufServerCases.CMA_Location:= 'RELEASE_DONE'
        //ufServerCases.CMA_Process.LastChangedDT:= NowDT //Not needed???
        ufServerCases.WRITE
        AddToLog(pInstruction+' instruction. Updating related launcher case to RELEASE_DONE ' + ufServerCases.MainSurveyID + ', ' + ufServerCases.ID)
      ENDDO
      ufServerCases.RELEASE 
      Res:= srvList.UPLOADDATA
      IF Res<0 THEN
        AddToLog('Upload failed, Error: '+STR(RES))
      ENDIF
    ENDIF  
    AddToLog('Creating ' +pInstruction+ ' instruction for user ' + CurrentUserID)
    sdLauncher.RESET
    sdlauncher.INITRECORD
    sdLauncher.MainSurveyID:= cNullGUID
    sdLauncher.ID:= NowDT
    sdLauncher.CMA_ForWhom:= pUserID
    sdLauncher.CMA_Location:= pInstruction
    sdLauncher.CMA_CustomUse:= SelectedSurvey + ';'
    sdLauncher.CMA_Process.CreatedDT:= NowDT
    sdLauncher.WRITE          
    Display(cCreatedInstructions + '1', WAIT)
  ENDIF
ENDPROCEDURE

PROCEDURE CreateInstructions
PARAMETERS
  pUserID: STRING
AUXFIELDS
  aFilter: OPEN
  aInstruction: STRING
  aConfirmationText : STRING
INSTRUCTIONS
    CASE auxInstruction OF
      ReleaseSurvey:
          IF SelectedSurvey<>EMPTY THEN
            aFilter:= 'mainsurveyid=\''+SelectedSurvey+'\' and CMA_ForWhom=\''+ pUserID+'\''
            aInstruction:= 'RELEASE_SURVEYS'
            aConfirmationText:= strConfirmReleaseSurveyCases+' '+srvNames[SelectedSurveyIndex]+'/'+pUserID
          ENDIF
      ReleaseAll:
          aFilter:= 'CMA_ForWhom=\''+ pUserID+'\''
          aInstruction:= 'RELEASE_ALL'
          aConfirmationText:= strConfirmReleaseAll+ ' '+pUserID
      ReleaseOrphans:
          aFilter:= ''
          aInstruction:= 'RELEASE_ORPHANS'
          aConfirmationText:= strConfirmOrphans+' '+pUserID
    ENDCASE
    IF aInstruction<>EMPTY THEN
      CreateReleaseInstruction(aFilter, aInstruction, aConfirmationText, pUserID)
    ELSE
      Display(strNoSurveySelectedForInstruction, wait)
    ENDIF    
ENDPROCEDURE

FUNCTION ExtractValueForFieldFromList: STRING
PARAMETERS
  pValuePairs: OPEN
  pFieldName: STRING
AUXFIELDS
  aPosStart, aPosEnd: INTEGER
  aString: STRING
INSTRUCTIONS
  aPosStart:= POSITION(UPPERCASE(pFieldName+'='),UPPERCASE(pValuePairs))
  //check for fieldname. If present use it.
  IF aPosStart>0 THEN
    aPosEnd:= POSITION(',',pValuePairs,aPosStart)   
    IF aPosEnd=0 THEN aPosEnd:= LEN(pValuePairs)+1 ENDIF
    aString:= SUBSTRING(pValuePairs,aPosStart,aPosEnd-aPosStart)
    RESULT:= SUBSTRING(aString,POSITION('=',aString)+1,255)
  ELSE
    CASE pFieldName OF
    'tSelected': RESULT:= '3'
    'tInPossession': RESULT:= '20'
    'tLocation': RESULT:= '20'
    ELSE  
    RESULT:= ''
    ENDCASE
  ENDIF  
ENDFUNCTION 

FUNCTION GetFieldWidths: OPEN
PARAMETERS
  pFieldFilter: OPEN
  pWhichSurvey: STRING
AUXFIELDS
  aField: STRING
  aWidth: INTEGER
  aValue: STRING
  aCol: INTEGER
  aIndex: INTEGER  
  aSurvey: STRING
INSTRUCTIONS
  RESULT:= ''
  aSurvey:= pWhichSurvey
  IF auxParentChildView=yes THEN 
    aSurvey:= CurrentGroupGUID 
    IF CurrentGroupGUID<>CurrentSurveyGUID THEN
      GetSurveySettings(CurrentGroupGUID)
    ENDIF
  ENDIF 
  REPEAT
    aIndex:= aIndex+1
    aField:= GetEntry(pFieldFilter,aIndex,',')
    IF aField<>'' THEN
      IF aIndex>1 THEN RESULT:= RESULT+',' ENDIF
      IF POSITION('TCUSTOMCOL',UPPERCASE(aField))=1 THEN
        aCol:= VAL(SUBSTRING(aField,11,2))
        IF aSurvey<>EMPTY AND iSurveySettings.Survey_CustomColCount>=1 THEN
          aWidth:= iSurveySettings.Survey_CustomCol[aCol].Width
        ELSEIF iSettings.sCustomColCount>=1 THEN
          aWidth:= iSettings.sCustomCol[aCol].Width
        ENDIF    
        IF aWidth<>EMPTY THEN RESULT:= RESULT+STR(aWidth) ENDIF
      ELSE
        aValue:= ExtractValueForFieldFromList(iSettings.sFieldWidths,aField)
        IF aValue<>'' THEN
          RESULT:= RESULT+aValue  //check to be numeric...
        ENDIF    
      ENDIF  
    ENDIF  
  UNTIL aField=''
ENDFUNCTION  

FUNCTION GetTitleFromMeta: STRING
PARAMETERS
  pMeta: METATYPE
  pFieldName: STRING
  pLanguage: STRING
AUXFIELDS
  tmp: STRING
INSTRUCTIONS  
  IF [[pMeta.GetField(pFieldName).RoleTexts.Contains('Question')]]='True' THEN
    IF [[pMeta.GetField(pFieldName).RoleTexts.GetItem('Question').Texts.Contains(pLanguage)]]='True' THEN
      tmp:= [[pMeta.GetField(pFieldName).RoleTexts.GetItem('Question').Texts.GetItem(pLanguage).ToFormattedString(SourceCode)]]
    ENDIF
  ENDIF
  tmp:= REPLACE(tmp, CHAR(13)+CHAR(10),' ')
  RESULT:= tmp
ENDFUNCTION

FUNCTION GetFieldTitles: OPEN
PARAMETERS
  pFieldFilter: OPEN
  pWhichSurvey: STRING
AUXFIELDS
  aField: STRING
  aTitle: STRING
  aCol: INTEGER
  aIndex: INTEGER
  aAdded: (yes),EMPTY  
  aSurvey: STRING
INSTRUCTIONS
  RESULT:= ''
  IF pWhichSurvey<>'*' THEN
    aSurvey:= pWhichSurvey
  ENDIF  
  IF auxParentChildView=yes THEN 
    aSurvey:= CurrentGroupGUID 
    IF CurrentGroupGUID<>CurrentSurveyGUID THEN
      GetSurveySettings(CurrentGroupGUID)
    ENDIF
  ENDIF 
  REPEAT
    aIndex:= aIndex+1
    aField:= GetEntry(pFieldFilter,aIndex,',')
    IF aField<>'' THEN
      IF aIndex>1 THEN RESULT:= RESULT+',' ENDIF
      aTitle:= EMPTY
      IF POSITION('TCUSTOMCOL',UPPERCASE(aField))=1 THEN
        aCol:= VAL(SUBSTRING(aField,11,2))
        IF aSurvey<>EMPTY AND iSurveySettings.Survey_CustomColCount>=1 THEN
          aTitle:= iSurveySettings.Survey_CustomCol[aCol].Title
        ELSEIF iSettings.sCustomColCount>=1 THEN
          aTitle:= iSettings.sCustomCol[aCol].Title
        ENDIF  
        //now get the correct language...
        aTitle:= ExtractTextForDisplay(aTitle)
      ENDIF
      IF aTitle=EMPTY THEN
        aTitle:= GetTitleFromMeta([[locCases]],aField,CurrentLanguage)
      ENDIF
      IF aTitle<>EMPTY THEN 
        aAdded:= yes
        RESULT:= RESULT+aTitle 
      ENDIF
    ENDIF  
  UNTIL aField=''
  IF aAdded=EMPTY THEN RESULT:= '' ENDIF //no reason to pass on strings with comma's...
ENDFUNCTION  

FUNCTION DetermineSurveyName: STRING
PARAMETERS 
  pSurveyDisplayName: STRING
AUXFIELDS 
  aSurveyName: STRING
INSTRUCTIONS
  aSurveyName:= pSurveyDisplayName
  IF aSurveyName='' THEN
    aSurveyName:= iSurveySettings.Survey_DisplayName
  ENDIF
  IF aSurveyName<>'' THEN
    RESULT:= ExtractTextForDisplay(aSurveyName)
  ELSE
    RESULT:= srvList.Name
    IF srvList.WaveName<>EMPTY THEN
      RESULT:= RESULT+' ('+srvList.WaveName+')'
    ENDIF
  ENDIF  
ENDFUNCTION

FUNCTION TranslateStatus: STRING
PARAMETERS pStatus: STRING
INSTRUCTIONS
  RESULT:= ''
  IF iSettings.sShowNotStartedTxt=yes THEN
    Result:= cNotStarted
  ENDIF 
  CASE pStatus OF
  'Added':       RESULT:= cAdded
  'Started':     RESULT:= cStarted
  'Interrupted': RESULT:= cInterrupted
  'Completed':   RESULT:= cCompleted
  'Finalized':   RESULT:= cFinalized
  'Reopened':    RESULT:= cReopened
  'Done':        RESULT:= cDone //group status!
  'Closed':      RESULT:= cClosed
  'Accepted':    RESULT:= cAccepted
  ENDCASE
ENDFUNCTION 

PROCEDURE GetSurveySettings
PARAMETERS
  pGUID: STRING
AUXFIELDS
  aName1, aName2, aPath: STRING
  res: INTEGER
  aSettings: STRING
INSTRUCTIONS
//Settings are loaded based on a well define file name: CMA_SurveySettings[_<wavename>].xml
//When is it a wave and there is no specific settings file for the wave the
//settings file for the original survey will be used if present
  IF pGuid<>'' THEN
    aSettings:= CurrentSurveySettings
    IF POSITION(pGUID,SurveysWithoutSettings)>0 THEN
      iSurveySettings.INITRECORD
      if srvList.ID<>pGuid THEN srvList.GET(pGuid) ENDIF
      CurrentSurveySettings:= ''
      CurrentSurveyGUID:= ''
    ELSEIF pGUID<>CurrentSurveyGUID THEN
      srvList.GET(pGuid)
      IF srvList.RESULTOK THEN
        GetSurveySettingsForGUID(pGuid)
        IF CurrentSurveySettings<>'' THEN 
          CurrentSurveyGUID:= pGUID 
        ELSE
          SurveysWithoutSettings:= SurveysWithoutSettings+pGUID+';'  
        ENDIF
      ELSE  
        iSurveySettings.INITRECORD
        CurrentSurveySettings:= ''
        CurrentSurveyGUID:= ''
        SurveysWithoutSettings:= SurveysWithoutSettings+pGUID+';'  
      ENDIF
      IF CurrentSurveySettings<>aSettings THEN 
        IF CurrentSurveySettings<>'' THEN
          AddToLog('Active survey settings '+CurrentSurveySettings)
        ELSE
          AddToLog('No survey settings active')
        ENDIF  
      ENDIF    
    ENDIF
  ENDIF  
ENDPROCEDURE

PROCEDURE GetSurveySettingsForGUID
PARAMETERS
  pGUID: STRING
AUXFIELDS
  aName1, aName2, aPath: STRING
  res: INTEGER
INSTRUCTIONS
//Settings are loaded based on a well define file name: CMA_SurveySettings[_<wavename>].xml
//When is it a wave and there is no specific settings file for the wave the
//settings file for the original survey will be used if present
  aName1:= 'cma_surveysettings'
  IF srvList.WaveName <> '' THEN
    aName2:= aName1+'_'+ srvList.WaveName
  ELSE
    aName2:= aName1  
  ENDIF
  aName1:= ExtractFilePath(srvList.GetSurveyMetaFilename)+aName1+'.xml'
  aName2:= ExtractFilePath(srvList.GetSurveyMetaFilename)+aName2+'.xml'
  iSurveySettings.INITRECORD
  CurrentSurveySettings:= ''
  CurrentSurveyGUID:= ''
  IF FILEEXISTS(aName2) THEN
    res:= iSurveySettings.OPEN(aName2)
    iSurveySettings.READNEXT
    iSurveySettings.RELEASE
    CurrentSurveySettings:= aName2
  ELSEIF FILEEXISTS(aName1) THEN
    res:= iSurveySettings.OPEN(aName1)
    iSurveySettings.READNEXT
    iSurveySettings.RELEASE
    CurrentSurveySettings:= aName1
  ELSE
    AddToLog('No survey settings found for '+pGUID)
  ENDIF
ENDPROCEDURE

FUNCTION ReadTemplate: OPEN
PARAMETERS pFileName: STRING
AUXFIELDS
  iRes: INTEGER
INSTRUCTIONS
  RESULT:= ''
  iRes:= iDetailsTemplate.OPEN(pFileName)
  IF iRes=0 THEN
    REPEAT
      iDetailsTemplate.READNEXT
      RESULT:= RESULT+TRIM(iDetailsTemplate.Line)
    UNTIL NOT iDetailsTemplate.RESULTOK OR iDetailsTemplate.LASTRECORD
    iDetailsTemplate.RELEASE
  ELSE
    AddToLog('Error opening '+pFileName+'. Error:'+STR(iRes))  
  ENDIF   
ENDFUNCTION

PROCEDURE LoadAttemptsTemplate
PARAMETERS
  pPath: STRING
  pTemplateID: STRING
INSTRUCTIONS
  CurrentAttemptsTemplate:= ReadTemplate(pPath+pTemplateID) 
ENDPROCEDURE

PROCEDURE LoadTemplate
PARAMETERS
  pPath: STRING
  pTemplateID: STRING
INSTRUCTIONS
  CurrentContactTemplate:= ReadTemplate(pPath+pTemplateID)
ENDPROCEDURE

FUNCTION ReplaceVarsInTemplate: OPEN
PARAMETERS
  pTemplate: OPEN
  pParamValues: OPEN
AUXFIELDS 
  as: OPEN  
  i: INTEGER
  ap: STRING
  av: OPEN
INSTRUCTIONS
  as:= pTemplate
  REPEAT
    i:= i+1
    ap:= GetEntry(pParamvalues,i,cTab)
    i:= i+1
    av:= GetEntry(pParamvalues,i,cTab)
    av:= REPLACE(av,CHAR(10),'<NEWLINE>')
    IF ap<>EMPTY THEN
      as:= REPLACE(as,'$'+ap,av,TRUE)
    ENDIF
  UNTIL ap=EMPTY  
  RESULT:= as
ENDFUNCTION

FUNCTION GetContactInfoGUID: STRING
PARAMETERS pContactInfoGUID: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pContactInfoGUID
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_ContactInfoGUID
  ENDIF
ENDFUNCTION

FUNCTION GetDetailsTemplate: STRING
PARAMETERS pDetailsTemplate: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pDetailsTemplate
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_DetailsTemplate
  ENDIF
ENDFUNCTION

FUNCTION ExtractApplicableTemplate: OPEN
PARAMETERS pTemplate: OPEN
AUXFIELDS
  aPos, aLast: INTEGER
  aSep: STRING
INSTRUCTIONS
  IF auxInPortraitMode=yes THEN
    aSep:= REPLACE(cPortraitSeparator,'$',auxLayoutSetName+'-')
    aPos:= POSITION(UPPERCASE(aSep),UPPERCASE(pTemplate))
    IF aPos=0 THEN
      aSep:= REPLACE(cPortraitSeparator,'$','')
      aPos:= POSITION(UPPERCASE(aSep),UPPERCASE(pTemplate))
      IF aPos=0 THEN aPos:= 1 aSep:= '' ENDIF
    ENDIF
  ELSE
    aSep:= REPLACE(cLandscapeSeparator,'$',auxLayoutSetName+'-')
    aPos:= POSITION(UPPERCASE(aSep),UPPERCASE(pTemplate))
    IF aPos=0 THEN
      aSep:= REPLACE(cLandscapeSeparator,'$','')
      aPos:= POSITION(UPPERCASE(aSep),UPPERCASE(pTemplate))
      IF aPos=0 THEN aPos:= 1 aSep:= '' ENDIF
    ENDIF
  ENDIF    
  aLast:= POSITION('<!--',pTemplate,aPos+1) 
  IF aLast=0 THEN aLast:= LEN(pTemplate)+1 ENDIF
  RESULT:= SUBSTRING(pTemplate,aPos+LEN(aSep),aLast-(aPos+LEN(aSep)))
ENDFUNCTION

FUNCTION ProcessTemplate: OPEN
PARAMETERS
  pContactData: OPEN
AUXFIELDS
  aCurrentTemplateInfo: STRING
  aPath, aName: STRING
  aDetailsTemp: STRING
  aContactInfoGUID: STRING
  aTot: INTEGER
INSTRUCTIONS
  GetSurveySettings(tCase.tMainSurveyID)
  aDetailsTemp:= GetDetailsTemplate(tCase.tDetailsTemplate)
  aContactInfoGUID:= GetContactInfoGUID(tCase.tContactInfoGUID)
  aCurrentTemplateInfo:= GetCategoryName(ACTIVELANGUAGE)+'::'+aDetailsTemp+'::'+aContactInfoGUID
  IF CurrentTemplateInfo<>aCurrentTemplateInfo THEN   
    IF aDetailsTemp<>'' THEN
      aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      IF aContactInfoGUID<>'' THEN
        srvList.GET(aContactInfoGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSE
        aPath:= CMAContactInfoPath 
      ENDIF    
      //first check folder of current contact info datamodel
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        srvList.GET(tCase.tMainSurveyID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aPath:= SetupPath
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDetailsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
    ELSE
      aName:= LOWERCASE(cmaDefaultTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      //first check folder of cma_contactinfo model. If not present then check CMA folder
      IF aContactInfoGUID<>'' THEN
        srvList.GET(aContactInfoGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSE
        aPath:= CMAContactInfoPath 
      ENDIF    
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDefaultTemplate+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aPath:= SetupPath
        aName:= LOWERCASE(cmaDefaultTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDefaultTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
    ENDIF
    IF CurrentContactTemplateID<>aPath+aName THEN
      LoadTemplate(aPath,aName)
      CurrentContactTemplateID:=aPath+aName
      CurrentTemplateInfo:= aCurrentTemplateInfo //to identity current situation
      AddToLog('Template '+aPath+aName+' loaded')
    ENDIF
  ENDIF
  RESULT:= ProcessTheTemplate(ExtractApplicableTemplate(CurrentContactTemplate),pContactData,0)    
ENDFUNCTION

PROCEDURE ToggleSelect 
INSTRUCTIONS
  IF MultiSelect=yes THEN
    IF tCase.tSelected=EMPTY THEN
      tCase.tSelected:= cSelected 
      tCase.WRITE
      auxSelCount:= auxSelCount+1
    ELSE
      tCase.tSelected:= EMPTY
      tCase.WRITE
      auxSelCount:= auxSelCount-1
    ENDIF  
  ENDIF  
  //IF auxSelectMoveNext=yes AND NOT tCase.lastrecord THEN tCase.READNEXT ENDIF  
  tCase.GET(SECONDARY(secSort),tCase.TheSortValue) 
ENDPROCEDURE

PROCEDURE SelectCase
INSTRUCTIONS
  IF tCase.tSelected=EMPTY THEN
    tCase.tSelected:= cSelected 
    tCase.WRITE
    auxSelCount:= auxSelCount+1
    IF auxDoNotPosition=EMPTY THEN
      //IF auxSelectMoveNext=yes AND NOT tCase.lastrecord THEN tCase.READNEXT ENDIF
      tCase.GET(SECONDARY(secSort),tCase.TheSortValue)
    ENDIF   
  ENDIF  
ENDPROCEDURE

PROCEDURE UnSelectCase
INSTRUCTIONS
  IF tCase.tSelected<>EMPTY THEN
    tCase.tSelected:= EMPTY
    tCase.WRITE
    auxSelCount:= auxSelCount-1
    IF auxDoNotPosition=EMPTY THEN
      //IF auxSelectMoveNext=yes AND NOT tCase.lastrecord THEN tCase.READNEXT ENDIF
      tCase.GET(SECONDARY(secSort),tCase.TheSortValue)
    ENDIF   
  ENDIF 
ENDPROCEDURE

PROCEDURE SelectAllCases
AUXFIELDS
  aTheSortValue: STRING
INSTRUCTIONS
  IF tCase.FORMCOUNT>0 THEN
    auxDoNotPosition:= yes
    aTheSortValue:= tCase.TheSortValue
    tCase.SETREADKEY(PRIMARY)
    tCase.RESET
    REPEAT
      tcase.READNEXT
      if tCase.tSelected=EMPTY THEN SelectCase ENDIF
    UNTIL tcase.lastrecord
    tCase.GET(SECONDARY(secSort),aTheSortValue)
    tcase.RESET
    auxDoNotPosition:= EMPTY
    tCase.GET(SECONDARY(secSort),aTheSortValue)
    tCase.SETREADKEY(SECONDARY,secSort)
  ENDIF  
ENDPROCEDURE

PROCEDURE UnSelectAllCases
AUXFIELDS
  aTheSortValue: STRING
INSTRUCTIONS
  IF tCase.FORMCOUNT>0 THEN
    auxDoNotPosition:= yes
    aTheSortValue:= tCase.TheSortValue
    tCase.SETREADKEY(PRIMARY)
    tCase.RESET
    REPEAT
      tcase.READNEXT
      IF tCase.tSelected<>EMPTY THEN 
        UnSelectCase 
      ENDIF
    UNTIL tcase.lastrecord  
    tCase.SETREADKEY(SECONDARY,secSort)
    tcase.RESET
    auxDoNotPosition:= EMPTY
    tCase.GET(SECONDARY(secSort),aTheSortValue)
  ENDIF
ENDPROCEDURE

FUNCTION GetButtonTemplate: STRING
PARAMETERS pT: STRING
INSTRUCTIONS
  RESULT:= 
    '<button text="'+pT+'" width=auto height=auto OnClick="{Action ProcedureCall({Expression ShowImage()})}">'
ENDFUNCTION

AUXFIELDS //auxfields used in attempts dialog
  btnAttempts: (Quit EN "Back")           
  auxSeqNr: 1..999
  auxWhen : STRING[24]
  auxHappeningsStr : STRING[80]
  auxApptDate : STRING[20]
  auxApptTime : STRING[20]
  auxNote : OPEN,EMPTY
  auxLast: INTEGER
  auxLocked: 0..1  //1 = not allowed to add new attempt
  auxAllowView: (yes),EMPTY
  auxReadOnlySettingsName: STRING
  
FUNCTION MaxStr: STRING
PARAMETERS
  pStr1, pStr2: STRING
INSTRUCTIONS
  IF pStr1>=pStr2 THEN RESULT:= pStr1 ELSE RESULT:= pStr2 ENDIF
ENDFUNCTION    

FUNCTION MinStr: STRING
PARAMETERS
  pStr1, pStr2: STRING
INSTRUCTIONS
  IF pStr1='' THEN Result:= pStr2 
  ELSEIF
    pStr2='' THEN RESULT:= pStr1 
  ELSEIF
    pStr1<=pStr2 THEN RESULT:= pStr1 
  ELSE RESULT:= pStr2 ENDIF
ENDFUNCTION    
    
FUNCTION NewRow: OPEN
PARAMETERS pText, pValue: STRING
INSTRUCTIONS
  RESULT:= '<row>'+NewCell(pText,pValue)+'</row>'
ENDFUNCTION

FUNCTION NewCell: OPEN
PARAMETERS pText, pValue: STRING
INSTRUCTIONS
  RESULT:= '<cell margin="4,2,4,2"><left>'+pText+'</left></cell>'+
           '<cell margin="4,2,4,2" background=lightgray><left>'+pValue+'</left></cell>'
ENDFUNCTION

FUNCTION NewDoubleCell: OPEN
PARAMETERS 
  pText1, pValue1: STRING
  pText2, pValue2: STRING
INSTRUCTIONS
  RESULT:= NewCell(pText1,pValue1)+NewCell(pText2,pValue2)
ENDFUNCTION  

FUNCTION New4Colums: OPEN
PARAMETERS 
  pText1, pValue1: STRING
  pText2, pValue2: STRING
INSTRUCTIONS
  RESULT:= '<row>'+NewDoubleCell(pText1,pValue1,pText2,pValue2)+'</row>'
ENDFUNCTION

FUNCTION NewTable:OPEN
INSTRUCTIONS
  RESULT:= '<table borderwidth=1 bordercolor=black grid=both gridwidth=1><column width=auto><column width=*><column width=auto><column width=*>'
ENDFUNCTION

FUNCTION SecondsToTimeStr: STRING
PARAMETERS pSeconds: INTEGER
AUXFIELDS
  hours, secondsleft, minutes, seconds: INTEGER
INSTRUCTIONS
  hours := pSeconds div 3600
  secondsLeft := pSeconds - hours * 3600
  minutes := secondsLeft div 60
  seconds := secondsLeft - minutes * 60
  RESULT:= ToString(hours,'00')+':'+ToString(minutes,'00')+':'+ToString(seconds,'00')
ENDFUNCTION

FUNCTION CreateCaseDetailsTable: OPEN
INSTRUCTIONS
  RESULT:= ''
ENDFUNCTION

PROCEDURE ComputeStatistics
AUXFIELDS
  Index, I: INTEGER
  auxT: OPEN
  aResults: OPEN
  tmp: STRING
  aInterviews: INTEGER
INSTRUCTIONS
  tCase.RESET
  auxS_OutcomeCode:= EMPTY
  auxS_Status:= EMPTY
  auxS_StatusC:= EMPTY
  auxS_FirstDownloaded:= '9999'
  auxS_LastDownloaded:= EMPTY
  auxS_FirstUploaded:= '9999'
  auxS_LastUploaded:= EMPTY
  auxS_LastAttempt:= EMPTY
  auxS_FirstInterviewTime:= '9999'
  auxS_LastInterviewTime:= EMPTY
  auxS_LastInterviewEndTime:= EMPTY
  auxS_TotalInterviewTimeUsed:= EMPTY
  auxS_Appointments:= EMPTY
  auxS_Attempts:= EMPTY
  auxS_NumberofCases:= tCase.FORMCOUNT
  FOR Index:= 1 TO auxS_NumberofCases DO
    tCase.READNEXT
    CASE tCase.tCMA_Status OF
    '':            auxS_Status[0]:= cNotStarted  auxS_StatusC[0]:= auxS_StatusC[0] +1
    'Started':     auxS_Status[1]:= cStarted     auxS_StatusC[1]:= auxS_StatusC[1] +1
    'Interrupted': auxS_Status[2]:= cInterrupted auxS_StatusC[2]:= auxS_StatusC[2] +1
    'Completed':   auxS_Status[3]:= cCompleted   auxS_StatusC[3]:= auxS_StatusC[3] +1
    'Finalized':   auxS_Status[4]:= cFinalized   auxS_StatusC[4]:= auxS_StatusC[4] +1
    'Added':       auxS_Status[5]:= cAdded       auxS_StatusC[5]:= auxS_StatusC[5] +1
    'Reopened':    auxS_Status[6]:= cReopened    auxS_StatusC[6]:= auxS_StatusC[6] +1
    'Done':        auxS_Status[7]:= cDone        auxS_StatusC[7]:= auxS_StatusC[7] +1
    'Closed':      auxS_Status[8]:= cClosed      auxS_StatusC[8]:= auxS_StatusC[8] +1
    'Accepted':    auxS_Status[9]:= cAccepted    auxS_StatusC[9]:= auxS_StatusC[9] +1
    ENDCASE 
    auxS_FirstDownloaded:= MinStr(auxS_FirstDownloaded,tCase.tProcess.FirstDownloaded.When)
    auxS_LastDownloaded:= MaxStr(auxS_LastDownloaded,tCase.tProcess.LastDownloaded.When)
    auxS_FirstUploaded:= MinStr(auxS_FirstUploaded,tCase.tProcess.FirstUploaded.When)
    auxS_LastUploaded:= MaxStr(auxS_LastUploaded,tCase.tProcess.LastUploaded.When)
    auxS_LastAttempt:= MaxStr(auxS_LastAttempt,tCase.tProcess.LastAttempt.When)
    auxS_FirstInterviewTime:= MinStr(auxS_FirstInterviewTime,tCase.tProcess.FirstInterviewTime.When)
    auxS_LastInterviewTime:= MaxStr(auxS_LastInterviewTime,tCase.tProcess.LastInterviewTime.When)
    auxS_LastInterviewEndTime:= MaxStr(auxS_LastInterviewEndTime,tCase.tProcess.LastInterviewEndTime)
    auxS_Attempts:= auxS_Attempts+ VAL(tCase.tAttemptsCount)
    IF tCase.tProcess.TotalInterviewTimeUsed<>EMPTY THEN
      aInterviews:= aInterviews+1
      auxS_TotalInterviewTimeUsed:= auxS_TotalInterviewTimeUsed+tCase.tProcess.TotalInterviewTimeUsed
    ENDIF  
  ENDDO
  //some case specific items
  IF auxShowSummary=yes THEN
    IF auxS_NumberofCases>0 THEN
      IF auxS_FirstDownloaded='9999' THEN auxS_FirstDownloaded:= EMPTY ENDIF
      IF auxS_FirstUploaded='9999' THEN auxS_FirstUploaded:= EMPTY ENDIF
      IF auxS_FirstInterviewTime='9999' THEN auxS_FirstInterviewTime:= EMPTY ENDIF
      auxT:= NewTable
      FOR i:= 0 TO 9 DO
        IF auxS_Status[i]<>EMPTY THEN 
          IF aResults<>'' THEN aResults:= aResults+', ' ENDIF
          aResults:= aResults+'#'+auxS_Status[i]+': '+STR(auxS_StatusC[i]) 
        ENDIF
      ENDDO
      auxT:= auxT + New4Colums(cNrOfCases,STR(auxS_NumberofCases)+' ('+aResults+')',cNumberOfAttempts,STR(auxS_Attempts))
      IF auxS_LastAttempt<>'' THEN 
        IF auxS_FirstInterviewTime<>'' THEN tmp:= DateForDisplay(auxS_FirstInterviewTime)+' / '+DateForDisplay(auxS_LastInterviewTime) ELSE tmp:= '' ENDIF
        auxT:= auxT+New4Colums(cLastAttempt,DateForDisplay(auxS_LastAttempt),cFirstLastInterviewTime,tmp) 
      ENDIF
      IF auxS_LastInterviewEndTime<>'' THEN 
        auxT:= auxT+New4Colums(cLastInterviewEndTime,DateForDisplay(auxS_LastInterviewEndTime),
                               cTotalInterviewTimeUsed,SecondsToTimeStr(auxS_TotalInterviewTimeUsed)+' ('+SecondsToTimeStr(auxS_TotalInterviewTimeUsed/aInterviews)+')') ENDIF
      IF isettings.sShowUDinSummary=yes THEN
        IF auxS_FirstDownloaded<>EMPTY THEN
          IF auxS_FirstUploaded<>'' THEN tmp:= DateForDisplay(auxS_FirstUploaded)  + ' / '+DateForDisplay(auxS_LastUploaded) ELSE tmp:= '' ENDIF
          auxT:= auxT+New4Colums(cFirstLastDownloaded,DateForDisplay(auxS_FirstDownloaded)+ ' / '+DateForDisplay(auxS_LastDownloaded),
                                 cFirstLastUploaded,  tmp) 
        ENDIF
      ENDIF  
      auxT:= auxT+ '</table>'
    ENDIF 
  ENDIF   
  auxStatisticsDetailsTable:= auxT
  tCase.RESET
ENDPROCEDURE  

FUNCTION ProcessTheTemplate: OPEN
PARAMETERS
  pTemplate: OPEN
  pContactData: OPEN
  pAttemptsDlg: INTEGER //0=No, 1=Yes
AUXFIELDS
  aStr: OPEN
  aSep1,aSep2: STRING
  p,c: INTEGER
  tmp: STRING
  aName, aValue, aStatus, bText: STRING
INSTRUCTIONS
  aStr:= pTemplate
  IF pAttemptsDlg=1 THEN
    aStr:= REPLACE(aStr,'$Att_Note',auxNote,TRUE)
    aValue:= ''
    IF auxApptDate<>EMPTY THEN aValue:= auxApptDate+', '+auxApptTime ENDIF
    aStr:= REPLACE(aStr,'$Att_Appointment',aValue,TRUE)
    aStr:= REPLACE(aStr,'$Att_Result',auxHappeningsStr,TRUE)
    IF auxSeqNr>=1 THEN
      aStr:= REPLACE(aStr,'$Att_SeqNr',STR(auxSeqNr),TRUE)
    ELSE
      aStr:= REPLACE(aStr,'$Att_SeqNr','',TRUE)
    ENDIF  
    aStr:= REPLACE(aStr,'$Att_When',auxWhen,TRUE)
  ENDIF
  aStr:= ReplaceVarsInTemplate(aStr,pContactData)
  aStr:= REPLACE(aStr,'$ID',currentCaseID,TRUE)
  aStr:= REPLACE(aStr,'$MainSurveyID',currentCaseGUID,TRUE)
  IF POSITION('$CaseOrGroupStatus',aStr)>0 THEN
    aStatus:=''
    IF auxParentChildView=EMPTY THEN //on main cases screen...
      IF tCase.tGroupType=Parent AND tCase.tAllowSpawning<>yes THEN
        aStatus:= auxGroupStatus
      ELSE  
        aStatus:= auxStatus
      ENDIF  
    ELSE
      aStatus:= auxStatus
    ENDIF
    aStr:= REPLACE(aStr,'$CaseOrGroupStatus',aStatus,TRUE)
  ENDIF  
  aStr:= REPLACE(aStr,'$CMA_Status',auxStatus,TRUE)
  aStr:= REPLACE(aStr,'$CMA_LastAttempt',auxLastAttempt,TRUE)
  IF POSITION('$CMA_LastResult',aStr)>0 THEN
    IF auxParentChildView=EMPTY AND tCase.tGroupType=Parent AND 
       tCase.tAllowSpawning<>yes AND iSettings.sHideResultOfParent=yes
    THEN
      aStr:= REPLACE(aStr,'$CMA_LastResult','',TRUE)
    ELSE  
      aStr:= REPLACE(aStr,'$CMA_LastResult',auxLastResult,TRUE)
    ENDIF  
  ENDIF
  aStr:= REPLACE(aStr,'$CMA_Geolocation',auxGeoLocation,TRUE)
  tmp:= tCase.tAppointment
  IF iSettings.sTodayAppointmentPreFix<>'' THEN
    tmp:= REPLACE(tmp,iSettings.sTodayAppointmentPreFix,'')
  ENDIF  
  IF iSettings.sTodayAppointmentDetail<>EMPTY AND tCase.tAppForToday=yes THEN
    tmp:= '<'+iSettings.sTodayAppointmentDetail+'>'+tmp+'</'+iSettings.sTodayAppointmentDetail+'>'
  ENDIF
  aStr:= REPLACE(aStr,'$CMA_Appointment',tmp,TRUE)
  aStr:= REPLACE(aStr,'$CMA_AttemptsCount',tCase.tAttemptsCount,TRUE)
  aStr:= REPLACE(aStr,'$ContactInfoShort',tCase.tContactInfoShort,TRUE)
  IF POSITION('$CMA_CustomUse(',aStr)>0 THEN
    IF iSettings.sCustomDataSep=EMPTY AND iSurveySettings.Survey_CustomDataSep=EMPTY THEN
      IF POSITION(cTab,tCase.tCustomUse)>0 THEN aSep1:= cTab aSep2:= cTab
      ELSEIF POSITION(';',tCase.tCustomUse)>0 THEN aSep2:= ';' aSep1:= '=' //the old default...
      ELSE aSep2:= ',' aSep1:= '=' ENDIF
    ELSE
      aSep1:= customDataSep(1)
      aSep2:= customDataSep(2)
    ENDIF  
    REPEAT
      p:= POSITION('$CMA_CustomUse(',aStr)
      IF p>0 THEN
        c:= POSITION(')',aStr,p)
        IF c>0 THEN
          aName:= SUBSTRING(aStr,p+LEN('$CMA_CustomUse('),c-p-LEN('$CMA_CustomUse('))
          aValue:= GetEntryOnName(tCase.tCustomUse,aName,aSep1,aSep2)
          aStr:= REPLACE(aStr,'$CMA_CustomUse('+aName+')',aValue)
        ENDIF
      ENDIF    
    UNTIL p=0 OR c=0
  ELSE
    aStr:= REPLACE(aStr,'$CMA_CustomUse',tCase.tCustomUse,TRUE)
  ENDIF
  aStr:= REPLACE(aStr,'$CMA_SpawnCount',tCase.tSpawnCount,TRUE)
  aStr:= REPLACE(aStr,'$CMA_GroupStatus',auxGroupStatus,TRUE)
  aStr:= REPLACE(aStr,'$CMA_GroupSummary',auxGroupSummary,TRUE)
  IF POSITION('$CMA_GroupSum_',aStr)>0 THEN
    p:= POSITION('#=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_#',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('A=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_A',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('S=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_S',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('I=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_I',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('D=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_D',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('C=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_C',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('F=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_F',SUBSTRING(auxGroupSummary,p+2,position(',',auxGroupSummary,p)-p-2),TRUE) ENDIF
    p:= POSITION('R=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_R',SUBSTRING(auxGroupSummary,p+2,5),TRUE) ENDIF
    p:= POSITION('L=',auxGroupSummary)
    IF P>0 THEN aStr:= REPLACE(aStr,'$CMA_GroupSum_L',SUBSTRING(auxGroupSummary,p+2,5),TRUE) ENDIF
  ENDIF    
  IF tCase.tStartDate<>EMPTY THEN
    IF iSettings.sShowDateFormat<>EMPTY THEN
      aStr:= REPLACE(aStr,'$CMA_StartDate',DATETOSTR(tCase.tStartDate,iSettings.sShowDateFormat),TRUE)
    ELSE
      aStr:= REPLACE(aStr,'$CMA_StartDate',DATETOSTR(tCase.tStartDate,'d',CURRENTCULTURE),TRUE)
    ENDIF  
  ELSE
    aStr:= REPLACE(aStr,'$CMA_StartDate','',TRUE)
  ENDIF
  IF tCase.tEndDate<>EMPTY THEN
    IF iSettings.sShowDateFormat<>EMPTY THEN
      aStr:= REPLACE(aStr,'$CMA_EndDate',DATETOSTR(tCase.tEndDate,iSettings.sShowDateFormat),TRUE)
    ELSE
      aStr:= REPLACE(aStr,'$CMA_EndDate',DATETOSTR(tCase.tEndDate,'d',CURRENTCULTURE),TRUE)
    ENDIF      
  ELSE
    aStr:= REPLACE(aStr,'$CMA_EndDate','',TRUE)
  ENDIF
//  bText:= cShowImage
//  IF auxHasImage=yes THEN
//    aStr:= REPLACE(aStr,'$CMA_ContactImage',GetButtonTemplate(bText),TRUE)
//  ELSE  
    aStr:= REPLACE(aStr,'$CMA_ContactImage','',TRUE)
//  ENDIF
  RESULT:= aStr
ENDFUNCTION

PROCEDURE ExtractAttemptsFromCase
AUXFIELDS 
  iRes: INTEGER 
  aFName: STRING
INSTRUCTIONS
  IF tCase.tAttemptsData<>EMPTY THEN
    aFName:= [[tCase.GetField('tAttemptsData').DataValue.BlobValue.FileName]]
    iRes:= tCase.tAttemptsData.SAVETODISK(aFName)
    IF iRes=0 THEN
      GetSurveySettings(tCase.tMainSurveyID)
      SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(tCase.tAttemptsGUID))
      iRes:= iAttempts.OPEN(aFName)
      IF iRes=0 THEN
        REPEAT
          iAttempts.READNEXT
          IF iAttempts.RESULTOK THEN
            IF iAttempts.GETVALUE('MainSurveyID')=tCase.tMainSurveyID AND 
               iAttempts.GETVALUE('ID')=tCase.tIdentifier THEN //just an extra precaution...
              ufAttempts:= iAttempts
              ufAttempts.Write
            ELSE
              AddToLog('Problem with extracting attempts for '+tCase.tMainSurveyID+' '+tCase.tIdentifier)  
            ENDIF  
          ELSE
            AddToLog('Read failed while restoring attempts for '+tCase.tMainSurveyID+' '+tCase.tIdentifier)  
          ENDIF  
        UNTIL iAttempts.LASTRECORD OR NOT iAttempts.RESULTOK
        iAttempts.RELEASE
        {$IFNDEF Develop}
        iRes:= DELETEFILE(aFName)
        {$ENDIF}
      ELSE
        AddToLog('Problem with opening '+aFName+'. Error:'+STR(iRes))  
      ENDIF   
    ELSE
      AddToLog('Problem saving attempts for '+tCase.tMainSurveyID+' '+tCase.tIdentifier+'. Error:'+STR(iRes))  
    ENDIF   
  ENDIF
ENDPROCEDURE

PROCEDURE AddAttemptToList
PARAMETERS 
  pLast: INTEGER
AUXFIELDS
  aStr: STRING  
  aCod: STRING
  aLab: STRING
INSTRUCTIONS
  auxLocked:= EMPTY
  tAttempt.INITRECORD 
  tAttempt.atMainSurveyID:= ufAttempts.GETVALUE('MainSurveyID')
  tAttempt.atID:= ufAttempts.GETVALUE('ID')
  tAttempt.SeqNr:= VAL(ufAttempts.GETVALUE('SeqNr'))
  tAttempt.When:= DateForDisplay(ufAttempts.GETVALUE('WhenMade.When'))
  aCod:= ufAttempts.GETVALUE('Happenings',UNFORMATTED)
  if iSettings.sShowResult in [rStrOnly,rBoth] OR iSettings.sShowResult=EMPTY THEN 
    aStr:= GetCategoryText([[attempts]],'Happenings',GetCategoryName(ACTIVELANGUAGE),VAL(aCod)) 
  ENDIF 
  aLab:= ufAttempts.GETVALUE('Happenings')
  CASE iSettings.sShowResult OF
    rCodeOnly: tAttempt.HappeningsStr:= aCod
    rStrOnly:  tAttempt.HappeningsStr:= aStr
    rBoth:     tAttempt.HappeningsStr:= aCod+':'+aStr
    rLabOnly:  tAttempt.HappeningsStr:= aLab
    rCodeLab:  tAttempt.HappeningsStr:= aCod+':'+aLab  
    ELSE
      tAttempt.HappeningsStr:= aCod+':'+aStr
  ENDCASE
  tAttempt.TheLastOne:= pLast
  IF pLast=1 and ufAttempts.GETVALUE('CMA_CaseClosed',UNFORMATTED)='1' AND tCase.tCMA_Status IN ['Completed','Finalized'] THEN
    auxLocked:= 1
  ENDIF  
  tAttempt.WRITE
ENDPROCEDURE

PROCEDURE ProcessAttempts
AUXFIELDS 
  index: INTEGER 
  aLast: 0..1
INSTRUCTIONS
  AddToLog('Process attempts: '+CurrentCaseGUID+' '+CurrentCaseID)
  SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(tCase.tAttemptsGUID))
  if aShowGroup=yes THEN
    tGrpCase.GET(CurrentCaseGUID,CurrentCaseID)
    tcase:= tGrpCase
  ELSE
    tCase.GET(CurrentCaseGUID,CurrentCaseID)
  endif  
  ufAttempts.SETRECORDFILTER('mainsurveyid=\''+CurrentCaseGUID+'\' and id=\''+CurrentCaseID+'\'')
  tAttempt.ERASE
  aLast:= 0
  auxLocked:= EMPTY
  auxSeqNr:= EMPTY
  auxWhen:= EMPTY
  auxHappeningsStr:= EMPTY
  auxApptDate:= EMPTY
  auxApptTime:= EMPTY
  AuxNote:= ''
  FOR index:= 1 TO ufAttempts.FORMCOUNT DO
    ufAttempts.READNEXT
    IF index=ufAttempts.FORMCOUNT THEN aLast:= 1 ENDIF
    AddAttemptToList(aLast)
  ENDDO 
  ufAttempts.SETRECORDFILTER('')
ENDPROCEDURE

PROCEDURE ProcessAttemptsAndStartDialog
AUXFIELDS
  CIS: STRING
  iRes: INTEGER
INSTRUCTIONS
  IF tCase.tMainSurveyID<>'' THEN
    CurrentCaseGuid:= tCase.tMainSurveyID
    CurrentCaseID:= tCase.tIdentifier
    GetSurveySettings(CurrentCaseGUID)
    auxReadOnlySettingsName:= EMPTY
    auxAllowView:= EMPTY
    CIS:= tCase.tContactInfoShort
    AddToLog('Attempts dialog for '+CurrentCaseGuid+' - '+CurrentCaseID)
    AuxNote:= ''
    ProcessAttempts
    tAttempt.RESET
    tAttempt.INITRECORD
    //focus last attempt
    IF tAttempt.RECORDCOUNT>1 THEN
      tAttempt.GET(CurrentCaseGUID,CurrentCaseID,tAttempt.RECORDCOUNT)
    ENDIF
    IF tAttempt.RECORDCOUNT>1 THEN
      tAttempt.GET(CurrentCaseGUID,CurrentCaseID,tAttempt.formcount)
    ENDIF
    dAttempts(msgAttemptsForCase+' '+CIS)
    //PositionOnCurrentRecord
  ENDIF  
ENDPROCEDURE

DATASOURCE mAttempts:tAttempt
SEARCHKEY=PRIMARY
FIELDFILTER=SeqNr, When, HappeningsStr

DIALOG dAttempts "Attempts" 
  DATASOURCEREFS mAttempts ""
  FIELDREFS  
    auxLast,auxWhen,auxHappeningsStr,auxApptDate,auxApptTime,auxNote,auxLocked,
    auxHasInterview,auxAllowView,auxReadOnlySettingsName,
    auxAttemptsDetails, auxCustomDetailsTable,
    btnAttempts(Quit)
  RULES
    auxLocked.KEEP
    auxWhen.KEEP
    auxHappeningsStr.KEEP
    auxApptDate.KEEP
    auxLast.KEEP
    auxHasInterview.KEEP
    auxAllowView.KEEP
    auxReadOnlySettingsName.KEEP
    auxCustomDetailsTable.KEEP
    auxApptDate.KEEP
    auxApptTime.KEEP
    auxNote.KEEP 
    auxAttemptsDetails.SHOW

AUXFIELDS // Auxfields Custom Scripts dialog     
  auxScriptID: STRING[36], empty
  auxScriptName EN "Script name": STRING, empty
  auxScriptSetup EN "Script file" : OPEN, empty
  auxScriptParameters EN "Parameters" : OPEN, empty 
  auxScriptAction: (StartScript, EditScript, AddScript, DeleteScript), empty
  auxScriptActionResult: INTEGER, empty
  auxScriptEdited : (yes), EMPTY
  btnCustomScripts: (
                     Add      EN "Add" TOOLTIP "Add a script",  // add a new report
                     Edit     EN "Edit" TOOLTIP "Edit the selected script",  // make changes to the selected report
                     Delete   EN "Delete" TOOLTIP "Delete the selected script", // delete a report from the list
                     Start    EN "Start" TOOLTIP "Start the selected script",  // start the currently selected report
                     Cancel   EN "Back"
                     ) ,EMPTY
  btnCustomScriptsActions: (
                     Cancel   EN "Back",
                     OK       EN "OK"
                     ) ,EMPTY                     
  
DATASOURCE mCustomScripts:tCustomScript
SEARCHKEY=PRIMARY
FIELDFILTER=sScriptName, sScriptSetup, sScriptParameters

DIALOG dCustomScripts "Custom Scripts" 
  DATASOURCEREFS mCustomScripts ""
  FIELDREFS  
   auxScriptAction 
   auxWhatSurveyToShow
   btnCustomScripts(Cancel)
RULES
   auxWhatSurveyToShow.ASK
   auxScriptAction.KEEP
      
DIALOG dScriptActions "Script Action"
  FIELDREFS  
   auxScriptID 
   auxScriptName
   auxScriptSetup
   auxScriptParameters
   auxScriptActionResult
   auxScriptAction
   btnCustomScriptsActions(Cancel)
RULES
  auxScriptID.keep
  auxScriptName.ASK
  auxScriptSetup.ASK
  auxScriptParameters.ASK  
  auxScriptActionResult.KEEP
  auxScriptAction.KEEP
  
PROCEDURE OpenScriptActionDialog
AUXFIELDS
   sScriptActionHeader: STRING
INSTRUCTIONS
   auxScriptActionResult:= 0
   auxScriptEdited := EMPTY
   IF auxScriptAction=AddScript THEN
      sScriptActionHeader:= cNewScript
      auxScriptID:= EMPTY
      auxScriptName:= EMPTY
      auxScriptSetup:= EMPTY
      auxScriptParameters:= EMPTY
   ELSE 
      auxScriptID:= tCustomScript.sScriptID
      auxScriptName:= tCustomScript.sScriptName
      auxScriptSetup:= tCustomScript.sScriptSetup
//      IF auxScriptAction=StartScript THEN
//         auxScriptSetup:= ExtractFileName(auxScriptSetup)
//      ENDIF
      auxScriptParameters:= tCustomScript.sScriptParameters
      IF auxScriptAction=DeleteScript THEN
         sScriptActionHeader:= cDeleteScript + ' ' + auxScriptName
      ELSEIF auxScriptAction=EditScript THEN
         sScriptActionHeader:= cEditScript + ' ' + auxScriptName
      ELSEIF auxScriptAction=StartScript THEN
         sScriptActionHeader:= cStartScript + ' ' + auxScriptName
      ENDIF
   ENDIF
    // init fields
   dScriptActions (sScriptActionHeader)
ENDPROCEDURE

PROCEDURE SelectScriptFile
AUXFIELDS aFile : OPEN
INSTRUCTIONS
   aFile := SELECTFILE('Select Manipula report script','', 'Prepared Manipula setup (*.msux)|*.msux')
   IF aFile <> '' THEN // only if a file is chosen
      auxScriptSetup := aFile
      auxScriptEdited := yes
   ENDIF
ENDPROCEDURE

// pCmdLine: Current command line (will be altered)
// pParam: Parameter to change/add to in the form of V, Quit, Q, etc.
// pArg: Argument to be assigned/added to pParam e.g. true, pInstrumentId=123, etc.
// pReplace: 0=Add to current value of pParam, 1=Replace current value of pParam. 
PROCEDURE AddParameter
PARAMETERS
   TRANSIT pCmdLine : OPEN
   IMPORT pParam : STRING
   IMPORT pArg : OPEN
   IMPORT pReplace : 0..1
AUXFIELDS
   aParam : STRING
   OldP, NewP : OPEN
INSTRUCTIONS
   aParam := '-'+pParam
   IF POSITION(aParam, pCmdLine) = 0 THEN
      pCmdLine := pCmdLine+' ' +aParam+':'+pArg
   ELSE
      OldP := aParam+':' + GetEntryOnName(pCmdLine, aParam, ':', ' ')    
      IF pReplace = 0 THEN
         NewP := OldP
         IF NewP <> aParam+':' THEN // there's not just a -{aParam}: without an argument
            NewP := NewP + ','
         ENDIF
         NewP := NewP + pArg
      ELSE
         NewP := aParam+':'+pArg
      ENDIF
      pCmdLine := REPLACE(pCmdLine, OldP, NewP)
   ENDIF
ENDPROCEDURE

// Zip all of the bmix files in the same folder as the msux
// There must be at least one bmix, so an empty result means something went wrong
// Otherwise, the result refers to the new zipfile
FUNCTION ZipDatamodels : OPEN
PARAMETERS pSetup : OPEN
AUXFIELDS
   aPath : OPEN
   Res : INTEGER
   aZipCmd : OPEN
INSTRUCTIONS
   aPath := ExtractFilepath(pSetup)
   RESULT := REPLACE(pSetup, '.msux', '.zip')
   IF FILEEXISTS(RESULT) THEN Res := DELETEFILE(RESULT) ENDIF
   aZipCmd := '"'+RESULT + '" -P:True -W:'+aPath + ' *.bmix'
   Res := ZIPFILES(aZipCmd)
   IF Res < 1 THEN RESULT := '' ENDIF // there should be at least one
ENDFUNCTION

PROCEDURE ProcessScriptActionResult
AUXFIELDS
   dRes: INTEGER
   sValidation: STRING
   sReportPath: STRING
   sParameters: OPEN
   sZipfile : OPEN
   sReportfile : OPEN
   sLauncher, sAttempts, sTopic : OPEN
INSTRUCTIONS
   dRes:= 0
   IF auxScriptAction=DeleteScript THEN
      // delete script
      sdCustomScript.RESET
      sdCustomScript.GET(primary, auxScriptID)
      IF sdCustomScript.RESULTOK then
         sdCustomScript.DELETE
         IF sdCustomScript.IOResultCode=0 THEN
            AddToLog('Custom script deleted with id: ' + auxScriptID + ' and name ' + auxScriptName)
         ELSE
            dRes:= sdCustomScript.IOResultCode   
            AddToLog('Custom script deletion failed for id: ' + auxScriptID + ' and name ' + auxScriptName + ' IOResultCode: ' + STR(dRes))
         ENDIF
      ENDIF
   ELSEIF auxScriptAction=EditScript THEN
      // save changes
      sdCustomScript.GET(primary, auxScriptID)
      IF sdCustomScript.RESULTOK THEN
         sValidation:= ValidateReport
         IF sValidation=EMPTY THEN
            sdCustomScript.ScriptName:= auxScriptName
            sdCustomScript.ScriptParameters:= auxScriptParameters
            IF auxScriptEdited = yes THEN
               sdCustomScript.ScriptFile:= ExtractFileName(auxScriptSetup)
               dRes:= sdCustomScript.ScriptMsux.LoadFromDisk(auxScriptSetup)
               sZipfile := ZipDatamodels(auxScriptSetup)
               dRes := sdCustomScript.ScriptDatamodels.LoadFromDisk(sZipFile)
            ENDIF
            IF auxScriptEdited <> yes OR (auxScriptEdited = yes AND sZipfile <> '') THEN
               sdCustomScript.WRITE
               AddToLog('Custom script updated with id: ' + auxScriptID + ' and name ' + auxScriptName)
            ELSE
               dRes:= 1
               DISPLAY(cScriptCannotSave + cNoDatamodelsFound, WAIT)
            ENDIF
         ELSE 
            dRes:= 1
            DISPLAY(cScriptCannotSave + sValidation, WAIT)        
         ENDIF
      ENDIF
   ELSEIF auxScriptAction=StartScript THEN
      // try to start the script
      sdCustomScript.GET(primary, auxScriptID)
      IF sdCustomScript.RESULTOK THEN
         IF sdCustomScript.ScriptMsux<>EMPTY AND auxScriptSetup<>EMPTY THEN
            sReportPath:= SetupPath + cScriptFolder
            IF FOLDEREXISTS(sReportPath) THEN dRes := DELETEFOLDER(sReportPath) ENDIF
            dRes := CREATEFOLDER(sReportPath)
            sReportFile := sReportPath + auxScriptSetup
            sZipfile := sReportPath + [[sdCustomScript.GetField('ScriptDatamodels').DataValue.BlobValue.FileName]]
            AddToLog('Extracting report script to ' + sReportFile)
            dRes:= sdCustomScript.ScriptMsux.SAVETODISK(sReportFile) + sdCustomScript.ScriptDatamodels.SAVETODISK(sZipfile)
            IF dRes=0 THEN
               dRes := UNZIPFILES(sZipfile + ' -D:' + sReportPath)
               sParameters:= auxScriptParameters
               AddParameter(sParameters, 'Q', 'True', 1)
               AddParameter(sParameters, 'K', 'launcher="'+[[Launcher.FileName]]+ '"', 0) 
               AddParameter(sParameters, 'K', 'attempts="'+GetAttemptsDatamodelFileForSurvey(SelectedReportSurvey)+ '"', 0) 
               AddParameter(sParameters, 'K', 'logmeta="'+[[LogMeta.filename]]+'"', 0)
               AddParameter(sParameters, 'N', 'olog="'+olog.pathname + olog.filename+'"', 0)
               IF SelectedReportSurvey <> '' THEN 
                  srvList.GET(SelectedReportSurvey)
                  IF srvList.RESULTOK AND srvList.SurveyState = InstalledOnClient THEN
                     AddParameter(sParameters, 'K', 'topic="'+srvList.GetSurveyDataFileName+ '"', 0) 
                     AddParameter(sParameters, 'V', 'pTopicLoaded=1', 0)
                  ENDIF
               ENDIF
               tInterchange.Message := ''
               AddToLog('Starting script ' + sReportFile + ' with parameters: ' + sParameters)
               dRes:= CALL(sReportFile + ' ' + sParameters, tInterchange)
               IF dRes=0 THEN
                  AddToLog('Script successfully executed: ' + auxScriptSetup)
                  DISPLAY(tInterchange.Message, WAIT)
                  //Display(cScriptExecutedSuccess  + auxScriptSetup, WAIT)
               ELSE
                  AddToLog('Manipula script failed to execute. Error code: ' + STR(dRes))
                  Display(cScriptExecutionError + STR(dRes), WAIT)
                  dRes:= 1
               ENDIF
            ELSE
               // msux save to disk failed
               AddToLog('Msux save to disk failed.  Error code: ' + STR(dRes))
               Display(cScriptExecutionError + STR(dRes), WAIT)
            ENDIF
         ENDIF
      ENDIF
   ELSE 
      // insert a new script
      sValidation:= ValidateReport
      IF sValidation=EMPTY THEN
         auxScriptID:= NEWGUID 
         sdCustomScript.INITRECORD
         sdCustomScript.ScriptID:= auxScriptID
         sdCustomScript.ScriptName:= auxScriptName
         sdCustomScript.ScriptFile:= ExtractFileName(auxScriptSetup)
         sdCustomScript.ScriptParameters:= TRIM(auxScriptParameters)
         dRes:= sdCustomScript.ScriptMsux.LoadFromDisk(auxScriptSetup)
         sZipfile := ZipDatamodels(auxScriptSetup)
         IF sZipfile <> '' THEN
            dRes := sdCustomScript.ScriptDatamodels.LoadFromDisk(sZipFile)
            sdCustomScript.WRITE
            AddToLog('Custom script added with id: ' + auxScriptID + ' and name ' + auxScriptName)
         ELSE
            dRes := 1
            DISPLAY(cNoDatamodelsFound, WAIT)
         ENDIF
      ELSE
         dRes:= 1
         DISPLAY(cCannotSaveReport + sValidation, WAIT)        
      ENDIF
   ENDIF 
   // refresh grid
   RefreshCustomReports
   auxScriptActionResult:= dRes  
ENDPROCEDURE


FUNCTION ValidateReport: STRING
INSTRUCTIONS
   IF TRIM(auxScriptSetup)='' THEN
      RESULT:= cScriptFileCannotbeEmpty
   ELSEIF POSITION('.msux', LOWERCASE(auxScriptSetup))=0 THEN
      RESULT:= cScriptIsnotAManipulaScript
   ELSEIF TRIM(auxScriptName)='' THEN
      RESULT:= cPleaseProvideAScriptName
   ELSEIF auxScriptAction = AddScript AND NOT FILEEXISTS(auxScriptSetup) THEN
      RESULT:= cScriptDoesntExists
   ELSEIF auxScriptAction = EditScript AND auxScriptEdited = yes AND NOT FILEEXISTS(auxScriptSetup)THEN
      RESULT:= cScriptDoesntExists
   ELSE
      RESULT:=EMPTY
   ENDIF
ENDFUNCTION
  
PROCEDURE OnReportSelection
INSTRUCTIONS
      auxScriptID:= tCustomScript.sScriptID
      auxScriptName:= tCustomScript.sScriptName
      auxScriptSetup:= tCustomScript.sScriptSetup
      auxScriptParameters:= tCustomScript.sScriptParameters
ENDPROCEDURE


PROCEDURE OpenMaintainUserInfoActionDialog
AUXFIELDS
   sUIHeader: STRING
INSTRUCTIONS
   IF auxUIAction=AddMUI THEN
      sUIHeader:= cAddUserInfo
      auxUIUserID:= EMPTY
      auxUIUserFullName:= EMPTY
      auxUIUserType:= interviewer
      auxUIManagerID:= EMPTY      
   ELSE 
      auxUIUserID:= tUsers.sUserID
      auxUIUserFullName:= tUsers.sUserFullName
      auxUIUserType:= tUsers.sUserType
      auxUIManagerID:= tUsers.sManagerID
      IF auxUIAction=DeleteMUI THEN
         sUIHeader:= cDeleteUserInfo + ' ' + auxUIUserID
      ELSEIF auxUIAction=EditMUI THEN
         sUIHeader:= cEditUserInfo + ' ' + auxUIUserID
      ENDIF
   ENDIF
   dMaintainUserInfoAction(sUIHeader)
ENDPROCEDURE

PROCEDURE InitiateReportAction
AUXFIELDS
   sScriptActionHeader: STRING
INSTRUCTIONS
   IF auxScriptAction=DeleteScript THEN
      sScriptActionHeader:= cDeleteScript + ' ' + auxScriptName
   ELSEIF auxScriptAction=EditScript THEN
      sScriptActionHeader:= cEditScript + ' ' + auxScriptName
   ELSEIF auxScriptAction=StartScript THEN
      sScriptActionHeader:= cStartScript + ' ' + auxScriptName
   ELSE 
      // init fields
      sScriptActionHeader:= cNewScript
      auxScriptID:= NEWGUID
      auxScriptName:= EMPTY
      auxScriptSetup:= EMPTY
      auxScriptParameters:= EMPTY      
   ENDIF   
   dScriptActions (sScriptActionHeader)
ENDPROCEDURE

AUXFIELDS // Auxfields Maintain user info dialogs     
   auxUIAction: (AddMUI,EditMUI,DeleteMUI), empty
   auxUIUserID EN "User ID": STRING[20]
   auxUIUserFullName EN "User name": STRING[40]
   auxUIUserType "Role": (interviewer "Interviewer",supervisor "Supervisor",manager "Field manager")
   auxUIManagerID EN "Manager ID": STRING[20], empty
   btnMaintainUserInfoActions: (
                     Cancel   EN "Back",
                     OK       EN "OK"
                     ) ,EMPTY                     
    
DIALOG dMaintainUserInfoAction
  FIELDREFS  
   auxUIAction 
   auxUIUserID
   auxUIUserFullName
   auxUIUserType
   auxUIManagerID
   btnMaintainUserInfoActions(Cancel)
RULES
  auxUIAction.keep
  auxUIUserID.ASK
  auxUIUserFullName.ASK
  auxUIUserType.ASK  
  auxUIManagerID.ASK
  
  

PROCEDURE ProcessUserInfoActionResult
AUXFIELDS
   dRes: INTEGER
INSTRUCTIONS
   dRes:= 0
   IF auxUIAction=DeleteMUI THEN
      // delete user info
      sdUsers.RESET
      sdUsers.GET(primary, auxUIUserID)
      IF sdUsers.RESULTOK then
         sdUsers.DELETE
         IF sdUsers.IOResultCode=0 THEN
            AddToLog('User info deleted for userid: ' + auxUIUserID)
         ELSE
            dRes:= sdUsers.IOResultCode   
            AddToLog('User info deletion failed for userid: ' + auxUIUserID + ' IOResultCode: ' + STR(dRes))
         ENDIF
      ENDIF
   ELSEIF auxUIAction=EditMUI THEN
      // save changes
      sdUsers.GET(primary, auxUIUserID)
      IF sdUsers.RESULTOK THEN
         sdUsers.UserID:= auxUIUserID
         sdUsers.UserType:= auxUIUserType
         sdUsers.UserName:= auxUIUserFullName
         sdUsers.ManagerID:= auxUIManagerID
         sdUsers.WRITE
         AddToLog('User info updated for user id: ' + auxUIUserID)
      ENDIF
   ELSE 
      // insert a new user info record
      sdUsers.INITRECORD
      sdUsers.UserID:= auxUIUserID
      sdUsers.UserType:= auxUIUserType
      sdUsers.UserName:= auxUIUserFullName
      sdUsers.ManagerID:= auxUIManagerID
      sdUsers.WRITE
      AddToLog('User info added for user id: ' + auxUIUserID)
   ENDIF 
   // refresh grid
   LoadAllUsers
   tUsers.RESET
   tUsers.GET(primary, auxUIUserID)
ENDPROCEDURE
    
DIALOG dCreateInstruction EN "Create Instruction" 
FIELDREFS
  auxInstruction
  SelectedSurvey
  btnCreateInstruction(CreateInstruction)
RULES
  auxInstruction.ask   
  
DIALOG dEditLauncherCases EN "Edit launcher cases" 
FIELDREFS
  auxCMA_StartDate
  auxCMA_EndDate
  auxCMA_Supervisor
  auxCMA_CmdLineForEdit
  auxCMA_PreLoadForEdit
  auxCMA_AttemptsRoute
  auxCMA_DetailsTemplate
  auxCMA_CustomUse
  auxCMA_StartDateState
  auxCMA_EndDateState
  auxCMA_SupervisorState
  auxCMA_CmdLineForEditState
  auxCMA_PreLoadForEditState
  auxCMA_AttemptsRouteState
  auxCMA_DetailsTemplateState
  auxCMA_CustomUseState
  auxCMA_StartDateSelect 
  auxCMA_EndDateSelect 
  auxCMA_SupervisorSelect
  auxCMA_CmdLineForEditSelect
  auxCMA_PreLoadForEditSelect
  auxCMA_AttemptsRouteSelect 
  auxCMA_DetailsTemplateSelect 
  auxCMA_CustomUseSelect 
  EditParts
  btnEditCases(Cancel)
RULES
  EditParts.KEEP
  EditParts.show
  IF seStartDate IN EditParts THEN
    auxCMA_StartDateSelect.ASK
    auxCMA_StartDate.ASK
    auxCMA_StartDateState.KEEP
  ENDIF  
  IF seEndDate IN EditParts THEN
    auxCMA_EndDateSelect.ASK
    auxCMA_EndDate.ASK
    auxCMA_EndDateState.KEEP
  ENDIF
  IF seSupervisor IN EditParts THEN
    auxCMA_SupervisorSelect.ASK
    auxCMA_Supervisor.ASK
    auxCMA_SupervisorState.KEEP
  ENDIF
  IF seCmdlineForEdit IN EditParts THEN
    auxCMA_CmdLineForEditSelect.ASK
    auxCMA_CmdLineForEdit.ASK
    auxCMA_CmdLineForEditState.KEEP
  ENDIF
  IF sePreloadForEdit IN EditParts THEN
    auxCMA_PreLoadForEditSelect.ASK
    auxCMA_PreLoadForEdit.ASK
    auxCMA_PreLoadForEditState.KEEP
  ENDIF
  IF seAttemptsRoute IN EditParts THEN
    auxCMA_AttemptsRouteSelect.ASK
    auxCMA_AttemptsRoute.ASK
    auxCMA_AttemptsRouteState.KEEP
  ENDIF
  IF seDetailsTemplate in EditParts THEN
    auxCMA_DetailsTemplateSelect.ASK 
    auxCMA_DetailsTemplate.ASK
    auxCMA_DetailsTemplateState.KEEP
  ENDIF  
  IF seCustomUse in EditParts THEN
    auxCMA_CustomUseSelect.ASK 
    auxCMA_CustomUse.ASK   
    auxCMA_CustomUseState.KEEP   
  ENDIF

FUNCTION ContactDataSep: STRING
PARAMETERS
  pIndex: INTEGER
INSTRUCTIONS
  IF pIndex=1 THEN RESULT:= ContactDataSep1 ELSE RESULT:= ContactDataSep2 ENDIF 
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_ContactDataSep<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_ContactDataSep[pIndex]
  ENDIF
ENDFUNCTION

FUNCTION CustomDataSep: STRING
PARAMETERS
  pIndex: INTEGER
INSTRUCTIONS
  IF pIndex=1 THEN RESULT:= CustomDataSep1 ELSE RESULT:= CustomDataSep2 ENDIF 
  IF CurrentSurveySettings<>'' AND iSurveySettings.Survey_CustomDataSep<>EMPTY THEN
    RESULT:= iSurveySettings.Survey_CustomDataSep[pIndex]
  ENDIF
ENDFUNCTION

PROCEDURE FillCustomColls
auxfields
  Index: INTEGER
  aValue: STRING
  aName: STRING
INSTRUCTIONS
  IF iSurveySettings.Survey_CustomColCount<>EMPTY THEN
    FOR Index:= 1 TO iSurveySettings.Survey_CustomColCount DO
      CASE iSurveySettings.Survey_CustomCol[Index].Origin OF
        oCustomData: aValue:= GetEntryOnName(tCase.tCustomUse,iSurveySettings.Survey_CustomCol[Index].FieldName,customDataSep(1),customDataSep(2))  
        oContactData: aValue:= GetEntryOnName(tCase.tContactData,iSurveySettings.Survey_CustomCol[Index].FieldName,contactdatasep(1),contactDataSep(2))
      ENDCASE
      tCase.PUTVALUE('tCustomCol'+STR(Index),aValue)
    ENDDO  
  ELSE
    FOR Index:= 1 TO iSettings.sCustomColCount DO
      CASE iSettings.sCustomCol[Index].Origin OF
        oCustomData: aValue:= GetEntryOnName(tCase.tCustomUse,iSettings.sCustomCol[Index].FieldName,customDataSep(1),customDataSep(2))  
        oContactData: aValue:= GetEntryOnName(tCase.tContactData,iSettings.sCustomCol[Index].FieldName,contactDataSep(1),contactDataSep(2))
      ENDCASE
      tCase.PUTVALUE('tCustomCol'+STR(Index),aValue)
    ENDDO  
  ENDIF
ENDPROCEDURE

PROCEDURE SwitchAttemptsSurveyIfNeeded
PARAMETERS
  pAttemptsGUID: STRING
AUXFIELDS
  dRes: INTEGER
  aGUID: STRING
  aMetaName, aMetaNameOri: STRING
INSTRUCTIONS
  aGUID:= pAttemptsGUID
  IF aGUID='' THEN aGUID:= DefaultCMA_AttemptsGUID ENDIF
  IF CurrentAttemptsGUID<>aGUID THEN
    srvList.GET(aGUID)
    IF srvList.RESULTOK THEN
      CurrentAttemptsGUID:= aGUID
      aAttemptsFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE) 
      dres:= attempts.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
      dres:= ufAttempts.OPEN(aAttemptsFileName)
      AddToLog('Attempts switched to '+CurrentAttemptsGUID)
      //check if copy of meta is present. If not create it...
      aMetaName:= srvList.GetSurveyMetaFilename
      aMetaNameOri:= ExtractFilePath(aMetaName)+'ori_'+ExtractFileName(aMetaName)
      IF NOT FileExists(aMetaNameOri) THEN
        dRes:= COPYFILE(aMetaName,aMetaNameOri)
      ENDIF
    ELSE
      AddToLog('Could not switch to Attempts survey '+pAttemptsGUID+' because it is not installed on device!')
    ENDIF  
  ENDIF
ENDPROCEDURE

PROCEDURE InitTemporaryCase
AUXFIELDS
  aHappeningsStr: STRING
INSTRUCTIONS
   tCase.INITRECORD
   IF srvList.Id<>sdLauncher.MainSurveyID THEN
     srvList.GET(sdLauncher.MainSurveyID)
   ENDIF 
   tCase.tLastModification:= [[sdLauncher.LastModification.ToString()]]
   tCase.tMainSurveyID:= sdLauncher.MainSurveyID
   GetSurveySettings(tCase.tMainSurveyID)
   tCase.tSurveyName:= DetermineSurveyName(sdLauncher.SurveyDisplayName)
   tCase.tIdentifier:= sdLauncher.ID
   tCase.tCMA_Status:= sdLauncher.CMA_Status
   tCase.tCMA_GroupStatus:= sdLauncher.CMA_GroupStatus
   tCase.tCaseStatus:= TranslateStatus(sdLauncher.CMA_Status)
   tCase.tGroupStatus:= TranslateStatus(sdLauncher.CMA_GroupStatus)
   tCase.tGroupSummary:= sdLauncher.CMA_GroupSummary
   tCase.tSupervisor:= sdLauncher.CMA_Supervisor
   IF aShowGroup=EMPTY THEN //on main cases screen...
     IF sdLauncher.CMA_GroupType=gParent AND sdLauncher.CMA_AllowSpawning<>yes THEN
       tCase.tStatus:= TranslateStatus(sdLauncher.CMA_GroupStatus)
     ELSE  
       tCase.tStatus:= TranslateStatus(sdLauncher.CMA_Status)
     ENDIF  
     tCase.tGroupSort:= '*'
   ELSE
     tCase.tStatus:= TranslateStatus(sdLauncher.CMA_Status)
     tCase.tGroupSort:= sdLauncher.CMA_GroupSort
   ENDIF
   tCase.tLastResult:= EMPTY
   IF sdLauncher.CMA_HappeningsCod<>EMPTY THEN
     IF iSettings.sShowResult IN [rStrOnly,rBoth] OR iSettings.sShowResult=EMPTY THEN
       SwitchAttemptsSurveyIfNeeded(GetAttemptsGUID(sdLauncher.CMA_AttemptsGUID))
       aHappeningsStr:= GetCategoryText([[attempts]],'Happenings',GetCategoryName(ACTIVELANGUAGE),VAL(sdLauncher.CMA_HappeningsCod))
     ENDIF  
     CASE iSettings.sShowResult OF
       rCodeOnly: tCase.tLastResult:= sdLauncher.CMA_HappeningsCod
       rStrOnly:  tCase.tLastResult:= aHappeningsStr
       rBoth:     tCase.tLastResult:= sdLauncher.CMA_HappeningsCod+':'+aHappeningsStr
       rLabOnly:  tCase.tLastResult:= sdLauncher.CMA_HappeningsLbl
       rCodeLab:  tCase.tLastResult:= sdLauncher.CMA_HappeningsCod+':'+sdLauncher.CMA_HappeningsLbl
       ELSE
         tCase.tLastResult:= sdLauncher.CMA_HappeningsCod+':'+aHappeningsStr
     ENDCASE
   ENDIF
   IF sdLauncher.CMA_Appointment.AppDate >= SYSDATE THEN
     IF iSettings.sShowDateFormat<>EMPTY THEN
      tCase.tAppointment:= DATETOSTR(sdLauncher.CMA_Appointment.AppDate,iSettings.sShowDateFormat)+', '+TIMETOSTR(sdLauncher.CMA_Appointment.AppTime)
     ELSE
       tCase.tAppointment:= DATETOSTR(sdLauncher.CMA_Appointment.AppDate)+', '+TIMETOSTR(sdLauncher.CMA_Appointment.AppTime)
     ENDIF
     tCase.tAppForToday:= EMPTY
     IF sdLauncher.CMA_Appointment.AppDate=SYSDATE THEN tCase.tAppForToday:= yes ENDIF
     IF iSettings.sTodayAppointmentPreFix<>EMPTY THEN  
       IF tCase.tAppForToday=yes THEN
         tCase.tAppointment:= iSettings.sTodayAppointmentPreFix+tCase.tAppointment
       ENDIF  
     ENDIF  
   ENDIF  
   tCase.tContactData:= sdLauncher.CMA_ContactData
   tCase.tContactInfoShort:= sdLauncher.ContactInfoShort
   tCase.tInpossession:= sdLauncher.CMA_InPossession
   tCase.tForWhom:= sdLauncher.CMA_ForWhom
   tCase.tCaseNote:= sdLauncher.CaseNote
   tCase.tLastAttempt:= sdLauncher.CMA_Process.LastAttempt.When
   tCase.tFinal:= sdLauncher.CMA_CaseClosed
   tCase.tAllowSpawning:= sdLauncher.CMA_AllowSpawning
   tCase.tIsDonorCase:= sdLauncher.CMA_IsDonorCase
   tCase.tStartDate:= sdLauncher.CMA_StartDate 
   tCase.tEndDate:= sdLauncher.CMA_EndDate 
   tCase.tGroupType:= sdLauncher.CMA_GroupType
   tCase.tGroupSummary:= sdLauncher.CMA_GroupSummary
   tCase.tGroupID:= sdLauncher.CMA_GroupID  
   tCase.tCustomUse:= sdLauncher.CMA_CustomUse
   tCase.tProcess:= sdLauncher.CMA_Process
   tCase.tLocation:= sdLauncher.CMA_Location
   IF tCase.tGroupType=Parent THEN
     IF sdLauncher.CMA_Location IN ['REOPEN_REQ','RELEASE_REQ','CLOSE_REQ','TRANSFER_REQ','RESTORE_REQ',''] THEN
       tCase.tLocation:= sdLauncher.CMA_Location
     ELSEIF tCase.tCMA_GroupStatus<>'Done' THEN
       tCase.tLocation:= 'CLIENT'
     ENDIF
   ENDIF
   IF tCase.tGroupSort=EMPTY THEN 
     IF tCase.tGroupType=Parent THEN 
       tCase.tGroupSort:= '1' 
     ELSEIF tCase.tGroupType=Child THEN 
       tCase.tGroupSort:= '2' 
     ELSE 
       tCase.tGroupSort:= '3' 
     ENDIF
   ENDIF  
   IF sdLauncher.CMA_SpawnCount>0 THEN
     tCase.tSpawnCount:= STR(sdLauncher.CMA_SpawnCount)
   ELSE
     tCase.tSpawnCount:= EMPTY
   ENDIF  
   IF sdLauncher.CMA_Data.AttemptsCount>0 THEN
     tCase.tAttemptsCount:= STR(sdLauncher.CMA_Data.AttemptsCount)
   ELSE
     tCase.tAttemptsCount:= EMPTY
   ENDIF  
   tCase.tSurveyData:= sdLauncher.CMA_Data.Survey
   tCase.tAttemptsData:= sdLauncher.CMA_Data.Attempts
   tCase.tAttemptsRoute:= sdLauncher.CMA_AttemptsRoute
   tCase.tGeoLocation:= sdLauncher.CMA_GeoLocation
   tCase.tPreLoadForEdit:=sdLauncher.CMA_PreLoadForEdit
   tCase.tCmdLineForEdit:=sdLauncher.CMA_CmdLineForEdit
   IF sdLauncher.CMA_ContactImage<>EMPTY THEN 
     tCase.tHasImage:= yes 
   ENDIF
   tCase.tAttemptsGUID:= sdLauncher.CMA_AttemptsGUID
   tCase.tDetailsTemplate:= sdLauncher.CMA_DetailsTemplate
   tCase.tContactInfoGUID:= sdLauncher.CMA_ContactInfoGUID
   IF sdLauncher.CMA_Data.Survey<>EMPTY AND srvList.SetupFilename=EMPTY THEN 
     tCase.tHasInterview:= yes 
     AddToLog('Has interview: '+tCase.tIdentifier)
   ENDIF
   FillCustomColls
//     IF aShowGroup=EMPTY THEN
     IF auxSortOn<>EMPTY THEN
       tCase.TheSortValue:= GetValueForSort(ORD(auxSortOn))
     ELSE
       tCase.TheSortValue:= tCase.tGroupSort+tCase.tContactInfoShort+tCase.tMainSurveyID+tCase.tIdentifier  
     ENDIF
//     ELSE
//       IF auxSortGrpOn<>EMPTY THEN
//         tCase.TheSortValue:= GetValueForSortGrp(ORD(auxSortGrpOn))
//       ELSE
//         tCase.TheSortValue:= tCase.tGroupSort+tCase.tContactInfoShort+tCase.tMainSurveyID+tCase.tIdentifier  
//       ENDIF
//     ENDIF
     //tCase.tActiveLanguage:= CurrentLanguage
ENDPROCEDURE

PROCEDURE UpdateDownload_msg
PARAMETERS s: STRING
INSTRUCTIONS
  IF POSITION(s,download_msg)=0 THEN
    IF download_msg<>'' THEN download_msg:= download_msg+'<BR>' ENDIF
    download_msg:= download_msg+s
  ENDIF  
ENDPROCEDURE

PROCEDURE RegisterSurvey
PARAMETERS pGuid: STRING
INSTRUCTIONS
  uSurveys.OPEN
  uSurveys.SurveyGUID:= pGuid
  uSurveys.InstallDate:= NowDT
  uSurveys.WRITE
  uSurveys.RELEASE
ENDPROCEDURE

PROCEDURE InstallDependency
PARAMETERS
  pGUID: STRING
AUXFIELDS
  Index: INTEGER  
  dRes: INTEGER
INSTRUCTIONS
  srvList.GET(pGUID)
  IF srvList.RESULTOK THEN
    IF srvList.SurveyState=InstalledOnServer THEN
      dRes:= srvList.INSTALLSURVEY
      IF res<>0 THEN 
        AddToLog('Install dependency '+pGUID+' failed. Error: '+str(res))
      ELSE
        RegisterSurvey(pGUID)
        AddToLog('Install dependency '+pGUID+' succeeded')
        IF srvList.MainInstrumentId<>'' THEN //a wave!
          AddToLog('Wave of '+ srvList.MainInstrumentId+ ', name: '+srvList.WaveName)
          RegisterSurvey(srvList.MainInstrumentId)
        ENDIF 
      ENDIF   
    ENDIF  
  ELSE
    AddToLog('Install dependency '+pGUID+' needed but not present on server')
  ENDIF  
ENDPROCEDURE

PROCEDURE HandleDependencies
PARAMETERS
  pGUID: STRING
AUXFIELDS
  Index: INTEGER  
  res: INTEGER
  aGUID: STRING
INSTRUCTIONS
  GetSurveySettings(pGUID)
  IF iSurveySettings.Survey_ChildrenCount<>EMPTY THEN
    FOR Index:= 1 TO iSurveySettings.Survey_ChildrenCount DO
      InstallDependency(iSurveySettings.Survey_Children[Index])
    ENDDO
  ENDIF
  IF iSurveySettings.Survey_AttemptsGUID<>EMPTY THEN
    InstallDependency(iSurveySettings.Survey_AttemptsGUID)
  ENDIF    
  IF iSurveySettings.Survey_ContactInfoGUID<>EMPTY THEN
    InstallDependency(iSurveySettings.Survey_ContactInfoGUID)
  ENDIF    
ENDPROCEDURE  

PROCEDURE InstallTheSurvey
PARAMETERS
  pGUID: STRING
  pName: STRING
AUXFIELDS  
  aFailedGUIDs: OPEN
  aHandledDependencies: OPEN
  res: INTEGER
INSTRUCTIONS
  srvList.GET(pGUID)
  IF srvList.RESULTOK THEN
    IF srvList.SurveyState=InstalledOnServer OR
       (((srvList.InstallDate=srvList.ServerInstallDate) and (srvList.InstallTime<srvList.ServerInstallTime)) OR
       (srvList.InstallDate<srvList.ServerInstallDate))
    THEN
      res:= srvList.INSTALLSURVEY(TRUE)
      IF res<>0 THEN
        AddToLog('Install of '+pGUID+' failed. Error: '+STR(res))
        UpdateDownload_msg(msgInstallOfSurvey+' '+srvList.Name+msgFailed+' '+STR(res))
      ELSE
        AddToLog('Install of '+pGUID+' succeeded')
        UpdateDownload_msg(msgInstallOfSurvey+' '+srvList.Name+' '+msgSucceeded)
        IF srvList.MainInstrumentId<>'' THEN //a wave!
          AddToLog('Wave of '+ srvList.MainInstrumentId+ ', name: '+srvList.WaveName)
        ENDIF 
        RegisterSurvey(pGUID)
        HandleDependencies(pGUID)
      ENDIF   
    ENDIF
  ELSE
    AddToLog('Install of survey '+pName+' needed but not present on server')
    UpdateDownload_msg(msgInstallOfSurvey+' '+pGUID+' '+msgNotPresent) 
  ENDIF    
ENDPROCEDURE  


PROCEDURE FillSurveyNamesArray
AUXFIELDS 
  res,Index: INTEGER
  c: INTEGER
  srvName: STRING
  srvGUID: STRING
INSTRUCTIONS
  FOR Index:= 0 to 20 do srvNames[Index]:= '' srvID[Index]:= '' srvSupervisorCount[Index]:= 0 ENDDO
  srvID[0]:= '*'
  srvNamesCount:= 0
  srvGUIDsInCases:= EMPTY
  tManageInfo.RESET
  IF aUserType=supervisor THEN srvNames[0]:= cAllItems ENDIF
  FOR Index:= 1 TO tManageInfo.FORMCOUNT DO
    tManageInfo.READNEXT
    srvGUID:= tManageInfo.sInstrumentID
    InstallTheSurvey(srvGUID,DetermineSurveyName(tManageInfo.sSurveyName))
    srvList.GET(srvGUID)
    IF srvList.RESULTOK AND srvList.SurveyState=InstalledOnClient THEN
      srvName:= LOWERCASE(srvList.Name)
      srvNamesCount:= srvNamesCount+1
      srvID[srvNamesCount]:= srvList.ID
      if srvID[srvNamesCount]=SelectedSurvey THEN 
        auxWhatSurveyToShow:= srvNamesCount 
      ENDIF
      srvNames[srvNamesCount]:= srvName
      GetSurveySettings(srvID[srvNamesCount])
      srvNames[srvNamesCount]:= DetermineSurveyName(tManageInfo.sSurveyName)
      srvSupervisorCount[srvNamesCount]:= NumberOfSupervisorsForSurvey(srvGUID)
    ELSE
      AddToLog('Survey '+ tManageInfo.sSurveyName+ '(GUID='+srvGUID+') not found / accessible')
    ENDIF  
  ENDDO
  IF aUserType=manager AND aIsAlsoSupervisor=yes THEN
    CheckManagers
    IF auxWhatSurveyToShow>srvNamesCount then auxWhatSurveyToShow:= 1 endif
  ENDIF
  IF aUserType<>Supervisor THEN auxWhatSurveyToShow:= MAX(ORD(auxWhatSurveyToShow),1) ENDIF
ENDPROCEDURE

PROCEDURE ClearFilter
INSTRUCTIONS
  auxFilter:= ''
ENDPROCEDURE

FUNCTION GetAllUsersFilter: OPEN
AUXFIELDS
  aText: OPEN
  Index: INTEGER
INSTRUCTIONS
  tUsers.RESET
  tUsers.READNEXT
  aText:= EMPTY
  FOR Index:= 2 to tUsers.FORMCOUNT do
    tUsers.readnext
    IF aText='' THEN aText:= '(CMA_ForWhom=' ELSE aText:= aText+' OR CMA_ForWhom=' ENDIF
    aText:= aText+'\''+tUsers.sUserID +'\''
  ENDDO   
  IF aText<>'' THEN aText:= aText+')' ENDIF
  RESULT:= aText
ENDFUNCTION

FUNCTION GetInstrumentFilter: OPEN
AUXFIELDS
  Index: INTEGER
  s: OPEN
INSTRUCTIONS
  AddToLog('Instrument filter selected survey: ' + SelectedSurvey)
  IF SelectedSurvey='' THEN
    FOR Index:= 1 to srvNamesCount do
      IF s<>EMPTY THEN s:= s+ ' OR ' ENDIF
      IF aUserType=supervisor AND srvSupervisorCount[Index]>1 THEN
        IF currentUserID<>'' THEN //okay if cma_aupervisor is still empty...
          s:= s+ '(MainSurveyID=\''+srvID[Index]+'\' AND (CMA_Supervisor Is NULL OR CMA_Supervisor=\''+USERNAME+'\'))'
        ELSE
          s:= s+ '(MainSurveyID=\''+srvID[Index]+'\' AND CMA_Supervisor=\''+USERNAME+'\')'
        ENDIF  
      ELSE    
        s:= s+ '(MainSurveyID=\''+srvID[Index]+'\')'
      ENDIF
    ENDDO
    RESULT:=' ('+s+') '  
  ELSE
    IF aUserType=supervisor AND NumberOfSupervisorsForSurvey(SelectedSurvey)>1 THEN
      IF currentUserID<>'' THEN //okay if cma_aupervisor is still empty...
        RESULT:=' (MainSurveyID=\''+SelectedSurvey+'\') AND (CMA_Supervisor IS NULL OR CMA_Supervisor=\''+USERNAME+'\')'
      ELSE
        RESULT:=' (MainSurveyID=\''+SelectedSurvey+'\') AND CMA_Supervisor=\''+USERNAME+'\''
      ENDIF  
    ELSE 
      RESULT:=' (MainSurveyID=\''+SelectedSurvey+'\')'  
    ENDIF
  ENDIF  
ENDFUNCTION  

FUNCTION GetLauncherExportFilter: OPEN
AUXFIELDS
  aText: OPEN
INSTRUCTIONS
  IF aUserType=supervisor THEN
    IF currentUserID=EMPTY THEN
      aText:= GetAllUsersFilter
    ELSE 
      aText:= 'CMA_ForWhom=\''+currentUserID+'\'' 
    ENDIF
  ELSE
    IF CurrentUserID<>EMPTY THEN
      aText:= GetAllForSupervisorFilter(currentUserID)
    ENDIF  
  ENDIF  
  IF aText<>EMPTY THEN
    aText:= aText + ' AND '
  ENDIF   
  aText:= aText + GetInstrumentFilter
  RESULT:= aText
  AddToLog('Launcher export filter: '+RESULT)
ENDFUNCTION

FUNCTION GetAllForManagerFilter: OPEN
PARAMETERS
  pManager: STRING
AUXFIELDS
  S: OPEN  
  Index: INTEGER
  sSupervisors: OPEN
  iNoOfSupervisors: INTEGER
  tmp: OPEN
INSTRUCTIONS
  // first find supervisor
  IF aIsAlsoSupervisor=yes THEN
    sdUsers.SETRECORDFILTER('ManagerID=\''+pManager+'\' OR UserID=\''+USERNAME+'\'') 
  ELSE
    sdUsers.SETRECORDFILTER('ManagerID=\''+pManager+'\' ') 
  ENDIF
  sdUsers.RESET
  FOR Index:= 1 to sdUsers.FORMCOUNT do
    sdUsers.READNEXT
    IF sdUsers.UserType=supervisor THEN
    sSupervisors:= sSupervisors+sdUsers.UserID +','
      iNoOfSupervisors:= iNoOfSupervisors+1
    ENDIF  
  ENDDO

  // then get user filter for each supervisor
  IF iNoOfSupervisors>0 THEN
    FOR Index:= 1 to iNoOfSupervisors DO
      tmp:= GetAllForSupervisorFilter(GetEntry(sSupervisors, Index, ','))
      IF tmp<>'' THEN
        IF S<>'' THEN
          S:= S + ' OR '
        ENDIF  
        S:= S + tmp
      ENDIF  
    ENDDO  
  ENDIF  
  IF S<>'' THEN S:='('+S+')' ENDIF
  RESULT:= S
ENDFUNCTION


FUNCTION GetAllForSupervisorFilter: OPEN
PARAMETERS
  pSupervisor: STRING
AUXFIELDS
  S: OPEN  
  Index: INTEGER
INSTRUCTIONS
  sdUsers.SETRECORDFILTER('ManagerID=\''+pSupervisor+'\'') 
  sdUsers.RESET
  FOR Index:= 1 to sdUsers.FORMCOUNT do
    sdUsers.READNEXT
    IF S<>'' THEN S:= S+' OR ' ENDIF
    S:= S+ 'CMA_ForWhom=\''+sdUsers.UserID+'\' OR CMA_InPossession=\''+sdUsers.UserID+'\''
  ENDDO
  IF S<>'' THEN S:='('+S+')' ENDIF
  RESULT:= S
ENDFUNCTION

FUNCTION GetCasesFilter: OPEN
AUXFIELDS
  aText: OPEN
  aStatusFilter:OPEN
  defFilter: STRING
  Index: INTEGER
  aUserFilter: OPEN
INSTRUCTIONS
  CASE aShowing OF
    shCompleted:          aStatusFilter:= '(CMA_Status=\'Completed\')'
    shFinalized:          aStatusFilter:= '(CMA_Status=\'Finalized\')'
    shReopened:           aStatusFilter:= '(CMA_Status=\'Reopened\')' 
    shCompletedFinalized: aStatusFilter:= '(CMA_Status=\'Finalized\' OR CMA_Status=\'Completed\')'
    shStarted:            aStatusFilter:= '(CMA_Status=\'Started\' OR CMA_Status=\'Interrupted\')'
    shAccepted:           aStatusFilter:= '(CMA_Status=\'Accepted\')'
    shClosed:             aStatusFilter:= '(CMA_Status=\'Closed\')'
    shAll:                aStatusFilter:= '(CMA_Status=\'Accepted\' OR '+ 
                                           'CMA_Status=\'Completed\' OR CMA_Status=\'Finalized\' OR '+
                                           'CMA_Status=\'Started\' OR CMA_Status=\'Interrupted\' OR '+
                                           'CMA_Status=\'Added\' OR CMA_Status=\'Closed\' OR '+
                                           'CMA_Status=\'Reopened\' OR CMA_Status IS NULL)'
  ENDCASE 
  IF auxCustomCaseFilter<>EMPTY THEN // if the auxCustomCaseFilter field is set, use this filter for filtering users and statusses
      aText:= auxCustomCaseFilter + ' AND ' + aStatusFilter 
  ELSE
  IF currentUserID=EMPTY THEN
    IF aUserType=Supervisor THEN
      aText:= 'CMA_ForWhom IS NULL AND '+aStatusFilter+' AND (CMA_Location IS NULL OR CMA_Location<>\'Released\')'
    ELSE 
      aText:= aStatusFilter //to do: decide what to display: all assigned cases or also not assigned cases... Now: show all!
    ENDIF  
  ELSEIF aUserType=Supervisor THEN 
    aText:= 'CMA_ForWhom=\''+currentUserID+'\' AND '+aStatusFilter 
  ELSEIF aUserType=Manager THEN //to do: all cases for users managed by selected supervisor
    aUserFilter:= GetAllForSupervisorFilter(currentUserID)
    IF aUserFilter<>'' THEN
      aText:= aUserFilter +' AND '+aStatusFilter 
    ELSE
      aText:= aStatusFilter 
    ENDIF  
  ENDIF
  ENDIF 
  IF auxCustomCaseFilter=EMPTY THEN
    aText:= aText+' AND (CMA_GroupType IS NULL OR CMA_GroupType=1) ' //for now: exclude child cases... 
  ENDIF  
  aText:= aText+' AND '+GetInstrumentFilter
  IF auxFilter<>'' THEN
    aText:= aText +' AND ('
    IF iSettings.sSearchCount>0 THEN
      FOR Index:= 1 TO iSettings.sSearchCount DO
        defFilter:= '('+iSettings.sSearchName[Index]+' like \'%'+REPLACE(auxFilter,'\'','\'\'')+'%\')'
        IF Index>1 THEN defFilter:= ' OR '+defFilter ENDIF
        aText:= aText+ defFilter
      ENDDO
      aText:= aText+')'
    ELSE  
      aText:= aText+'ContactInfoShort like \'%'+REPLACE(auxFilter,'\'','\'\'')+'%\' OR ID like \'%'+REPLACE(auxFilter,'\'','\'\'')+'%\')'
    ENDIF  
  ENDIF
  AddToLog('Cases filter set to: '+aText)
  RESULT:= aText  
ENDFUNCTION 

FUNCTION GetNotAssignedCasesFilter: OPEN
INSTRUCTIONS
  RESULT:= 'CMA_Supervisor=\''+USERNAME+'\' AND CMA_ForWhom IS NULL'
ENDFUNCTION

PROCEDURE ResetCustomCasesFilter
INSTRUCTIONS
  auxCustomCaseFilter:= EMPTY
ENDPROCEDURE

PROCEDURE GetLauncherCasesForSelectedUser
AUXFIELDS
  index: INTEGER
INSTRUCTIONS
  auxWhatSurveyToShowGUID:= '*'
  IF SelectedSurvey<>EMPTY THEN
    auxWhatSurveyToShowGUID:= SelectedSurvey
  ENDIF
  sdLauncher.SETRECORDFILTER(GetCasesFilter) //no modified check needed
  tcase.ERASE
  auxSelCount:= 0
  auxCasesCount:= sdLauncher.FORMCOUNT
  AddToLog('Cases count: '+STR(AuxCasesCount))
  FOR Index:= 1 to auxCasesCount DO
    sdLauncher.READNEXT
    InitTemporaryCase  
    tCase.WRITE
  ENDDO
  auxCaseIsSelected:= EMPTY 
  tCase.RESET
  tCase.INITRECORD
  auxFieldFilter:= GetFieldFilter(auxWhatSurveyToShowGUID,0)
  auxFieldFilterWidths:= GetFieldWidths(auxFieldFilter,auxWhatSurveyToShowGUID)
  auxFieldFilterTitles:= GetFieldTitles(auxFieldFilter,auxWhatSurveyToShowGUID)
  auxCustomDetailsTable:= EMPTY
  ComputeStatistics
ENDPROCEDURE

PROCEDURE StartLoggingForUser
AUXFIELDS
  Index: INTEGER
  FilterStr: STRING 
  INSTRUCTIONS
  auxTheLogUser:= EMPTY
  IF aUserType=supervisor THEN
    auxTheLogUser:= currentUserID
  ELSE
    IF CurrentUserID<>EMPTY THEN
      FilterStr:= 'ManagerID=\''+CurrentUserID+'\' OR UserID=\''+CurrentUserID+'\'' //all interviewers for this supervisor plus the selected supervisor
    ELSE
      tUsers.RESET 
      tUsers.READNEXT //skip this one because it not a user...
      FilterStr:= ''
      FOR Index:= 2 TO tUsers.FORMCOUNT DO
        tUsers.READNEXT
        IF FilterStr<>'' THEN FilterStr:= FilterStr+' OR ' ENDIF
        FilterStr:= FilterStr+ 'ManagerID=\''+tUsers.sUserID+'\' OR UserID=\''+CurrentUserID+'\''
      ENDDO
    ENDIF  
    sdUsers.SETRECORDFILTER(FilterStr) 
    sdUsers.RESET
    tSelUser.ERASE
    FOR Index:= 1 to sdUsers.FORMCOUNT do
      sdUsers.READNEXT
      IF sdUsers.userType=interviewer OR sdUsers.userType=supervisor THEN
        tSelUser.sUserID:= sdUsers.UserID
        tSelUser.sUserFullName:= sdUsers.UserName
        tSelUser.sUserType:= sdUsers.UserType
        tSelUser.sManagerID:= sdUsers.ManagerID
        tSelUser.WRITE
      ENDIF  
    ENDDO
    SelectTransferUser
    IF aSelUserBtn=select THEN
      auxTheLogUser:= tSelUser.sUserID
    ENDIF
  ENDIF   
  IF auxTheLogUser<>'' THEN
    Display(cRetrievingLoggingForUser + auxTheLogUser, Hourglass)
    ExtractLoggingForUser(auxTheLogUser, auxDefaultNrOfDaysLoggingHistory) 
    ClearDisplay
    ShowUserLog
  ENDIF
ENDPROCEDURE


PROCEDURE ConfirmRestoreUser
AUXFIELDS
  Index: INTEGER
  FilterStr: STRING 
  TheUser: STRING
INSTRUCTIONS
  IF aUserType=supervisor THEN
    TheUser:= currentUserID
  ELSE
    IF CurrentUserID<>EMPTY THEN
      FilterStr:= 'ManagerID=\''+CurrentUserID+'\'' 
    ELSE
      tUsers.RESET 
      tUsers.READNEXT //skip this one
      FilterStr:= ''
      FOR Index:= 2 TO tUsers.FORMCOUNT DO
        tUsers.READNEXT
        IF FilterStr<>'' THEN FilterStr:= FilterStr+' OR ' ENDIF
        FilterStr:= FilterStr+ 'ManagerID=\''+tUsers.sUserID+'\''
      ENDDO
    ENDIF  
    sdUsers.SETRECORDFILTER(FilterStr) 
    sdUsers.RESET
    tSelUser.ERASE
    FOR Index:= 1 to sdUsers.FORMCOUNT do
      sdUsers.READNEXT
      IF sdUsers.UserType=interviewer THEN
        tSelUser.sUserID:= sdUsers.UserID
        tSelUser.sUserFullName:= sdUsers.UserName
        tUsers.sUserType:= sdUsers.UserType
        tUsers.sManagerID:= sdUsers.ManagerID
        tSelUser.WRITE
      ENDIF  
    ENDDO
    SelectTransferUser
    IF aSelUserBtn=select THEN
      TheUser:= tSelUser.sUserID
    ENDIF
  ENDIF   
  IF TheUser<>'' THEN
    IF CONFIRM(REPLACE(strConfirmRestoreUser,'$UserID',TheUser)) THEN
      sdLauncher.SETRECORDFILTER('CMA_ForWhom=\''+TheUser+'\' AND CMA_Location=\'CLIENT\'') //no modified check needed
      srvList.GET(SECONDARY,srvCases)
      ufServerCases.OPEN(CMALauncherFileName)
      ufServerCases.ERASE 
      FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
        sdLauncher.READNEXT
        ufServerCases:= sdLauncher
        ufServerCases.CMA_Location:= 'RESTORE_REQ'
        ufServerCases.WRITE
      ENDDO
      ufServerCases.RELEASE 
      Res:= srvList.UPLOADDATA
      AddToLog('Cases of user '+TheUser+' restored. Count: '+STR(sdLauncher.FORMCOUNT))
      DISPLAY(strCasesRestored+' '+STR(sdLauncher.FORMCOUNT),WAIT)
    ENDIF
  ENDIF
ENDPROCEDURE

FUNCTION ConnectionOkay: INTEGER
INSTRUCTIONS
  RESULT:= -1
  IF IsConnected=1 THEN
    IF srvList.USERISAUTHENTICATED THEN
      RESULT:= 1
    ELSE
      RESULT:= -2  
    ENDIF
  ENDIF  
ENDFUNCTION             
            
FUNCTION PerformMultiSelectAction: INTEGER
PARAMETERS
  pRequest: STRING
  pLogMessage: STRING
  pIncludeChildren: (yes,no)
  pNewUser: STRING
  TRANSIT pAction: (yes)
AUXFIELDS
  Index: INTEGER
  aFilter: OPEN
  aModifiedCount: INTEGER
  aSelectionCount: INTEGER
  aProcessedCount: INTEGER 
INSTRUCTIONS
  tCase.SETREADKEY(PRIMARY)
  tCase.RESET
  AddToLog('Perform multiselect called with params: req :' + pRequest + ', msg ' + pLogMessage + ', chld ' + STR(pIncludeChildren) + ', newuser ' + pNewUser + ', action' + STR(pAction))
  REPEAT
    tCase.READNEXT
    IF tCase.tSelected=cSelected and tCase.tMainSurveyID<>cNullGUID THEN 
      aSelectionCount:= aSelectionCount+1
      DetermineAllowedOperations
      IF pAction=yes AND (pRequest<>'TRANSFER_REQ' OR IsAllowedUser(pNewUser,tCase.tMainSurveyID)=1)
      THEN  
        aFilter:= AddToLauncherFilter(aFilter,'MainSurveyID=\''+tCase.tMainSurveyID+'\' AND ID=\''+tCase.tIdentifier+'\'')
        aProcessedCount:= aProcessedCount+1
        IF pIncludeChildren=yes THEN
          IF tCase.tGroupType=parent AND
             (pRequest<>'TRANSFER_REQ' OR tCase.tLocation=EMPTY)
          THEN 
            aFilter:= AddToLauncherFilter(aFilter,'cma_groupid=\''+tCase.tGroupID+'\' and cma_grouptype=2')
          ENDIF
        ENDIF
      ELSE
         // operation not allowed for case
         AddToLog('Requested operation ' + pRequest + ' not allowed for case: ' + tCase.tMainSurveyID + ',' + tCase.tIdentifier)  
      ENDIF
    ENDIF
  UNTIL tCase.LASTRECORD      
  AddToLog('Number of records selected for action ' + pRequest + ': ' + STR(aProcessedCount) + ' from ' + STR(aSelectionCount))
  AddToLog('Used record filter for action ' + pRequest + ': ' + aFilter)
  IF aFilter = EMPTY THEN
      DISPLAY(strRequestNotAllowed + ' ' + pRequest ,WAIT)
      Res:= 0 
  ELSE    
     sdLauncher.SETRECORDFILTER(aFilter) //modified check needed
     srvList.GET(SECONDARY,srvCases)
     ufServerCases.OPEN(CMALauncherFileName)
     ufServerCases.ERASE 
     FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
       sdLauncher.READNEXT
       IF CheckLastModified=0 THEN
       ufServerCases:= sdLauncher
       CASE pRequest OF
       'TRANSFER_REQ':
         ufServerCases.CMA_ForWhom:= pNewUser
         IF ufServerCases.CMA_Location<>EMPTY THEN
           ufServerCases.CMA_Location:= 'TRANSFER_REQ'
         ENDIF
       'ACCEPT':
          ufServerCases.CMA_Status:= 'Accepted'
          ufServerCases.CMA_Process.LastChangedDT:= NowDT
       ELSE
         ufServerCases.CMA_Location:= pRequest
       ENDCASE
       ufServerCases.WRITE
       ELSE
         aModifiedCount:= aModifiedCount+1
       ENDIF  
     ENDDO
     ufServerCases.RELEASE 
     IF aModifiedCount=0 THEN
     Res:= srvList.UPLOADDATA
     IF Res>0 THEN
       sdLauncher.RESET
       FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
         sdLauncher.READNEXT
         IF sdLauncher.CMA_GroupType<>gChild THEN
           RESULT:= RESULT+1
           tCase.GET(PRIMARY,sdLauncher.MainSurveyID,sdLauncher.ID)
           tCase.tSelected:= EMPTY
           auxSelCount:= auxSelCount-1
           CASE pRequest OF
           'TRANSFER_REQ':
             AddToLog(pLogMessage+' '+sdLauncher.MainSurveyID+','+sdLauncher.ID+' From/To: '+'"'+tCase.tForWhom+'"/"'+'"'+pNewUser+'"')
             tCase.DELETE 
             auxCasesCount:= auxCasesCount-1
           'ACCEPT':
             AddToLog(pLogMessage+' '+sdLauncher.MainSurveyID+','+sdLauncher.ID)
             tCase.tCMA_Status:= sdLauncher.CMA_Status
             tCase.tStatus:= TranslateStatus(sdLauncher.CMA_Status)
             tCase.WRITE    
           ELSE
             AddToLog(pLogMessage+' '+sdLauncher.MainSurveyID+','+sdLauncher.ID)
             tCase.tLocation:= pRequest   
             tCase.WRITE
           ENDCASE
         ELSE
           AddToLog('Child '+pLogMessage+' '+sdLauncher.MainSurveyID+','+sdLauncher.ID)
         ENDIF  
       ENDDO  
       ComputeStatistics
     ELSEIF Res<0 THEN
       AddToLog('Upload failed, Error: '+STR(RES))
     ENDIF
     ELSE
       DISPLAY(strNeedsRefresh,WAIT)
     ENDIF  
  ENDIF
  tCase.SETREADKEY(SECONDARY,secSort)
  tCase.RESET
ENDFUNCTION

PROCEDURE PerformMultiSelectAssignToSupervisorAction
PARAMETERS
  pSupervisor: STRING
AUXFIELDS
  Index: INTEGER
  aFilter: OPEN
  aGroupFilter: OPEN
  aSkippedCases: OPEN
  aModifiedCount: INTEGER
INSTRUCTIONS
  tCase.SETREADKEY(PRIMARY)
  tCase.RESET
  REPEAT
    tCase.READNEXT
    IF tCase.tSelected=cSelected THEN 
      IF aFilter=EMPTY THEN
        aFilter:= 'MainSurveyID=\''+tCase.tMainSurveyID+'\' AND ID IN (\''+ tCase.tIdentifier+'\''
      ELSE
        aFilter:= aFilter + ',\''+ tCase.tIdentifier+ '\''
      ENDIF
      IF tCase.tGroupType=parent THEN 
        aGroupFilter:= AddToLauncherFilter(aGroupFilter,'cma_groupid=\''+tCase.tGroupID+'\' and cma_grouptype=2')
      ENDIF
    ENDIF
  UNTIL tCase.LASTRECORD 
  
  IF aFilter<>EMPTY THEN
    aFilter:= aFilter + ')' 
  ENDIF
  IF aGroupFilter<>EMPTY THEN
    IF aFilter=EMPTY THEN
      aFilter:= aGroupFilter
    ELSE
      aFilter:= aFilter+ ' AND '+ aGroupFilter
    ENDIF  
  ENDIF    
  IF aFilter=EMPTY THEN
    // make filter invalid; don't select any records
    aFilter:='1=0'
  ENDIF     
  sdLauncher.SETRECORDFILTER(aFilter) //modified check needed
  srvList.GET(SECONDARY,srvCases)
  ufServerCases.OPEN(CMALauncherFileName)
  ufServerCases.ERASE 
  FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
    sdLauncher.READNEXT
    IF CheckLastModified=0 THEN
    ufServerCases:= sdLauncher
    // case can only be (re)assigned to a supervisor if not yet in possession/downloaded by an interviewer yet
      IF ufServerCases.CMA_Location=EMPTY THEN
      IF pSupervisor=cNoUser THEN
        ufServerCases.CMA_Supervisor:= EMPTY
      ELSE 
        ufServerCases.CMA_Supervisor:= pSupervisor
      ENDIF  
//      IF ufServerCases.CMA_ForWhom<>empty AND pSupervisor<>empty THEN
//        // check whether the forwhom user belongs to the supervisor, if not clear forwhom field
//        IF POSITION('\''+LOWERCASE(ufServerCases.CMA_ForWhom)+'\'', LOWERCASE(GetAllForSupervisorFilter(pSupervisor)))=0 THEN
//          ufServerCases.CMA_ForWhom:= ''
//        ENDIF    
//      ENDIF
      ufServerCases.CMA_ForWhom:= ''
      ufServerCases.CMA_InPossession:= ''
      //ufServerCases.CMA_Process.LastChangedDT:= NowDT //better not. Trigger an additional upload because of change on client..
      ufServerCases.WRITE
    ELSE
      IF aSkippedCases<>EMPTY THEN aSkippedCases:=aSkippedCases+'/' ENDIF
      aSkippedCases:=aSkippedCases+ufServerCases.ID        
    ENDIF   
    ELSE
      aModifiedCount:= aModifiedCount+1
    ENDIF     
  ENDDO
  ufServerCases.RELEASE 
  IF aModifiedCount=0 THEN
  Res:= srvList.UPLOADDATA
  IF Res>0 THEN
    sdLauncher.RESET
    FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
      sdLauncher.READNEXT
      IF sdLauncher.CMA_GroupType<>gChild THEN
        tCase.GET(PRIMARY,sdLauncher.MainSurveyID,sdLauncher.ID)
        tCase.tSelected:= EMPTY
        auxSelCount:= auxSelCount-1
          IF tCase.tLocation=EMPTY THEN
          IF pSupervisor=cNoUser THEN
            tCase.tSupervisor:= ''
          ELSE
            tCase.tSupervisor:= pSupervisor
          ENDIF
          tCase.tForWhom:= ''
          tCase.tInPossession:= ''
          tcase.WRITE
        ENDIF
        AddToLog('Supervisor ' +pSupervisor+' assigned to case: '+sdLauncher.MainSurveyID+','+sdLauncher.ID)
      ENDIF
    ENDDO  
  ELSEIF Res<0 THEN
    AddToLog('Upload supervisor assignment failed, Error: '+STR(RES))
  ENDIF
  ELSE
    DISPLAY(strNeedsRefresh,WAIT)
  ENDIF  
  tCase.SETREADKEY(SECONDARY,secSort)
  tCase.RESET
  
  IF aModifiedCount=0 AND aSkippedCases<>EMPTY THEN
    AddToLog('Could not assign supervisor '+ pSupervisor + ' to the following cases because these cases were already downloaded by an interviewer : '+ aSkippedCases )
    Display(cAssignSupervisorSkippedCases + ' ' + aSkippedCases, WAIT)
  ENDIF
ENDPROCEDURE

PROCEDURE ConfirmSetAccepted
AUXFIELDS
  aAccepted: INTEGER
  Index: INTEGER
  aFilter: OPEN
INSTRUCTIONS
  IF auxSelCount>0 THEN
    IF Confirm(strConfirmAcceptedSel) THEN
      aAccepted:= PerformMultiSelectAction('ACCEPT','Accept case',yes,'',aoAccept)
      DISPLAY(strCasesAccepted+' '+STR(aAccepted),WAIT)
    ENDIF
  ELSE  
    IF Confirm(strConfirmAccepted) THEN
      tCase.tSelected:= cSelected
      auxSelCount:= auxSelCount+1
      tCase.WRITE
      aAccepted:= PerformMultiSelectAction('ACCEPT','Accept case',yes,'',aoAccept)
//      AcceptCase(CurrentCaseGUID,CurrentCaseID)
    ENDIF
  ENDIF  
ENDPROCEDURE

PROCEDURE ConfirmEditCases
AUXFIELDS
  Index: INTEGER
   aValidateMsg : OPEN, EMPTY
INSTRUCTIONS
  // select currently hightlighted record if not selected yet.
  IF auxSelCount>0 and tCase.FORMCOUNT>0 THEN
    IF Confirm(strConfirmEditSel) THEN
      // yep we are allowed to update the selected records
      aValidateMsg:= ValidateUpdateCases
      IF aValidateMsg=EMPTY THEN
        PerformMultiSelectCasesEdit
      ELSE
        Display(cValidateUpdate + aValidateMsg, WAIT)
      ENDIF
    ENDIF  
  ENDIF          
  // ask for confirmation to edit       
ENDPROCEDURE

FUNCTION ValidateUpdateCases : OPEN
INSTRUCTIONS
  // check whether one or more fields have been selected 
  IF auxCMA_StartDateSelect=EMPTY AND
    auxCMA_EndDateSelect=EMPTY AND
    auxCMA_SupervisorSelect=EMPTY AND
    auxCMA_CmdLineForEditSelect=EMPTY AND
    auxCMA_PreLoadForEditSelect=EMPTY AND 
    auxCMA_AttemptsRouteSelect=EMPTY AND 
    auxCMA_DetailsTemplateSelect=EMPTY AND
    auxCMA_CustomUseSelect=EMPTY THEN
    RESULT:= cNoFieldsSelectedForUpdate
  ELSE
    RESULT:= EMPTY
  ENDIF
ENDFUNCTION

PROCEDURE PerformMultiSelectCasesEdit
AUXFIELDS
  Index: INTEGER
  aFilter: OPEN
  aGroupFilter: OPEN
  aUpdateCount: INTEGER
  aModifiedCount: INTEGER
INSTRUCTIONS
  aUpdateCount:= 0
  tCase.SETREADKEY(PRIMARY)
  tCase.RESET
  REPEAT
    tCase.READNEXT
    DetermineAllowedOperations
    IF aoEdit=yes AND tCase.tSelected=cSelected THEN 
      IF aFilter=EMPTY THEN
        aFilter:= 'MainSurveyID=\''+tCase.tMainSurveyID+'\' AND ID IN (\''+ tCase.tIdentifier+'\''
      ELSE
        aFilter:= aFilter + ',\''+ tCase.tIdentifier+ '\''
      ENDIF
      IF tCase.tGroupType=parent THEN 
        aGroupFilter:= AddToLauncherFilter(aGroupFilter,'cma_groupid=\''+tCase.tGroupID+'\' and cma_grouptype=2')
      ENDIF
    ENDIF
  UNTIL tCase.LASTRECORD 
  
  IF aFilter<>EMPTY THEN
    aFilter:= aFilter + ')' 
  ENDIF
  IF aGroupFilter<>EMPTY THEN
    IF aFilter=EMPTY THEN
      aFilter:= aGroupFilter
    ELSE
      aFilter:= aFilter+ ' AND '+ aGroupFilter
    ENDIF  
  ENDIF    
  IF aFilter=EMPTY THEN
    // make filter invalid; don't select any records
    aFilter:='1=0'
  ENDIF     
  sdLauncher.SETRECORDFILTER(aFilter) //modified check needed
  srvList.GET(SECONDARY,srvCases)
  ufServerCases.OPEN(CMALauncherFileName)
  ufServerCases.ERASE 
  FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
    sdLauncher.READNEXT
    IF CheckLastModified=0 THEN
    ufServerCases:= sdLauncher
    // update fields with the data which was entered in the case edit dialog
    IF auxCMA_StartDateSelect=yes THEN
      ufServerCases.CMA_StartDate:= auxCMA_StartDate
    ENDIF
    IF auxCMA_EndDateSelect=yes THEN
      ufServerCases.CMA_EndDate:= auxCMA_EndDate
    ENDIF
    IF auxCMA_SupervisorSelect=yes THEN
      ufServerCases.CMA_Supervisor:= auxCMA_Supervisor
    ENDIF
    IF auxCMA_CmdLineForEditSelect=yes THEN
      ufServerCases.CMA_CmdLineForEdit:= auxCMA_CmdLineForEdit
    ENDIF
    IF auxCMA_PreLoadForEditSelect=yes THEN
      ufServerCases.CMA_PreLoadForEdit:= auxCMA_PreLoadForEdit
    ENDIF
    IF auxCMA_AttemptsRouteSelect=yes THEN
      ufServerCases.CMA_AttemptsRoute:= auxCMA_AttemptsRoute
    ENDIF
    IF auxCMA_DetailsTemplateSelect=yes THEN
      ufServerCases.CMA_DetailsTemplate:= auxCMA_DetailsTemplate
    ENDIF
    IF auxCMA_CustomUseSelect=yes THEN
      ufServerCases.CMA_CustomUse:= auxCMA_CustomUse
    ENDIF
    IF ufServerCases.CMA_Location='CLIENT' THEN
      ufServerCases.CMA_Location:= 'REFRESHCASE_REQ'
    ENDIF
    //ufServerCases.CMA_Process.LastChangedDT:= NowDT  to be discussed...
    ufServerCases.WRITE
    ELSE
      aModifiedCount:= aModifiedCount+1
    ENDIF  
  ENDDO
  ufServerCases.RELEASE 
  IF aModifiedCount=0 THEN
  Res:= srvList.UPLOADDATA
  IF Res>0 THEN
    sdLauncher.RESET
    FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
      sdLauncher.READNEXT
      IF sdLauncher.CMA_GroupType<>gChild THEN
        tCase.GET(PRIMARY,sdLauncher.MainSurveyID,sdLauncher.ID)
        tCase.tSelected:= EMPTY
        auxSelCount:= auxSelCount-1
        IF auxCMA_StartDateSelect=yes THEN
            tCase.tStartDate:= auxCMA_StartDate
        ENDIF
        IF auxCMA_EndDateSelect=yes THEN
            tCase.tEndDate:= auxCMA_EndDate
        ENDIF
        IF auxCMA_SupervisorSelect=yes THEN
            tCase.tSupervisor:= auxCMA_Supervisor
        ENDIF
        IF auxCMA_CmdLineForEditSelect=yes THEN
            tCase.tCmdLineForEdit:= auxCMA_CmdLineForEdit
        ENDIF
        IF auxCMA_PreLoadForEditSelect=yes THEN
            tCase.tPreLoadForEdit:= auxCMA_PreLoadForEdit
        ENDIF
        IF auxCMA_AttemptsRouteSelect=yes THEN
            tCase.tAttemptsRoute:= auxCMA_AttemptsRoute
        ENDIF
        IF auxCMA_DetailsTemplateSelect=yes THEN
            tCase.tDetailsTemplate:= auxCMA_DetailsTemplate
        ENDIF
        IF auxCMA_CustomUseSelect=yes THEN
            tCase.tCustomUse:= auxCMA_CustomUse
        ENDIF
        tCase.WRITE
        aUpdateCount:= aUpdateCount + 1
        AddToLog('Update case : '+sdLauncher.MainSurveyID+','+sdLauncher.ID)
      ENDIF
    ENDDO  
    Display(cNumberOfCasesUpdated + ' ' + STR(aUpdateCount), WAIT)
  ELSEIF Res<0 THEN
    AddToLog('Upload edit cases failed, Error: '+STR(RES))
  ENDIF
  ELSE
    DISPLAY(strNeedsRefresh,WAIT)
  ENDIF  
  tCase.SETREADKEY(SECONDARY,secSort)
  tCase.RESET
ENDPROCEDURE


//PROCEDURE ReopenCase    
//PARAMETERS
//  pSurveyGUID: STRING
//  pIdentifier: STRING
//INSTRUCTIONS
//  sdLauncher.GET(PRIMARY,pSurveyGUID,pIdentifier)
//  sdLauncher.CMA_Location:= 'REOPEN_REQ'
//  sdLauncher.WRITE
//  tCase.GET(PRIMARY,pSurveyGUID,pIdentifier)
//  tCase.tLocation:= 'REOPEN_REQ'   
//  auxCurrentLocation:= tcase.tLocation
//  tCase.WRITE    
//  AddToLog('Case '+pSurveyGUID+','+pIdentifier+' to be reopened')
//ENDPROCEDURE

PROCEDURE ConfirmSetReopen
AUXFIELDS
  aReopened: INTEGER
INSTRUCTIONS
  IF auxSelCount>0 THEN
    IF Confirm(strConfirmReopenSel) THEN
      aReopened:= PerformMultiSelectAction('REOPEN_REQ','Reopened case',no,'',aoReopen)
      DISPLAY(strCasesReopened+' '+STR(aReopened),WAIT)
    ENDIF
  ELSE  
    IF Confirm(strConfirmReopen) THEN
      tCase.tSelected:= cSelected
      auxSelCount:= auxSelCount+1
      tCase.WRITE
      aReopened:= PerformMultiSelectAction('REOPEN_REQ','Reopened case',no,'',aoReopen)
//      ReopenCase(CurrentCaseGUID,CurrentCaseID)
    ENDIF  
  ENDIF  
ENDPROCEDURE    

//PROCEDURE CloseCase    
//PARAMETERS
//  pSurveyGUID: STRING
//  pIdentifier: STRING
//INSTRUCTIONS
//  sdLauncher.GET(PRIMARY,pSurveyGUID,pIdentifier)
//  sdLauncher.CMA_Location:= 'CLOSE_REQ'
//  sdLauncher.WRITE
//  tCase.GET(PRIMARY,pSurveyGUID,pIdentifier)
//  tCase.tLocation:= 'CLOSE_REQ'   
//  auxCurrentLocation:= tcase.tLocation
//  tCase.WRITE    
//  AddToLog('Case '+pSurveyGUID+','+pIdentifier+' to be close')
//ENDPROCEDURE

PROCEDURE ConfirmSetClose
AUXFIELDS
  aClosed: INTEGER
  Index: INTEGER
  aFilter: OPEN
INSTRUCTIONS
  IF auxSelCount>0 THEN
    IF Confirm(strConfirmCloseSel) THEN
      aClosed:= PerformMultiSelectAction('CLOSE_REQ','Closed case',no,'',aoClose)
      DISPLAY(strCasesClosed+' '+STR(aClosed),WAIT)
    ENDIF
  ELSE  
    IF Confirm(strConfirmClose) THEN
      tCase.tSelected:= cSelected
      auxSelCount:= auxSelCount+1
      tCase.WRITE
      aClosed:= PerformMultiSelectAction('CLOSE_REQ','Closed case',no,'',aoClose)
//      CloseCase(CurrentCaseGUID,CurrentCaseID)
    ENDIF  
  ENDIF  
ENDPROCEDURE    

AUXFIELDS
  aSelUserBtn: (select EN "Select",
                cancel EN "Cancel")

DATASOURCE mSelUser:tSelUser
FIELDFILTER=sUserID,sUserFullName,sUserType,sManagerID 

DIALOG SelectTransferUser EN "Select user"
DATASOURCEREFS mSelUser ""
FIELDREFS aSelUserBtn(select)

PROCEDURE ConfirmRestore
AUXFIELDS
  aRestored: INTEGER
  aFilter: OPEN
  Index: INTEGER
INSTRUCTIONS
  IF auxSelCount>0 THEN
    IF Confirm(strConfirmRestoreSel) THEN
      aRestored:= PerformMultiSelectAction('RESTORE_REQ','Restored case',yes,'',aoRestore)
      DISPLAY(strCasesRestored+' '+STR(aRestored),WAIT)
    ENDIF
  ELSE
    IF Confirm(strConfirmRestore) THEN
      tCase.tSelected:= cSelected
      auxSelCount:= auxSelCount+1
      tCase.WRITE
      aRestored:= PerformMultiSelectAction('RESTORE_REQ','Restored case',yes,'',aoRestore)
//      RestoreCase(CurrentCaseGUID,CurrentCaseID)
    ENDIF 
  ENDIF
ENDPROCEDURE

PROCEDURE ReleaseCase
AUXFIELDS
  aReleased: INTEGER
  Index: INTEGER
  aFilter: OPEN
INSTRUCTIONS
  IF auxSelCount>0 THEN
    IF Confirm(strConfirmReleaseSel) THEN
      aReleased:= PerformMultiSelectAction('RELEASE_REQ','Released case',no,'',aoRelease)
      DISPLAY(strCasesReleased+' '+STR(aReleased),WAIT)
    ENDIF  
  ELSE
    IF Confirm(strConfirmRelease) THEN
      tCase.tSelected:= cSelected
      auxSelCount:= auxSelCount+1
      tCase.WRITE
      aReleased:= PerformMultiSelectAction('RELEASE_REQ','Released case',no,'',aoRelease)
    
//      AddToLog('Case '+CurrentCaseGUID+','+CurrentCaseID+' RELEASE_REQ')
//      sdLauncher.GET(PRIMARY,CurrentCaseGUID,CurrentCaseID)
//      sdLauncher.CMA_Location:= 'RELEASE_REQ'
//      sdLauncher.WRITE
//      tcase.GET(PRIMARY,CurrentCaseGUID,CurrentCaseID)
//      tcase.tLocation:= 'RELEASE_REQ'
//      tcase.WRITE
    ENDIF     
  ENDIF
ENDPROCEDURE

PROCEDURE TransferChildren
PARAMETERS
  pGroupID: STRING
  pUser: STRING
AUXFIELDS
  Index: INTEGER  
INSTRUCTIONS
  IF pGroupID<>EMPTY THEN
    AddToLog('assign child: cma_groupid=\''+pGroupID+'\' and cma_grouptype=2')
    sdLauncher.SETRECORDFILTER('cma_groupid=\''+pGroupID+'\' and cma_grouptype=2')
    AddToLog('result: '+ STR(sdLauncher.FORMCOUNT))
    sdLauncher.RESET
    sdLauncher.INITRECORD
    FOR Index:= 1 to sdLauncher.FORMCOUNT DO
      sdLauncher.READNEXT
      AddToLog('Child: '+sdLauncher.MainSurveyID+' '+sdLauncher.ID+' '+sdLauncher.ContactInfoShort)
      sdLauncher.CMA_ForWhom:= pUser
      sdLauncher.WRITE
    ENDDO
    sdLauncher.SETRECORDFILTER('')                  
  ENDIF
ENDPROCEDURE

FUNCTION IsAllowedUser: INTEGER
PARAMETERS
  pUserID: STRING
  pGUID: STRING
INSTRUCTIONS
  //user must be allowed for CurrentCaseGUID
  IF pUserID<>'' THEN
    sdManageInfo.SETRECORDFILTER('UserID=\''+pUserID+'\'') 
    IF aUserType=3 THEN
      IF sdManageInfo.SEARCH(pUserID,pGUID) THEN
        RESULT:= 1
      ELSE
        RESULT:= 0
      ENDIF
    ELSE
      IF sdManageInfo.FORMCOUNT=0 OR sdManageInfo.SEARCH(pUserID,pGUID) THEN
        RESULT:= 1
      ELSE
        RESULT:= 0
      ENDIF
    ENDIF
  ELSE 
    RESULT:= 1
  ENDIF         
ENDFUNCTION  

FUNCTION AddToLauncherFilter: OPEN
PARAMETERS
  pFilter: OPEN
  pAddition: OPEN
INSTRUCTIONS
  RESULT:= pFilter
  IF RESULT<>'' THEN
    RESULT:= RESULT + ' OR '
  ENDIF
  RESULT:= RESULT+'('+pAddition+')'
ENDFUNCTION

PROCEDURE PrepareEditCasesDialog
AUXFIELDS 
  first: INTEGER
  selected: INTEGER
  TheOnlyOne: (yes),EMPTY
INSTRUCTIONS

  // selected currently highlighted record if not selected yet.
  IF auxSelCount=0 and tCase.FORMCOUNT>0 THEN
      tCase.tSelected:= cSelected
      tCase.WRITE
      TheOnlyOne:= yes
      auxSelCount:= 1
  ENDIF          

  // iterate through selected cases and remember common values for all edit case related fields
  first:= 0
  selected:= 0
  auxCMA_StartDate:= EMPTY
  auxCMA_EndDate:= EMPTY
  auxCMA_Supervisor:= EMPTY
  auxCMA_CmdLineForEdit:= EMPTY
  auxCMA_PreLoadForEdit:= EMPTY
  auxCMA_AttemptsRoute:= EMPTY
  auxCMA_DetailsTemplate:= EMPTY
  auxCMA_CustomUse:= EMPTY
  
  tCase.SETREADKEY(PRIMARY)
  tCase.RESET
  REPEAT
    tCase.READNEXT
    IF tCase.tSelected=cSelected THEN
      selected:= selected+1
      IF first=0 THEN
        auxCMA_StartDate:= tCase.tStartDate
        auxCMA_StartDateState:= cEqual 
        auxCMA_EndDate:= tCase.tEndDate
        auxCMA_EndDateState:= cEqual
        auxCMA_Supervisor:= tCase.tSupervisor
        auxCMA_SupervisorState:= cEqual 
        auxCMA_CmdLineForEdit:= tCase.TCmdLineForEdit
        auxCMA_CmdLineForEditState:= cEqual
        auxCMA_PreLoadForEdit:= tCase.tPreloadForEdit
        auxCMA_PreLoadForEditState:= cEqual 
        auxCMA_AttemptsRoute:= tCase.tAttemptsRoute
        auxCMA_AttemptsRouteState:= cEqual
        auxCMA_DetailsTemplate:= tCase.tDetailsTemplate
        auxCMA_DetailsTemplateState:= cEqual 
        auxCMA_CustomUse:= tCase.tCustomUse
        auxCMA_CustomUseState:= cEqual
        auxCMA_StartDateSelect:= yes  
        auxCMA_EndDateSelect:= yes  
        auxCMA_SupervisorSelect:= yes 
        auxCMA_CmdLineForEditSelect:= yes 
        auxCMA_PreLoadForEditSelect:= yes 
        auxCMA_AttemptsRouteSelect:= yes  
        auxCMA_DetailsTemplateSelect:= yes  
        auxCMA_CustomUseSelect:= yes  
        first:= 1
      ENDIF
      // check whether fields of selected records have still the same values, otherwise reset
      IF auxCMA_StartDate<>tCase.tStartDate THEN 
        auxCMA_StartDate:= EMPTY
        auxCMA_StartDateState:= cNotEqual
        auxCMA_StartDateSelect:= EMPTY
      ENDIF
      IF auxCMA_EndDate<>tCase.tEndDate THEN
        auxCMA_EndDate:=EMPTY
        auxCMA_EndDateState:= cNotEqual
        auxCMA_EndDateSelect:= EMPTY
      ENDIF
      IF auxCMA_Supervisor<>tCase.tSupervisor THEN
        auxCMA_Supervisor:= EMPTY
        auxCMA_SupervisorState:= cNotEqual
        auxCMA_SupervisorSelect:= EMPTY
      ENDIF
      IF auxCMA_CmdLineForEdit<>tCase.TCmdLineForEdit THEN
        auxCMA_CmdLineForEdit:= EMPTY
        auxCMA_CmdLineForEditState:= cNotEqual
        auxCMA_CmdLineForEditSelect:= EMPTY
      ENDIF
      IF auxCMA_PreLoadForEdit<>tCase.tPreloadForEdit THEN
        auxCMA_PreLoadForEdit:= EMPTY
        auxCMA_PreLoadForEditState:= cNotEqual
        auxCMA_PreLoadForEditSelect:= EMPTY
      ENDIF
      IF auxCMA_AttemptsRoute<>tCase.tAttemptsRoute THEN
        auxCMA_AttemptsRoute:= EMPTY
        auxCMA_AttemptsRouteState:= cNotEqual
        auxCMA_AttemptsRouteSelect:= EMPTY
      ENDIF
      IF  auxCMA_DetailsTemplate<>tCase.tDetailsTemplate THEN
        auxCMA_DetailsTemplate:= EMPTY      
        auxCMA_DetailsTemplateState:= cNotEqual
        auxCMA_DetailsTemplateSelect:= EMPTY
      ENDIF
      IF  auxCMA_CustomUse<>tCase.tCustomUse THEN
        auxCMA_CustomUse:= EMPTY
        auxCMA_CustomUseState:= cNotEqual
        auxCMA_CustomUseSelect:= EMPTY
      ENDIF
    ENDIF    
  UNTIL tCase.LASTRECORD      

  // start the dialog
  IF selected>0 THEN
    dEditLauncherCases (cNumberOfCasesSelectedForEdit + ' ' +str(selected))
  ENDIF  
  IF TheOnlyOne=yes THEN
    tCase.GET(CurrentCaseGUID,CurrentCaseID)
    tCase.tSelected:= EMPTY
    tCase.WRITE
    auxSelCount:= 0
  ENDIF  
ENDPROCEDURE

PROCEDURE TransferCasesOneStep
AUXFIELDS 
  aFilter: OPEN
  Index: INTEGER  
  res: INTEGER
  newUser: STRING[20]
  sCustomUse: OPEN
  sOldUser: STRING[20]
INSTRUCTIONS
  IF CurrentUserID<>EMPTY THEN
    tSelUser.ERASE
    tUsers.RESET
    sOldUser:= CurrentUserID
    AddToLog('Start transferring cases from user: ' + sOlduser)
    REPEAT
      tusers.READNEXT
      IF (tUsers.sUserType=interviewer OR tUsers.sUserID=cNoUser) and tUsers.sUserID<>sOldUser THEN
        tseluser:= tusers
        tseluser.WRITE
      ENDIF
    UNTIL tusers.LASTRECORD
    SelectTransferUser
    IF aSelUserBtn=select THEN
      res:= sdLauncher.OPEN
      newUser:= tSelUser.sUserID
      AddToLog('User to transfer cases to: ' + newUser)
      IF newUser=cNoUser THEN
        newUser:= ''
      ENDIF  
      // compose launcher filter based on selected cases
      tCase.SETREADKEY(PRIMARY)
      tCase.RESET
      REPEAT
        tCase.READNEXT
        IF tCase.tSelected=cSelected AND tCase.tFinal<>yes THEN
          aFilter:= AddToLauncherFilter(aFilter,'MainSurveyID=\''+tCase.tMainSurveyID+'\' AND ID=\''+tCase.tIdentifier+'\'')
          // transfer children as well
          IF tCase.tGroupType=parent THEN 
            aFilter:= AddToLauncherFilter(aFilter,'cma_groupid=\''+tCase.tGroupID+'\' and cma_grouptype=2')
          ENDIF
        ElSE 
          tCase.DELETE
        ENDIF
      UNTIL tCase.LASTRECORD      
      IF aFilter<>EMPTY THEN
        res:= sdLauncher.OPEN
        sdLauncher.SETRECORDFILTER(aFilter) //no modified check needed
        srvList.GET(SECONDARY,srvCases)
        ufServerCases.OPEN(CMALauncherFileName)
        ufServerCases.ERASE 
        AddToLog('Transfer cases: using launcher filter:' + aFilter)
        AddToLog('Number of cases selected for transfer based on filter: '+ STR( sdLauncher.FORMCOUNT)) 
        FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
          sdLauncher.READNEXT
          // add to CustomUse field
          sCustomUse:= sCustomUse+sdLauncher.MainSurveyID+';'+sdLauncher.ID+';'
          AddToLog('Adding RELEASE_SOME instruction for user:' + sOlduser + ', case: ' + sdLauncher.MainSurveyID+':'+sdLauncher.ID)  
          ufServerCases:= sdLauncher
          ufServerCases.CMA_ForWhom:= newUser
          ufServerCases.CMA_InPossession:= ''
          ufServerCases.CMA_Location:= ''
          //ufServerCases.CMA_Process.LastChangedDT:= NowDT  //to be discussed
          ufServerCases.WRITE
        ENDDO
        IF sCustomUse<>EMPTY THEN
          sCustomUse:= SUBSTRING(sCustomUse, 1, LEN(sCustomUse)-1)
          // create null guid instruction for CurrentUserID
          ufServerCases.INITRECORD
          ufServerCases.MainSurveyID:= cNullGuid
          ufServerCases.ID:= NowDTMS
          ufServerCases.CMA_ForWhom:= CurrentUserID
          ufServerCases.CMA_InPossession:= ''
          ufServerCases.CMA_Location:= 'RELEASE_SOME'
          ufServerCases.CMA_CustomUse:= sCustomUse 
          ufServerCases.CMA_Process.CreatedDT:= NowDT 
          ufServerCases.WRITE
          AddToLog('Transfer cases one step: Null guid instruction created for user: '+ sOldUser + ', cases: ' + Replace(sCustomUse, ';',','))
        ENDIF
        ufServerCases.RELEASE 
        Res:= srvList.UPLOADDATA
        IF Res<0 THEN
          AddToLog('Upload failed, Error: '+STR(RES))
        ENDIF
      ELSE
        // no records selected
        Display(cNoCasesSelectedForAction, WAIT)
      ENDIF          
    ENDIF  
    GetLauncherCasesForSelectedUser
    tCase.SETREADKEY(SECONDARY,secSort)
    tCase.RESET
  ENDIF
ENDPROCEDURE

FUNCTION CheckLastModified: INTEGER
INSTRUCTIONS
  RESULT:= 0
  tCase.GET(Primary,sdLauncher.MainSurveyID,sdLauncher.ID)
  IF tCase.RESULTOK THEN
    IF [[sdLauncher.LastModification.ToString()]]<>tCase.tLastModification THEN
      RESULT:= 1 //case modified in launcher database since last read,,,
    ENDIF  
  ENDIF
ENDFUNCTION

PROCEDURE ReleaseCasesOneStep
AUXFIELDS 
  aFilter: OPEN
  Index: INTEGER  
  res: INTEGER
  sCustomUse: OPEN
  aModifiedCount: INTEGER
INSTRUCTIONS
  res:= sdLauncher.OPEN
  // compose launcher filter based on selected cases
  tCase.SETREADKEY(PRIMARY)
  tCase.RESET
  REPEAT
    tCase.READNEXT
    IF tCase.tSelected=cSelected THEN
      aFilter:= AddToLauncherFilter(aFilter,'MainSurveyID=\''+tCase.tMainSurveyID+'\' AND ID=\''+tCase.tIdentifier+'\'')
      // transfer children as well
      IF tCase.tGroupType=parent THEN 
        aFilter:= AddToLauncherFilter(aFilter,'cma_groupid=\''+tCase.tGroupID+'\' and cma_grouptype=2')
      ENDIF
    ElSE 
      tCase.DELETE
    ENDIF
  UNTIL tCase.LASTRECORD      
  IF aFilter<>EMPTY THEN
    res:= sdLauncher.OPEN
    sdLauncher.SETRECORDFILTER(aFilter) //modified check needed
    srvList.GET(SECONDARY,srvCases)
    ufServerCases.OPEN(CMALauncherFileName)
    ufServerCases.ERASE 
    AddToLog('Release cases: using launcher filter:' + aFilter)
    AddToLog('Number of cases selected for release based on filter: '+ STR( sdLauncher.FORMCOUNT)) 
    FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
      sdLauncher.READNEXT
      // add to CustomUse field
      IF CheckLastModified=0 THEN
      sCustomUse:= sCustomUse+sdLauncher.MainSurveyID+';'+sdLauncher.ID+';'
      AddToLog('Adding RELEASE_SOME instruction for user: '+CurrentUserID+ ', case: ' + sdLauncher.MainSurveyID+':'+sdLauncher.ID)  
      ufServerCases:= sdLauncher
      ufServerCases.CMA_ForWhom:= ''
      ufServerCases.CMA_InPossession:= ''
      ufServerCases.CMA_Location:= ''
      //ufServerCases.CMA_Process.LastChangedDT:= NowDT
      ufServerCases.WRITE
      ELSE
        aModifiedCount:= aModifiedCount+1
        AddToLog('Skipped RELEASE_SOME instruction for user: '+CurrentUserID+ ', case: ' + sdLauncher.MainSurveyID+':'+sdLauncher.ID)  
      ENDIF    
    ENDDO
    IF aModifiedCount=0 THEN
    IF sCustomUse<>EMPTY THEN
      sCustomUse:= SUBSTRING(sCustomUse, 1, LEN(sCustomUse)-1)
      // create null guid instruction for CurrentUserID
      ufServerCases.INITRECORD
      ufServerCases.MainSurveyID:= cNullGuid
      ufServerCases.ID:= NowDTMS
      ufServerCases.CMA_ForWhom:= CurrentUserID
      ufServerCases.CMA_InPossession:= ''
      ufServerCases.CMA_Location:= 'RELEASE_SOME'
      ufServerCases.CMA_CustomUse:= sCustomUse 
      ufServerCases.CMA_Process.CreatedDT:= NowDT
      ufServerCases.WRITE
      AddToLog('Release cases one step: Null GUID instruction created for user: '+ CurrentUserID+ ', cases: ' + Replace(sCustomUse, ';',','))
    ENDIF
    ufServerCases.RELEASE 
    Res:= srvList.UPLOADDATA
    IF Res<0 THEN
      AddToLog('Upload failed, Error: '+STR(RES))
    ENDIF
  ELSE
      DISPLAY(strNeedsRefresh,WAIT)
    ENDIF  
  ELSE
    // no records selected
    Display(cNoCasesSelectedForAction, WAIT)
  ENDIF          
  GetLauncherCasesForSelectedUser
  tCase.SETREADKEY(SECONDARY,secSort)
  tCase.RESET
ENDPROCEDURE

PROCEDURE Transfer
INSTRUCTIONS
  IF Confirm(cTransferCasesOneOrTwoStep) THEN
    // two step transfer. 
    TransferCase(0)
  ELSE
    // one step transfer of cases using null guid 
    TransferCasesOneStep
  ENDIF 
ENDPROCEDURE

PROCEDURE ReleaseCases
INSTRUCTIONS
  IF Confirm(cReleaseCasesOneOrTwoStep) THEN
    // two step release. 
    ReleaseCase
  ELSE
    // one step release of cases using null guid 
    ReleaseCasesOneStep
  ENDIF 
ENDPROCEDURE

PROCEDURE TransferCase
PARAMETERS
  pAsAssign: INTEGER
AUXFIELDS 
  aTransfered: INTEGER
  newUser, newUserStr: STRING
  aText: STRING
  res: INTEGER
  aGroupID: STRING
  index: INTEGER
  aFilter: OPEN
INSTRUCTIONS
  tSelUser.ERASE
  tUsers.RESET
  IF currentUserID='' THEN tUsers.READNEXT ENDIF
  REPEAT
    tusers.READNEXT
    IF tusers.sUserID<>currentUserID THEN
      IF tUsers.sUserType=interviewer OR tUsers.sUserID=cNoUser THEN
        tseluser:= tusers
        tseluser.WRITE
      ENDIF  
    ENDIF
  UNTIL tusers.LASTRECORD
  SelectTransferUser
  IF aSelUserBtn=select THEN
    res:= sdLauncher.OPEN
    newUser:= tSelUser.sUserID
    newUserStr:= REPLACE(REPLACE(newUser,'<','\\<'),'>','\\>')
    IF substring(newUser,1,1)='<' THEN newUser:= EMPTY ENDIF
    IF auxSelCount>0 THEN
      IF pAsAssign=1 THEN
        aText:= strConfirmAssignSel
      ELSE
        aText:= strConfirmTransferSel
      ENDIF  
      IF Confirm(REPLACE(aText,'$UserID',newUserStr)) THEN
        aTransfered:= PerformMultiSelectAction('TRANSFER_REQ','Transfered case',yes,NewUser,aoTransfer)
        IF pAsAssign=1 THEN
          aText:= strCasesAssigned
        ELSE
          aText:= strCasesTransfered
        ENDIF
        DISPLAY(aText+' '+STR(aTransfered),WAIT)
      ENDIF
    ELSE
      IF pAsAssign=1 THEN
        aText:= strConfirmAssign
      ELSE
        aText:= strConfirmTransfer
      ENDIF  
      IF Confirm(REPLACE(REPLACE(aText,'$Identifier',tCase.tIdentifier),'$UserID',newUserStr)) THEN
        tCase.tSelected:= cSelected
        auxSelCount:= auxSelCount+1
        tCase.WRITE
        aTransfered:= PerformMultiSelectAction('TRANSFER_REQ','Transfered case',yes,NewUser,aoTransfer)
      ENDIF
    ENDIF
    IF tCase.FORMCOUNT=0 THEN auxCustomDetailsTable:= EMPTY ENDIF
  ENDIF       
ENDPROCEDURE

PROCEDURE AssignToSupervisor
AUXFIELDS 
  newSupervisor: STRING
  index: INTEGER
  TheOnlyOne: (yes),EMPTY
INSTRUCTIONS
  // selected currently highlighted record if not selected yet.
  IF auxSelCount=0 and tCase.FORMCOUNT>0 THEN
    tCase.tSelected:= cSelected
    tCase.WRITE
    TheOnlyOne:= yes
    auxSelCount:= 1
  ENDIF 
  tSelUser.ERASE
  tUsers.RESET
  tSelUser.INITRECORD
  tSelUser.sUserID:= cNoUser
  tSelUser.WRITE
  REPEAT
    tusers.READNEXT
    IF tUsers.sUserType=supervisor THEN
      IF LOWERCASE(tUsers.sManagerID)=LOWERCASE(USERNAME) THEN
        tseluser:= tusers
        tseluser.WRITE
      ELSE
        // check managementinfo
        IF SelectedSurvey<>EMPTY THEN
          sdManageInfo.SETRECORDFILTER('UserID=\''+tusers.sUserID+'\' AND InstrumentID=\''+SelectedSurvey+'\'') 
          IF sdManageInfo.FORMCOUNT>0 THEN
            tseluser:= tusers
            tseluser.WRITE
          ENDIF
        ENDIF   
      ENDIF      
    ENDIF    
  UNTIL tusers.LASTRECORD
  IF tseluser.FORMCOUNT>0 THEN
    SelectTransferUser
    IF aSelUserBtn=select THEN
      res:= sdLauncher.OPEN
      newSupervisor:= tSelUser.sUserID
      IF Confirm(cConfirmAssignSupervisor+ ' '+newSupervisor) THEN
        AddToLog('Start assignment of cases to supervisor: ' + newSupervisor)
        tCase.tSelected:= cSelected
        auxSelCount:= auxSelCount+1
        PerformMultiSelectAssignToSupervisorAction(newSupervisor)
        auxSelCount:= 0
      ENDIF 
    ENDIF
  ELSE
    // no supervisors found to assign to  
    Display(cNoSupervisorsFoundToAssignTo, wait)
  ENDIF
  IF TheOnlyOne=yes THEN
    tCase.GET(CurrentCaseGUID,CurrentCaseID)
    tCase.tSelected:= EMPTY
    tCase.WRITE
    auxSelCount:= 0
  ENDIF  
ENDPROCEDURE

FUNCTION GetAttemptsGUID: STRING
PARAMETERS pAttemptsGUID: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pAttemptsGUID
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_AttemptsGUID
  ENDIF
ENDFUNCTION

FUNCTION ProcessAttemptsTemplate:OPEN
PARAMETERS
  pContactData: OPEN
AUXFIELDS
  aStr: OPEN 
  aName: STRING
  aValue: STRING
  bText: STRING
  aCurrentTemplateInfo: STRING
  aPath: STRING
  aDetailsTemp: STRING
  aAttemptGUID: STRING
  aContactGUID: STRING
  aTot: INTEGER
  p, c: INTEGER
  aSep: STRING[1]
INSTRUCTIONS
  RESULT:=''
  GetSurveySettings(tCase.tMainSurveyID)
  aDetailsTemp:= GetDetailsTemplate(tCase.tDetailsTemplate)
  aAttemptGUID:= GetAttemptsGUID(tCase.tAttemptsGUID)
  aContactGUID:= GetContactInfoGUID(tCase.tContactInfoGUID)
  aCurrentTemplateInfo:= GetCategoryName(ACTIVELANGUAGE)+'::'+aDetailsTemp+'::'+aAttemptGUID
  IF CurrentAttemptsTemplateInfo<>aCurrentTemplateInfo THEN   
    IF aDetailsTemp<>'' THEN
      aName:= LOWERCASE(cmaAttemptsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      IF aAttemptGUID<>'' THEN
        srvList.GET(aAttemptGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSEIF aContactGUID<>'' THEN
        srvList.GET(aContactGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSE
        aPath:= CMAAttemptsPath 
      ENDIF    
      //first check folder of current contact info datamodel
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaAttemptsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aPath:= SetupPath
        aName:= LOWERCASE(cmaAttemptsTemplate+aDetailsTemp+'_'+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaAttemptsTemplate+aDetailsTemp+'_'+DefaultLanguage+'.txt')
      ENDIF  
    ELSE
      aName:= LOWERCASE(cmaDefaultAttemptsTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      //first check folder of cma_contactinfo model. If not present then check CMA folder
      IF aAttemptGUID<>'' THEN
        srvList.GET(aAttemptGUID)
        aPath:= ExtractFilePath(srvList.GetSurveyMetaFilename)
      ELSE
        aPath:= CMAAttemptsPath 
      ENDIF    
      IF NOT FILEEXISTS(aPath+aName) THEN
        aName:= LOWERCASE(cmaDefaultAttemptsTemplate+DefaultLanguage+'.txt')
      ENDIF  
      IF NOT FILEEXISTS(aPath+aName) THEN
        aPath:= SetupPath
        aName:= LOWERCASE(cmaDefaultAttemptsTemplate+GetCategoryName(ACTIVELANGUAGE)+'.txt')
      ENDIF  
    ENDIF
    IF CurrentAttemptsTemplateID<>aPath+aName THEN
        LoadAttemptsTemplate(aPath,aName)
      CurrentAttemptsTemplateID:=aPath+aName
      CurrentAttemptsTemplateInfo:= aCurrentTemplateInfo //to identity current situation
      IF CurrentAttemptsTemplateInfo<>EMPTY THEN AddToLog('Attempts template '+aPath+aName+' loaded') ENDIF
    ENDIF
  ENDIF    
  IF CurrentAttemptsTemplate=EMPTY THEN CurrentAttemptsTemplate:= cAttemptsTemplate ENDIF
  RESULT:= ProcessTheTemplate(ExtractApplicableTemplate(CurrentAttemptsTemplate),pContactData,1)    
ENDFUNCTION 

PROCEDURE UpdateAttemptsScreen
//called when a record is selected in dialog dAttempts
AUXFIELDS tmp: STRING
INSTRUCTIONS
  ufAttempts.GETFORM(PRIMARY,CurrentCaseGUID+',\''+CurrentCaseID+'\','+str(tAttempt.SeqNr))
  auxLast:= tAttempt.TheLastOne
  auxSeqNr:= tAttempt.SeqNr
  auxWhen:= tAttempt.When
  auxHappeningsStr:= tAttempt.HappeningsStr
  auxApptDate:= EMPTY
  auxApptTime:= EMPTY
  tmp:= ufAttempts.GETVALUE('AppDate')
  IF tmp<>'' THEN  auxApptDate:= DATETOSTR(STRTODATE(ufAttempts.GETVALUE('AppDate'))) ENDIF
  tmp:= ufAttempts.GETVALUE('AppTime')
  IF tmp<>'' THEN  auxApptTime:= TIMETOSTR(STRTOTIME(ufAttempts.GETVALUE('AppTime'))) ENDIF
  auxNote:= ufAttempts.GETVALUE('Notes')
  auxAttemptsDetailsTable:= ProcessAttemptsTemplate(tCase.tContactData)
ENDPROCEDURE

PROCEDURE ShowAttempts
INSTRUCTIONS
  AddToLog('ShowAttempts')
  ExtractAttemptsFromCase
  ProcessAttemptsAndStartDialog
ENDPROCEDURE

FUNCTION GetCmdlineForEdit: STRING
PARAMETERS pCmdLineForEdit: STRING //the value in the launcher case
INSTRUCTIONS
//setting in case has prio over survey setting
  RESULT:= pCmdLineForEdit
  IF RESULT='' AND CurrentSurveySettings<>'' THEN
    RESULT:= iSurveySettings.Survey_CmdLineForEdit
  ENDIF
ENDFUNCTION

FUNCTION AddDoubleQuotesIfNeeded:OPEN
PARAMETERS pText: OPEN
INSTRUCTIONS
  RESULT:= pText
  IF POSITION(' ',pText)>0 AND POSITION('"',pTExt)<>1 THEN
    RESULT:= '"'+RESULT+'"'
  ENDIF
ENDFUNCTION 

FUNCTION AdditionalSettings: STRING
PARAMETERS
  pForSurvey: INTEGER
INSTRUCTIONS
  RESULT:= ' -EnableResize:False'
  RESULT:= RESULT+' -InitialWindowState:Maximized'
  RESULT:= RESULT+' -EnableClose:False'
ENDFUNCTION

FUNCTION GetReadOnlySettingsName: STRING
AUXFIELDS Index: INTEGER
INSTRUCTIONS
  RESULT:= ''
  FOR Index:= 0 to val([[TopicMeta.DataEntrySettings.Count]])-1 DO
    IF [[TopicMeta.DataEntrySettings[Index].DataMode]] IN ['ReadOnly','ReadOnlyWithExperiments'] THEN
      RESULT:= [[TopicMeta.DataEntrySettings[Index].Name]]
    ENDIF  
  ENDDO   
ENDFUNCTION

PROCEDURE ViewInterview
AUXFIELDS
  aValStat: STRING
  iRes: INTEGER
  aCaseStatus: INTEGER
  aCmdLine: OPEN
  aExtra: STRING
  aKeyCount: INTEGER
  aText: STRING
  aKeys: STRING
  aCmdForEdit: STRING
  aCmdPreLoadForEdit: OPEN
  index: INTEGER
  aDefault: STRING
  p: INTEGER
  aReadOnlySettingsName: STRING
INSTRUCTIONS
  aExtra:= AdditionalSettings(1)
  aReadOnlySettingsName:= GetReadOnlySettingsName 
  IF aReadOnlySettingsName<>'' THEN
    AddToLog('View interview '+CurrentCaseGUID+' - '+CurrentCaseID)
    aCmdLine:= '-KeyValue:'+CurrentCaseID
    aCmdForEdit:= GetCmdLineForEdit(sdLauncher.CMA_CmdLineForEdit)
    IF POSITION('-LANGUAGE:',UPPERCASE(aCmdForEdit))=0 THEN
      aCmdLine:= aCmdLine+' -Language:'+CurrentLanguage
    ENDIF 
    IF POSITION('-FIELDS:',UPPERCASE(aCmdForEdit))=0 THEN
      aCmdPreLoadForEdit:= TRIM(sdLauncher.CMA_PreLoadForEdit)
      IF aCmdPreLoadForEdit<>'' THEN
        aCmdLine:= aCmdLine+' -Fields:'+AddDoubleQuotesIfNeeded(aCmdPreLoadForEdit)+' -AssignMode:Always'
      ENDIF  
    ENDIF  
    IF aCmdForEdit<>'' THEN
      aCmdLine:= aCmdLine+' '+aCmdForEdit
    ENDIF 
    aCmdLine:= aCmdLine+aExtra
    IF POSITION('-MODE:',UPPERCASE(aCmdLine))=0 AND Position('-LAYOUTSETGROUP:',UPPERCASE(aCmdLine))=0 THEN
      aDefault:= GetDefaultMode
      IF aDefault<>EMPTY THEN aCmdLine:= aCmdLine+' -Mode:'+aDefault ENDIF
    ENDIF
    IF POSITION('-LAYOUTSET:',UPPERCASE(aCmdLine))=0  THEN
      aDefault:= GetDefaultLayoutSet
      IF aDefault<>EMPTY THEN aCmdLine:= aCmdLine+' -LayoutSet:'+aDefault ENDIF
    ENDIF
    IF POSITION('-DATAENTRYSETTINGS:',UPPERCASE(aCmdLine))=0 THEN
      aCmdLine:= aCmdLine+' -DataEntrySettings:'+aReadOnlySettingsName
    ELSE
      //replace the used setting by the new one
      FOR Index:= 0 to val([[TopicMeta.DataEntrySettings.Count]])-1 DO
         IF POSITION('-DATAENTRYSETTINGS:'+UPPERCASE([[TopicMeta.DataEntrySettings[Index].Name]]),UPPERCASE(aCmdLine))>0 THEN
           aCmdLine:= REPLACE(aCmdLine,'-DataEntrySettings:'+[[TopicMeta.DataEntrySettings[Index].Name]],'-DataEntrySettings:'+aReadOnlySettingsName,TRUE)
         ENDIF  
      ENDDO   
    ENDIF        
    AddToLog('CmdLine: "'+aCmdLine+'"')
    iRes:= srvlist.EDIT(aCmdLine)
    IF iRes<>0 THEN AddToLog('Edit result: '+STR(iRes)) ENDIF 
  ELSE
    DISPLAY(strReadonlyNotSupported,WAIT)  
  ENDIF    
ENDPROCEDURE

FUNCTION GetPassword: STRING
PARAMETERS
  pString: STRING
AUXFIELDS 
  s: STRING 
  i: INTEGER
INSTRUCTIONS
  FOR I:= 1 TO LEN(pString) DO
    IF SUBSTRING(pString,i,1) in ['0'..'9'] THEN S:= S+SUBSTRING(pString,i,1) ENDIF
  ENDDO 
  SETRANDOMSEED(VAL(SUBSTRING(S,LEN(S)-7,8))) //trunc last 8 positions
  RESULT:= STR(RANDOM(9)+1)+STR(100000000+RANDOM(100000000))
ENDFUNCTION

FUNCTION UnZipData: INTEGER
PARAMETERS
  pFileName: OPEN
  pPassword: STRING
AUXFIELDS
  cmd: OPEN
  iRes: INTEGER
INSTRUCTIONS
  cmd:= pFileName +'.zip -U:False -S:'+pPassword+' -D:'+ExtractFilePath(pFileName)
  {$IFDEF Develop}
  AddToLog('Unzip cmd: '+cmd)
  {$ELSE}
  AddToLog('Unzip cmd: '+pFileName +'.zip -U:False -D:'+ExtractFilePath(pFileName))
  {$ENDIF}
  iRes:= UNZIPFILES(cmd) //iRes=number of unzipped files...
  IF iRes=1 THEN
    RESULT:= 0
  ELSE
    RESULT:= 1
  ENDIF  
  {$IFNDEF develop}
  iRes:= DELETEFILE(pFileName+'.zip')
  {$ENDIF}
ENDFUNCTION

PROCEDURE ShowGroup
AUXFIELDS
  aGroupID: STRING
  aCurrentGUID, aCurrentID: STRING
  Index: INTEGER
  aTitle: STRING
INSTRUCTIONS
  aShowGroup:= yes
  aGroupID:= tCase.tGroupID
  aCurrentGUID:= tCase.tMainSurveyID
  aCurrentID:= tCase.tIdentifier
  GetSurveySettings(aCurrentGUID)
  sdLauncher.SETRECORDFILTER('CMA_GroupID=\''+aGroupID+'\'') //no modified check needed
  tGrpCase.ERASE
  FOR Index:= 1 to sdLauncher.FORMCOUNT DO
    sdLauncher.READNEXT
    InitTemporaryCase  
    tGrpCase:= tCase
    tGrpCase.WRITE
  ENDDO
  tGrpCase.RESET
  auxFieldFilter:= GetFieldFilter(auxWhatSurveyToShowGUID,1)
  auxFieldFilterWidths:= GetFieldWidths(auxFieldFilter,auxWhatSurveyToShowGUID)
  auxFieldFilterTitles:= GetFieldTitles(auxFieldFilter,auxWhatSurveyToShowGUID) 
  aTitle:= ExtractTextForDisplay(iSurveySettings.Survey_GroupTitle)
  IF aTitle<>'' THEN
    ShowGroupCases(aTitle)
  ELSE  
    ShowGroupCases
  ENDIF  
  auxFieldFilter:= GetFieldFilter(auxWhatSurveyToShowGUID,0)
  auxFieldFilterWidths:= GetFieldWidths(auxFieldFilter,auxWhatSurveyToShowGUID)
  auxFieldFilterTitles:= GetFieldTitles(auxFieldFilter,auxWhatSurveyToShowGUID)  
  aShowGroup:= EMPTY
  tCase.Get(aCurrentGUID,aCurrentID)
  OnSelectCase
ENDPROCEDURE

PROCEDURE ShowSurveyData
AUXFIELDS 
  aFName: OPEN
  iRes: INTEGER
  aStoredName: OPEN
INSTRUCTIONS
  srvList.GET(CurrentCaseGUID)
  IF srvList.SetupFilename='' THEN
  iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
  Res:= uTopic.OPEN(srvlist.GetSurveyDataFilename) 
  aFName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+'_'+CurrentCaseGUID+'_'+REPLACE(CurrentCaseID,',','_')//+'.xml'
  aStoredName:= [[tCase.GetField('tSurveyData').DataValue.BlobValue.FileName]]
  IF POSITION('.zip',aStoredName)>0 THEN
    iRes:= tCase.tSurveyData.SAVETODISK(aFName+'.zip')
    IF iRes=0 THEN
      iRes:= UnZipData(aFName,GetPassword(CurrentCaseGUID+CurrentCaseID))
    ENDIF 
  ELSE
    iRes:= tCase.tSurveyData.SAVETODISK(aFName+'.xml')
  ENDIF
  IF iRes=0 THEN
    iRes:= iTopic.OPEN(aFName+'.xml')
    iTopic.READNEXT
    uTopic:= iTopic
    uTopic.WRITE
    uTopic.RELEASE
    iTopic.RELEASE
    ViewInterview
    {$IFNDEF develop}
    Res:= DELETEFILE(aFName+'.xml') 
    {$ENDIF}
  ELSE
      DISPLAY(strExtractFailed,WAIT) 
  ENDIF  
  ENDIF  
ENDPROCEDURE

PROCEDURE RunExcel
PARAMETERS
  pFileName: STRING
AUXFIELDS
  aExcelExePath: STRING  
INSTRUCTIONS
  aExcelExePath:= 'C:\Program Files (x86)\Microsoft Office\root\Office16\EXCEL.EXE'
  IF iSettings.sExcelExePath<>EMPTY THEN
    aExcelExePath:= iSettings.sExcelExePath
  ENDIF
  IF CONFIRM(REPLACE(strConfirmExcel,'$eName',pFileName)) THEN
    res:= RUN('"'+aExcelExePath+'" "' +pFileName+'"')
  ENDIF
ENDPROCEDURE

FUNCTION GetExcelOutputPath: STRING
INSTRUCTIONS
  IF iSettings.sExcelOutputPath=EMPTY THEN
    RESULT:= GETSPECIALFOLDERPATH('Personal')+'\\'
  ELSE  
    RESULT:= iSettings.sExcelOutputPath
    IF NOT FolderExists(RESULT) THEN
      res:= RUN('MKDir '+RESULT)
    ENDIF
  ENDIF
ENDFUNCTION  

PROCEDURE ExportSurveyDataToDisk
AUXFIELDS
  Index: INTEGER
  iRes: INTEGER
  aFName: OPEN
  aStoredName: OPEN
  eName: OPEN
  aExcelExePath: STRING
  aSrvName: STRING
INSTRUCTIONS
  tCase.RESET
  srvList.GET(CurrentCaseGUID) //assume for now: all cases in tcase have same GUID...
  IF srvList.SetupFilename=EMPTY THEN
    iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
    IF SelectedSurveyIndex<>EMPTY THEN 
      aSrvName:= '_'+SrvNames[SelectedSurveyIndex]+'_'
    ENDIF  
    eName:= GetExcelOutputPath+'Export'+aSrvName+DATETOSTR(SYSDATETIME,'yyyyMMddTHHmmss')+'.csv'
{$IFNDEF vers_511}
    IF DataExportSep=cTab THEN
      oTopic.SETSEPARATOR(DataExportSep)
    ELSE
      oTopic.SETSEPARATOR(DataExportSep,'"')
    ENDIF  
{$ENDIF}  
    iRes:= oTopic.OPEN(eName)
    tCase.SETREADKEY(PRIMARY)
    FOR Index:= 1 TO tCase.FORMCOUNT DO
      tCase.READNEXT
      IF (tCase.tSurveyData<>EMPTY) AND (tCase.tMainSurveyID=CurrentCaseGUID) THEN
        aFName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE)+'_'+tCase.tMainSurveyID+'_'+REPLACE(tCase.tIdentifier,',','_')//+'.xml'
        aStoredName:= [[tCase.GetField('tSurveyData').DataValue.BlobValue.FileName]]
        AddToLog('Extracting '+aStoredName+' to '+aFName)
        IF POSITION('.zip',aStoredName)>0 THEN
          iRes:= tCase.tSurveyData.SAVETODISK(aFName+'.zip')
          IF iRes=0 THEN
            iRes:= UnZipData(aFName,GetPassword(tCase.tMainSurveyID+tCase.tIdentifier))
          ENDIF 
        ELSE
         iRes:= tCase.tSurveyData.SAVETODISK(aFName+'.xml')
        ENDIF
        IF iRes=0 THEN
          iRes:= iTopic.OPEN(aFName+'.xml')
          iTopic.READNEXT
          oTopic:= iTopic
          oTopic.WRITE
          iTopic.RELEASE
          {$IFNDEF develop}
          iRes:= DELETEFILE(aFName+'.xml') 
          {$ENDIF}
        ELSE
          AddToLog('Extract failed: '+aFName+' Error: '+STR(iRes))  
        ENDIF  
      ENDIF
    ENDDO
    tCase.SETREADKEY(SECONDARY,secSort)
    oTopic.RELEASE
    RunExcel(eName)
  ENDIF  
ENDPROCEDURE

PROCEDURE ExtractLoggingForUser
PARAMETERS
  pUserID: STRING
  pNumberOfDaysHistory: INTEGER
AUXFIELDS
  aLogFolder: STRING
  aFilter: OPEN  
  aDateFrom: DATETYPE
INSTRUCTIONS  
  AddToLog('Extracting logging for user: '+pUserID)
  aLogFolder:= WORKINGFOLDER+'\\'+cLogFolder
  IF NOT FOLDEREXISTS(aLogFolder) THEN 
    //res:= CREATEFOLDER(aLogFolder)
    res:=  RUN('MKDIR "'+WORKINGFOLDER+'\\'+cLogFolder+'"',WAIT,HIDE) 
  ENDIF
  aDateFrom:= SYSDATE-pNumberOfDaysHistory 
  aFilter:= 'UserID=\''+pUserID+'\' AND LogWhen >=\'' + DATETOSTR(aDateFrom, 'yyyyMMdd') + '\'' 
  AddToLog('Logging filter: '+aFilter)
  IF pUserID<>'' THEN
    sdLogging.SETRECORDFILTER(aFilter)
  ENDIF
  // open target log file for user
  oUserLog.OPEN(aLogFolder+'\\'+pUserID+'_cma_logging.txt')
  IF sdLogging.FORMCOUNT>0 THEN
    REPEAT
      sdLogging.READNEXT
      res:= sdLogging.logging.SAVETODISK(aLogFolder+'\cma_logging.txt') //extract blob
      IF res=0 THEN
        // read extracted entries
        iUserLogtxt.OPEN(aLogFolder+'\\cma_logging.txt')
        REPEAT
          iUserLogtxt.READNEXT
          oUserLog:= iUserLogtxt 
          oUserLog.WRITE
        UNTIL iUserLogtxt.LASTRECORD
        iUserLogtxt.RELEASE
        res:= DELETEFILE(aLogFolder+'\\cma_logging.txt') //delete extracted file
      ENDIF
    UNTIL sdLogging.LASTRECORD
  ELSE 
    oUserLog.line:= NowDT+ ';'+ cNoLoggingFoundForUser + auxTheLogUser
    oUserLog.WRITE
  ENDIF    
  oUserLog.Flush
  oUserLog.RELEASE
ENDPROCEDURE


PROCEDURE ExportLauncherData
AUXFIELDS
  eName: STRING
  res,Index: INTEGER
  Ident: STRING
INSTRUCTIONS
  Ident:= '_'
  IF CurrentUserID<>EMPTY THEN
    Ident:= Ident+CurrentUserID+'_'
  ENDIF
  IF SelectedSurveyIndex<>EMPTY THEN
    Ident:= Ident+SrvNames[SelectedSurveyIndex]+'_'
  ENDIF  
  eName:= GetExcelOutputPath+'ExportLauncher'+Ident+DATETOSTR(SYSDATETIME,'yyyyMMddTHHmmss')+'.csv'
  sdLauncher.SETRECORDFILTER(GetLauncherExportFilter) //no modified check needed
  AddToLog('Export launcher: '+STR(sdLauncher.FORMCOUNT))
  IF FILEEXISTS(SetupPath+'LauncherExport.bmix') THEN
    res:= LauncherExport.LOADDATAMODEL(SetupPath+'LauncherExport.bmix')
  ELSE  
    res:= LauncherExport.LOADDATAMODEL(SetupPath+'launcher.bmix')
  ENDIF 
{$IFNDEF vers_511}
  IF DataExportSep=cTab THEN
    oLauncherExport.SETSEPARATOR(DataExportSep)
  ELSE
    oLauncherExport.SETSEPARATOR(DataExportSep,'"')
  ENDIF  
{$ENDIF}
  res:= oLauncherExport.OPEN(eName)
  FOR Index:= 1 to sdLauncher.FORMCOUNT DO
    sdLauncher.READNEXT
    oLauncherExport:= sdLauncher
    oLauncherExport.WRITE
  ENDDO
  oLauncherExport.RELEASE
  RunExcel(eName)
ENDPROCEDURE

AUXFIELDS
  ColumnNames: ARRAY[1..1000] of STRING
  Target: ARRAY[1..1000] OF (tarLauncher (1),
                             tarContact (2),
                             tarCustom (3),
                             tarUserInfo (4),
                             tarManageInfo (5),
                             tarTopic (6),
                             tarSkip (99))
  Values: ARRAY[1..1000] OF OPEN
  ColCount: INTEGER
  
FUNCTION GetPrimaryKeyNames: STRING
PARAMETERS
  pMeta: METATYPE 
AUXFIELDS
  i, c: INTEGER
INSTRUCTIONS
  RESULT:= ''
  c:= VAL([[pMeta.Keys.GetItem('primary').Fields.Count]])
  FOR i:= 0 TO c-1 DO
    RESULT:= RESULT+[[pMeta.Keys.GetItem('primary').Fields[i].Name]]
    IF i<>c-1 THEN RESULT:= RESULT +';' ENDIF    
  ENDDO
ENDFUNCTION  

FUNCTION GetPrimaryKeySelectQueryPart: STRING
PARAMETERS
  pMeta: METATYPE 
AUXFIELDS
  i, c: INTEGER
INSTRUCTIONS
  RESULT:= ''
  c:= VAL([[pMeta.Keys.GetItem('primary').Fields.Count]])
  FOR i:= 0 TO c-1 DO
    RESULT:= RESULT+[[pMeta.Keys.GetItem('primary').Fields[i].Name]]
    //RESULT:= RESULT+ ' AS ' + [[pMeta.Keys.GetItem('primary').Fields[i].Name]]
    IF i<>c-1 THEN RESULT:= RESULT +',' ENDIF    
  ENDDO
ENDFUNCTION  


FUNCTION MakePrimaryKeyFilter: STRING
PARAMETERS
  pKeyCount: INTEGER
  pKeyNames: STRING
  pID: STRING
AUXFIELDS
  index: INTEGER
INSTRUCTIONS
  RESULT:= ''
  FOR index:= 1 TO pKeyCount DO
    IF index<>1 then RESULT:= result + ' AND ' ENDIF
    result:= result + GetEntry(pKeyNames,index,';')+'='+ '\''+GetEntry(pID,index,',')+'\''
  ENDDO   
ENDFUNCTION
  
FUNCTION KeyFieldsCountOK: INTEGER
PARAMETERS
  pKey: STRING
  pKeyCount: INTEGER
AUXFIELDS
  s: STRING
  p,i: INTEGER  
INSTRUCTIONS
  RESULT:= 0
  IF pKeyCount>0 THEN
	  s:= pKey+','
	  FOR i:= 1 TO pKeyCount DO
	    IF GetEntry(s,i,',')='' THEN
	      RESULT:= 1
	      EXITFOR
	    ENDIF
	  ENDDO 
	  IF RESULT=0 THEN //now check if key has not too many entries...
	    p:= 1 i:= 0
	    REPEAT
	      p:= POSITION(',',s,p) 
	      IF p<>0 THEN p:= p+1 ENDIF
	      i:= i+1
	    UNTIL i=pKeyCount+1
	    IF p<>0 THEN RESULT:= 1 ENDIF
	  ENDIF    
  ENDIF
ENDFUNCTION
  
FUNCTION SplitCSV: INTEGER
PARAMETERS 
  line: OPEN
  pSep: STRING
  TRANSIT pCount: INTEGER
AUXFIELDS
  escaped: (_false,_true)
  inQuotes:(_false,_true)
  index,ColC: INTEGER
  s: STRING
  c: STRING[1]
INSTRUCTIONS
  escaped:= _false
  inQuotes:= _false
  FOR index:= 1 TO LEN(line) DO
    c:= SUBSTRING(line,index,1) 
    IF (c = pSep AND inQuotes=_false) THEN
      ColC:= ColC+1
      values[ColC]:= s   
      s:= EMPTY
    ELSEIF (c = '\\' and escaped=_false) THEN
      escaped := _true
    ELSEIF (c = '"' and escaped=_false) THEN
      IF inQuotes=_false THEN inQuotes:= _true ELSE inQuotes:= _false ENDIF
    ELSE
      escaped := _false
      s:= s+c
    ENDIF
  ENDDO  
  ColC:= ColC+1
  values[ColC]:= s
  pCount:= ColC
  IF values=EMPTY THEN RESULT:= 1 ELSE RESULT:= 0 ENDIF
ENDFUNCTION

FUNCTION ProcessFieldNames: INTEGER
PARAMETERS
  TRANSIT pReport: OPEN
AUXFIELDS
  i: INTEGER
  pos: INTEGER
  ap,prefix: STRING
  IDPresent: (yes),EMPTY
  cError: INTEGER
  iRes: INTEGER
  aContactGuid: STRING
INSTRUCTIONS
  aTopicInImport:= EMPTY
  srvList.GET(SelectedSurvey) 
  GetSurveySettings(SelectedSurvey)
  IF srvList.SetupFilename='' THEN
  iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
  ENDIF  
  aContactGuid:= GetContactInfoGUID('')
  IF aContactGuid=EMPTY THEN
    srvList.GET(SECONDARY,srvContactInfo)
    iRes:= Contact.LOADDATAMODEL(srvList.GetSurveyMetaFileName)
  ELSE
    srvList.GET(aContactGuid) 
    iRes:= Contact.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
  ENDIF  
  srvList.GET(SelectedSurvey) 
  ColumnNames:= values
  FOR i:= 1 TO colcount do
    ap:= ColumnNames[i]
    IF UPPERCASE(ap)='ID' THEN IDPresent:= Yes ENDIF
    pos:= POSITION(':',ap)
    target[i]:= tarLauncher 
    IF Pos>0 THEN
      Prefix:= LOWERCASE(SUBSTRING(ap,1,pos))
      ap:= SUBSTRING(ap,pos+1,255)
      CASE Prefix of
      'launcher:': 
         ColumnNames[i]:= ap
         IF [[launcher.FieldExists(ap)]]='False' THEN
           pReport:= pReport+REPLACE(strFieldNotInLauncher,'$field',ap,true)+'<newline>'
           cError:= cError+1
         ENDIF  
      'topic:': 
         target[i]:= tarTopic
         columnnames[i]:= ap 
         aTopicInImport:= yes
         IF [[TopicMeta.FieldExists(ap)]]='False' THEN
           pReport:= pReport+REPLACE(strFieldNotInTopic,'$field',ap,true)+'<newline>'
           cError:= cError+1
         ENDIF  
      'contact:': 
         target[i]:= tarContact 
         columnnames[i]:= ap
         IF [[Contact.FieldExists(ap)]]='False' THEN
           pReport:= pReport+REPLACE(strFieldNotInContact,'$field',ap,true)+'<newline>'
           cError:= cError+1
         ENDIF 
      'custom:' : 
         target[i]:= tarCustom 
         columnnames[i]:= ap
      'skip:'   : 
         target[i]:= tarSkip
      ENDCASE
    ELSE
      IF ap<>EMPTY THEN
        IF [[launcher.FieldExists(ap)]]='False' THEN
          pReport:= pReport+REPLACE(strFieldNotInLauncher,'$field',ap,true)+'<newline>'
          cError:= cError+1
        ENDIF  
      ENDIF  
    ENDIF  
  ENDDO
  IF IDPresent=EMPTY THEN
    cError:= cError+1
    pReport:= pReport +strIDMissing
  ENDIF
  RESULT:= cError
ENDFUNCTION

FUNCTION AddDoubleQuotesWhenSepPresent: OPEN
PARAMETERS 
  pValue: OPEN 
  pSep: STRING
INSTRUCTIONS
  RESULT:= pValue
  IF POSITION(pSep,pValue)>0 THEN
    RESULT:= '"'+RESULT+'"'
  ENDIF
ENDFUNCTION      

PROCEDURE ProcessFieldValues  
PARAMETERS
  pColC: INTEGER
AUXFIELDS
  ColC: INTEGER   
  I, Res, Index, aKeyCount: INTEGER
  tmp: STRING
  aKeys: STRING
  aName: STRING
  aValue: OPEN
instructions
  FOR I:= 1 TO MIN(pColC,ColCount) DO
    IF ColumnNames[i]<>EMPTY THEN
      aName:= ColumnNames[i]
      aValue:= values[i]
      case Target[i] OF
        tarLauncher: 
          IF [[Launcher.GetField(aName).Type.Structure]]='Blob' THEN
            IF aValue<>EMPTY THEN
              IF FILEEXISTS(auxLastImportFolder+aValue) THEN
                Res:= tlauncher.LOADFROMDISK(aName,auxLastImportFolder+aValue)
                IF Res<>0 THEN AddToLog('Blob file load error on "'+aName+'" ('+auxLastImportFolder+aValue+'). Error: '+STR(RES)) ENDIF
              ELSE
                AddToLog('Blob file not found: '+auxLastImportFolder+aValue)
              ENDIF
            ENDIF  
          ELSE
            tLauncher.PUTVALUE(aName,aValue)
          ENDIF  
        tarCustom: 
          tLauncher.CMA_CustomUse:= tLauncher.CMA_CustomUse+aName+CustomDataSep(1)+AddDoubleQuotesWhenSepPresent(aValue,CustomDataSep(2))+CustomDataSep(2)
        tarContact: 
          tLauncher.CMA_ContactData:= tLauncher.CMA_ContactData+aName+ContactDataSep(1)+AddDoubleQuotesWhenSepPresent(aValue,ContactDataSep(2))+ContactDataSep(2)
        tarTopic: 
          IF [[TopicMeta.GetField(aName).Type.Structure]]='Blob' THEN
            IF aValue<>EMPTY THEN
              IF FILEEXISTS(auxLastImportFolder+aValue) THEN
                Res:= uTopic.LOADFROMDISK(aName,auxLastImportFolder+aValue)
                IF Res<>0 THEN AddToLog('Topic Blob file load error on "'+aName+'" ('+auxLastImportFolder+aValue+'). Error: '+STR(RES)) ENDIF
              ELSE
                AddToLog('Blob file not found: '+auxLastImportFolder+aValue)
              ENDIF
            ENDIF  
          ELSE
            uTopic.PUTVALUE(aName,aValue)
          ENDIF
        tarUserInfo: sdUsers.PUTVALUE(aName,aValue)
        tarManageInfo: sdManageInfo.PUTVALUE(aName,aValue)   
      ENDCASE
    ENDIF    
  ENDDO
  IF aTopicInImport=yes THEN
    aKeys:= GetPrimaryKeyNames([[TopicMeta]]) 
    aKeyCount:= VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]])
    FOR index:= 1 TO aKeyCount DO
      uTopic.PUTVALUE(GetEntry(aKeys,index,';'),GetEntry(tLauncher.ID,index,','))
    ENDDO   
    uTopic.WRITE
  ENDIF
ENDPROCEDURE

FUNCTION ProcessValues: INTEGER
PARAMETERS
  pColCount: INTEGER
  pKeyCount: INTEGER
  TRANSIT pReport: OPEN
AUXFIELDS
  aGUIDError: (yes),EMPTY  
INSTRUCTIONS
  tLauncher.INITRECORD
  uTopic.INITRECORD
  ProcessFieldValues(pColCount)
  IF tLauncher.MainSurveyID<>EMPTY THEN
    IF tLauncher.MainSurveyID<>SelectedSurvey THEN
      aGUIDError:= yes
    ENDIF
  ELSE
  tLauncher.MainSurveyID:= SelectedSurvey
  ENDIF  
  IF aGUIDError=yes THEN
    pReport:= pReport+strErrorGUID+'<newline>'
    RESULT:= 1
  ELSEIF KeyFieldsCountOK(tLauncher.ID,pKeyCount)=0 THEN
    tLauncher.WRITE
  ELSE
    RESULT:= 1
    pReport:= pReport+strErrorInKey+tLauncher.ID+'<newline>'
  ENDIF  
ENDFUNCTION

PROCEDURE ProcessInfoValues
PARAMETERS
  pTarget: INTEGER
  pColCount: INTEGER
INSTRUCTIONS
  CASE pTarget OF
  4: sdUsers.INITRECORD
  5: sdManageInfo.INITRECORD
  ENDCASE
  ProcessFieldValues(pColCount)
  CASE pTarget OF
  4: sdUsers.WRITE
  5: sdManageInfo.WRITE
  ENDCASE
  
ENDPROCEDURE

FUNCTION ProcessExcelImportFile: INTEGER
PARAMETERS
  pKeyCount: INTEGER
  TRANSIT pReport:OPEN
AUXFIELDS
  aError: INTEGER
  aValue: OPEN
  res: INTEGER
INSTRUCTIONS
  RESULT:= 0
  REPEAT
    res:= ReadExcelValues
    IF res=0 THEN RESULT:= RESULT+ProcessValues(ColCount,pKeyCount,pReport) ENDIF
  UNTIL qExcel.LASTRECORD OR NOT qExcel.RESULTOK 
ENDFUNCTION  

FUNCTION ProcessCSVImportFile: INTEGER
PARAMETERS
  pKeyCount: INTEGER
  TRANSIT pReport:OPEN
AUXFIELDS
  aError: INTEGER
  Colc: INTEGER
  res: INTEGEr
INSTRUCTIONS
  REPEAT
    iGenericImport.READNEXT
    res:= SplitCSV(iGenericImport.iValues,DataImportSep,ColC)
    IF res=0 THEN
      RESULT:= RESULT+ProcessValues(ColCount,pKeyCount,pReport)
    ENDIF  
  UNTIL iGenericImport.LASTRECORD OR NOT iGenericImport.RESULTOK 
ENDFUNCTION

FUNCTION MakeLauncherDownloadFilter:OPEN
INSTRUCTIONS
  tLauncher.RESET
  REPEAT
    tLauncher.READNEXT
    IF RESULT<>'' THEN RESULT:= RESULT+',' ENDIF
    RESULT:= RESULT+'\''+tLauncher.ID+'\''
  UNTIL tLauncher.LASTRECORD
  RESULT:= 'MainSurveyID=\''+SelectedSurvey+'\' AND ID IN ('+RESULT+')'
  AddToLog('Filter: '+RESULT)
ENDFUNCTION

PROCEDURE ProcessImportFile
PARAMETERS
  pIsExcel: (yes,no)
AUXFIELDS
  res: INTEGER
  aKeyCount: INTEGER
  aKeyError: INTEGER
  aReport: OPEN
  aFilter: OPEN
  Index: INTEGER
  aImportCount: INTEGER
INSTRUCTIONS
  IF aTopicInImport=yes THEN
    Res:= uTopic.OPEN(srvlist.GetSurveyDataFilename)
    uTopic.ERASE 
  ENDIF
  DISPLAY(strProcessing,HOURGLASS)
  IF srvList.SetupFilename=EMPTY THEN
    aKeyCount:= VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]])
  ENDIF
  tLauncher.ERASE
  IF pIsExcel=yes THEN
    aKeyError:= ProcessExcelImportFile(aKeyCount,aReport)
    qExcel.RELEASE
  ELSE
    aKeyError:= ProcessCSVImportFile(aKeyCount,aReport)
    iGenericImport.RELEASE
  ENDIF  
  IF aKeyError=0 THEN
    IF tLauncher.FORMCOUNT>0 THEN
      tLauncher.RESET  //where id in ('','','')
      aFilter:= MakeLauncherDownloadFilter
      srvList.GET(SECONDARY,srvCases)
      ufServerCases.OPEN(CMALauncherFileName) 
      ufServerCases.ERASE //to make sure it is empty before the up load
      sdLauncher.SETRECORDFILTER(aFilter) //no modified check needed
      IF DoNotAllowOverwrite=yes THEN
        FOR Index:= 1 TO sdLauncher.FORMCOUNT DO
          sdLauncher.READNEXT
          IF sdLauncher.CMA_Process.FirstDownloaded<>EMPTY THEN
            IF tLauncher.SEARCH(sdLauncher.MainSurveyID,sdLauncher.ID) THEN
              tLauncher.READ
              AddToLog('Case skipped '+sdLauncher.ID)  
              tLauncher.DELETE
              IF aTopicInImport=yes THEN
                uTopic.GETFORM('primary',sdLauncher.ID)
                IF uTopic.resultok THEN
                  uTopic.DELETE
                  AddToLog('Topic case skipped '+sdLauncher.ID)  
                ENDIF
              ENDIF
            ENDIF  
          ENDIF  
        ENDDO
      ENDIF  
      tLauncher.RESET 
      FOR Index:= 1 TO tLauncher.FORMCOUNT DO
        tLauncher.READNEXT
        ufServerCases:= tLauncher
        ufServerCases.CMA_Process.CreatedDT:= NowDT
        ufServerCases.WRITE
        aImportCount:= aImportCount+1
      ENDDO
      ufServerCases.RELEASE 
      Res:= srvList.UPLOADDATA
      IF aTopicInImport=yes THEN
        uTopic.RELEASE
        srvList.GET(SelectedSurvey) 
        res:= srvList.UPLOADDATA
        AddToLog('Records created in topic database: '+STR(res))
      ENDIF
      CLEARDISPLAY 
      DISPLAY(strNrImported+' '+STR(aImportCount),WAIT)
      AddToLog('Import finshed. Count: '+STR(aImportCount))
    ENDIF
  ELSE
    CLEARDISPLAY
    DISPLAY(aReport,WAIT)
    AddToLog('Key errors in import. Import not possible')
  ENDIF  
ENDPROCEDURE

FUNCTION ReadExcelValues: INTEGER
AUXFIELDS
  Index: INTEGER
INSTRUCTIONS
  qExcel.READNEXT
  Values:= EMPTY
  FOR Index:= 0 TO VAL([[qExcel.Fields.count]])-1 do
    Values[Index+1]:= [[qExcel.Fields[Index].DataValue.StringValue]]
  ENDDO 
  IF Values=EMPTY THEN RESULT:= 1 ELSE RESULT:= 0 ENDIF
ENDFUNCTION

PROCEDURE ImportLauncherCases
AUXFIELDS
  FName: STRING
  res, Index: INTEGER
  ReportStr: OPEN
  aValue: OPEN
  IsExcel: (yes,no)
INSTRUCTIONS
  //select file with cases to import
  fName:= SELECTFILE(strImportLauncherCases,auxLastImportFolder,'Data file|*.csv;*.xlsx|CSV file|*.csv|Excel spreadsheet|*.xlsx')
  IF fName<>'' THEN
    Res:= ReadHeaderLineFromImport(fName,IsExcel)    
    IF res=0 THEN
      Res:= ProcessFieldNames(ReportStr)
      IF Res=0 THEN
        IF CONFIRM(REPLACE(REPLACE(strSureToImport,'$file',fname),'$survey',SrvNames[SelectedSurveyIndex])) THEN
          ProcessImportFile(IsExcel)
        ENDIF
      ELSE
        DISPLAY(ReportStr,WAIT)  
        AddToLog('Errors found in Column names. Import not possible.')
        AddToLog(ReportStr) 
      ENDIF    
    ELSE
      AddToLog('Error opening file '+fName+' Error: '+STR(res))
      DISPLAY(ReportStr,WAIT)  
    ENDIF  
  ELSE
     AddToLog('Error opening file '+fName+'. No file selected or file is not accessible')
     DISPLAY(strImportFileOpenError,WAIT)  
  ENDIF  
ENDPROCEDURE

FUNCTION GetConsistencyCheckFilter: OPEN
AUXFIELDS
  aText: OPEN
INSTRUCTIONS
  // compose filter
  aText:= '(CMA_GroupType IS NULL OR CMA_GroupType=1) AND CMA_Status IS NOT NULL AND '+GetInstrumentFilter //exclude child cases and cases which have no status yet
  IF currentUserID<>EMPTY THEN
  // add supervisor filter if a supervisor was selected 
    IF currentUserID<>EMPTY THEN
    aText:= aText+ 'AND '+ GetAllForSupervisorFilter(currentUserID)
    ELSE
      IF aUserType=manager THEN
        aText:= aText+ 'AND '+ GetAllForManagerFilter(USERNAME)
      ELSE
        aText:= aText+ 'AND '+ GetAllForSupervisorFilter(USERNAME)
      ENDIF     
    ENDIF     
  ENDIF
  AddToLog('Consistency check filter set to: '+aText)
  RESULT:= aText      
ENDFUNCTION 

PROCEDURE InitTemporaryConsistencyCase
INSTRUCTIONS
  tConsistency.INITRECORD
  tConsistency.InstrumentID:= sdLauncher.MainSurveyID
  tConsistency.ID:=sdLauncher.ID
  tConsistency.SurveyName:=sdLauncher.SurveyDisplayName
  tConsistency.LauncherSurveyDataFound:=no
  tConsistency.LauncherSurveyDataFoundStr:=StrNO
  tConsistency.LauncherAttemptsNo:=0
  tConsistency.SurveyDataFound:=no
  tConsistency.SurveyDataFoundStr:=strNo
  tConsistency.AttemptsDataNo:=0           
ENDPROCEDURE

FUNCTION GetTopicPrimaryKey: STRING
PARAMETERS
  aPKs : STRING
  iPKFieldCount : INTEGER
AUXFIELDS
  aKey : STRING
  aKeyValue : STRING
  aVal: STRING
  l,d: INTEGER
  i: INTEGER
INSTRUCTIONS
  FOR i:= 0 TO iPKFieldCount-1 DO
    aKey:= GetEntry(aPKs, i+1, ',')
    aVal:= tTopic.GETVALUE(akey)
    CASE [[TopicMeta.GetField(aKey).Type.Structure]] OF
    'Integer': aVal:= STR(ROUND(VAL(aVal)))
    'Real':    
     d:= VAL([[TopicMeta.GetField(aKey).Type.Decimals]])
     aVal:= STR(VAL(aVal),20,d)
    ENDCASE
    aKeyvalue:=aKeyValue + TRIM(aVal)
    IF i<>iPKFieldCount-1 THEN aKeyvalue:= aKeyvalue +',' ENDIF    
  ENDDO
  RESULT:=aKeyValue
ENDFUNCTION


PROCEDURE CreateTopicKeyTempFile
PARAMETERS
  pPKs : STRING
  pPKFieldCount : INTEGER
AUXFIELDS
  iCount: INTEGER  
INSTRUCTIONS
  iCount:= 0
  tTopicKeys.ERASE
  tTopic.RESET
  tTopic.READNEXT
  //AddToLog('Consistency check: Creating topic key file')
  WHILE NOT tTopic.EOF DO
    tTopicKeys.INITRECORD 
    tTopicKeys.ID:= GetTopicPrimaryKey(pPKs, pPKFieldCount)
    //AddToLog('Consistency check: Adding TOPIC key to file:' + tTopicKeys.ID)
    iCount:= iCount+1
    tTopicKeys.Write
    tTopic.READNEXT
 ENDWHILE
 AddToLog('Consistency check: topic key file. Number of keys written:' + str(iCount))
ENDPROCEDURE

PROCEDURE CreateAttemptsKeyTempFile
AUXFIELDS
  iCount: INTEGER  
  sID: STRING[219]
  iSeqnr: INTEGER
INSTRUCTIONS
  iCount:= 0
  tAttemptsKeys.ERASE
  tAttempts.RESET
  tAttempts.READNEXT
  //AddToLog('Consistency check: Creating attempts key file')
  WHILE NOT tAttempts.EOF DO
    IF sID<>tAttempts.GETVALUE('ID') THEN
      tAttemptsKeys.INITRECORD 
      tAttemptsKeys.ID:= tAttempts.GETVALUE('ID')
      tAttemptsKeys.When:= tAttempts.GETVALUE('_When')
      iSeqnr:= 1
      sID:= tAttemptsKeys.ID
    ELSE
      iSeqnr:= iSeqnr+1
      IF tAttemptsKeys.When<tAttempts.GETVALUE('_When') THEN
        tAttemptsKeys.When:= tAttempts.GETVALUE('_When')
      ENDIF  
    ENDIF
    iCount:= iCount+1
    tAttemptsKeys.Count:= iSeqnr
    //AddToLog('Consistency check: Attempts key file. ID' + sID + ', Seqnr: ' + STR(iSeqNr)+' '+tAttemptsKeys.When)
    tAttemptsKeys.WRITE
    tAttempts.READNEXT
 ENDWHILE
 AddToLog('Consistency check: Attempts key file. Number of IDs written:' + str(iCount))
ENDPROCEDURE


PROCEDURE PerformConsistencyCheck
AUXFIELDS
  Index : INTEGER
  iRes : INTEGER
  aAttemptGUID : STRING[36]
  iResOpenTopic, iResOpenAttempts : INTEGER
  aConnectionString : OPEN
  aKeys: STRING 
  aKeyCount: INTEGER  
  aKeyFilter : STRING
  aQry : OPEN
  aPKs : STRING
  iPKFieldCount : INTEGER
INSTRUCTIONS
  iResOpenTopic:= -1 
  iResOpenAttempts:= -1
  // open topic db
  srvList.GET(SelectedSurvey)
  IF srvList.RESULTOK THEN
    auxSelectedSurveyDisplayName:=srvList.Name
    aConnectionString:='Serverpark='+srvList.ServerPark+';InstrumentID='+SelectedSurvey
    iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
    sdTopic.SETCONNECTIONSTRING(aConnectionString)
//    AddToLog('Connection string used for topic db :'+ aConnectionString)
    iResOpenTopic:= sdTopic.OPEN
    IF iResOpenTopic=0 THEN
      // load topic keys
      AddToLog('Consistency check. Database successfully opened for topic :'+ SelectedSurvey)
      iPKFieldCount:= VAL([[TopicMeta.Keys.GetItem('primary').Fields.Count]])
      aPKs:= GetPrimaryKeySelectQueryPart([[TopicMeta]])
      aQry:= 'SELECT ' + aPKs 
      aQry:= aQry + ' FROM ' + auxSelectedSurveyDisplayName // + auxSelectedSurveyDisplayName 
      AddToLog('Executing query to fetch all primary key in topic db: ' + aQry)
      iRes:= sdTopic.ExecuteQuery(aQry, tTopic, false) // false is not native
      IF (iRes<>0) THEN
        AddToLog('Consistency check. Error executing query against topic db:'+ aQry)
      ELSE
        AddToLog('Number of topic records loaded:'+ STR(tTopic.FORMCOUNT))
        CreateTopicKeyTempFile(aPKs, iPKFieldCount)
      ENDIF
      // load primary keys from attempts
      GetSurveySettings(SelectedSurvey)
      aAttemptGUID:= GetAttemptsGUID('')
      IF (aAttemptGUID=EMPTY) THEN
        srvList.GET(SECONDARY,srvAttempts)
        aAttemptGUID:= srvList.ID
      ELSE
        srvList.GET(primary, aAttemptGUID)
      ENDIF 

      iRes:= Attempts.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
      IF iRes=0 THEN
        aConnectionString:='Serverpark='+srvList.ServerPark+';InstrumentID='+aAttemptGUID
        sdAttempts.SETCONNECTIONSTRING(aConnectionString)
        //AddToLog('Connection string used for attempts db :'+ aConnectionString)
        iResOpenAttempts:= sdAttempts.OPEN
        IF iResOpenAttempts=0 THEN
          aQry:= 'SELECT `ID`, `SeqNr`, `WhenMade.When` _When FROM ' + srvList.Name + ' WHERE MainSurveyID = \'' + SelectedSurvey + '\' ORDER BY ID, SeqNr'   
          AddToLog('Executing query to fetch all primary keys and their seqnrs from attempts db: ' + aQry)
          iRes:= sdAttempts.ExecuteQuery(aQry, tAttempts, false) // false is not native
          IF (iRes<>0) THEN
            AddToLog('Consistency check. Error executing query against attempts db:'+ aQry)
          ELSE
            AddToLog('Number of attempts records loaded:'+ STR(tAttempts.FORMCOUNT))
            CreateAttemptsKeyTempFile
          ENDIF
        ENDIF
      ENDIF
    ELSE
      AddToLog('Consistency check. Could not connect to topic db using connection string:'+aConnectionString)
    ENDIF 
  ENDIF
  
  //  currentUserID:=USERNAME
  IF currentUserID<>EMPTY THEN
    AddToLog('Consistency check. Performing consistency check for user :'+currentUserID )
  ELSE 
    AddToLog('Consistency check. Performing consistency check for login user :'+USERNAME + ', user type: ' + GetCategoryName(aUserType))
  ENDIF
  sdLauncher.SETRECORDFILTER(GetConsistencyCheckFilter) //no modified check needed
  tConsistency.ERASE  
  auxCasesCount:= sdLauncher.FORMCOUNT
  AddToLog('Total number of launcher cases selected for consistency check: '+STR(AuxCasesCount))
  
  FOR Index:= 1 to auxCasesCount DO
    sdLauncher.READNEXT
    InitTemporaryConsistencyCase 
    // check launcher
    IF sdlauncher.CMA_Data.Survey<>EMPTY THEN
      tConsistency.LauncherSurveyDataFound:=yes      
      tConsistency.LauncherSurveyDataFoundStr:=strYes      
    ENDIF
    IF sdlauncher.CMA_Data.Attempts<>EMPTY THEN
      tConsistency.LauncherAttemptsNo:=sdLauncher.CMA_Data.AttemptsCount   
      tConsistency.LastAttempt:= sdLauncher.CMA_Process.LastAttempt.When
    ENDIF

    // check topic
    IF iResOpenTopic=0 THEN
      // filter tTopic on primary key
      IF tTopicKeys.SEARCH(primary, sdLauncher.ID) THEN
        //AddToLog('Topic record found for filter: '+sdLauncher.ID)
        tConsistency.SurveyDataFound:=yes
        tConsistency.SurveyDataFoundStr:=strYes
      ELSE
        AddToLog('No Topic record found for filter: '+sdLauncher.ID)
      ENDIF
    ENDIF
    
    // check attempts
    IF iResOpenAttempts=0 THEN
      tAttemptsKeys.GET(primary, sdLauncher.ID) 
      IF tAttemptsKeys.RESULTOK THEN
          tConsistency.AttemptsDataNo:=tAttemptsKeys.Count
          tConsistency.LastAttemptInData:= tAttemptsKeys.When 
      ENDIF
    ENDIF

    // Add to temporary file if inconsistency detected
    IF (tConsistency.LauncherSurveyDataFound=yes AND tConsistency.SurveyDataFound=no) OR 
       (tConsistency.LauncherAttemptsNo<>tConsistency.AttemptsDataNo) OR 
       (tConsistency.LastAttempt<>tConsistency.LastAttemptInData)
    THEN
      AddToLog('Inconsistency detected for case: '+ tConsistency.InstrumentID+' ID:'+tConsistency.ID+' Launcher SD found:'+GetCategoryName(tConsistency.LauncherSurveyDataFound)+' SD found:'+GetCategoryName(tConsistency.SurveyDataFound)+' Launcher Attempts:'+STR(tConsistency.LauncherAttemptsNo)+' Attempts:'+STR(tConsistency.AttemptsDataNo))
      tConsistency.WRITE
    ENDIF
  ENDDO
  tConsistency.RESET
  tConsistency.INITRECORD
ENDPROCEDURE

// Recover inconsistent/missing topic and attempts data records. The repair consists of two parts:
// - recovers survey data record based on contents of cma_data.survey blob
// - recovers attempts data records based on contents of cma_data.attempts blob
PROCEDURE RecoverInconsistentLauncherRecords
AUXFIELDS
  Index: INTEGER
  iRes: INTEGER
  iRecoveredAttempts: INTEGER
  iRecoveredSurveyData: INTEGER
  aMsg : STRING
INSTRUCTIONS
  auxTotalInconsistentCases:=tConsistency.FORMCOUNT
  AddToLog('Starting recovery of '+STR(auxTotalInconsistentCases) + ' cases')
  IF auxTotalInconsistentCases > 0 THEN
    Display(cRepairingInconsistentCases, hourglass)
    tConsistency.RESET
    // load topic meta for survey
    srvList.GET(SelectedSurvey) 
    iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
    // clear local topic db
    iRes:=uTopic.OPEN(srvlist.GetSurveyDataFilename)
    uTopic.RESET
    uTopic.ERASE
    FOR Index:= 1 to auxTotalInconsistentCases DO
      tConsistency.READNEXT    
      IF tConsistency.LauncherSurveyDataFound=yes AND tConsistency.SurveyDataFound=no THEN
        RecoverSurveyData(tConsistency.InstrumentID, tConsistency.ID)
        iRecoveredSurveyData:= iRecoveredSurveyData+1
      ENDIF
      IF tConsistency.LauncherAttemptsNo<>tConsistency.AttemptsDataNo or tConsistency.LastAttempt<>tConsistency.LastAttemptInData THEN
        RecoverAttemptsData(tConsistency.InstrumentID, tConsistency.ID)
        iRecoveredAttempts:= iRecoveredAttempts+1
      ENDIF
    ENDDO
    
    // upload topic data
    IF iRecoveredSurveyData>0 THEN
      AddToLog('Uploading: Recovered '+ STR(iRecoveredSurveyData) + ' survey data records')
      srvList.GET(SelectedSurvey) 
      iRes:= TopicMeta.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
      iRes:= srvList.UPLOADDATA
      AddToLog('iRes Upload: '+ STR(iRes))
    ENDIF
    cleardisplay
  ENDIF
  aMsg:= REPLACE(REPLACE(strEndRecovery,'$1',STR(iRecoveredSurveyData)),'$2',STR(iRecoveredAttempts)) 
  AddToLog(aMsg)
  Display(aMsg, WAIT)
  auxTotalInconsistentCases:= 0
  tConsistency.ERASE  
ENDPROCEDURE

PROCEDURE RecoverSurveyData
PARAMETERS
  pInstrumentID: STRING
  pID: STRING
AUXFIELDS
  aFileName: OPEN 
  aStoredName : STRING
  iRes: INTEGER
INSTRUCTIONS
  // get launcher record  
  sdLauncher.GET(pInstrumentID, pID)
  IF sdLauncher.RESULTOK THEN
    // save survey data blob to disk for importing
    aFileName:= setupPath+REPLACE(sdlauncher.MainSurveyID, '-','_')+'_'+REPLACE(sdLauncher.ID, ',','_')
    aStoredName:= [[sdLauncher.GetFields('CMA_Data').GetItem('Survey').DataValue.BlobValue.FileName]]
    AddtoLog('Found filename: '+aStoredName)
    IF POSITION('.zip',aStoredName)>0 THEN
      // save zip
      iRes:= sdLauncher.CMA_Data.Survey.SAVETODISK(aFileName+'.zip')
      IF iRes=0 THEN
        // and extract
        iRes:= UnZipData(aFileName,GetPassword(sdlauncher.MainSurveyID+sdlauncher.ID))
      ENDIF 
    ELSE
      // save xml
      AddtoLog('Saving topic data to file: '+aFileName+'.xml')
      iRes:= sdLauncher.CMA_Data.Survey.SAVETODISK(aFileName+'.xml')
    ENDIF
    IF iRes=0 THEN
      // open file and write to local topic db
      iTopic.RESET
      AddtoLog('Opening topic data file for recovery : '+aFileName+ '.xml')
      iRes:= iTopic.OPEN(aFileName+'.xml')
      AddtoLog('Open file result. iRes : '+str(iRes))
      iTopic.READNEXT
      uTopic:= iTopic
      //AddtoLog('uTopic key : '+ uTopic.GetValue('ID'))
      uTopic.WRITE
      iTopic.RELEASE
      uTopic.Flush
      AddToLog('Recovered survey data record : ' + sdlauncher.MainSurveyID + ', ID: '+ sdlauncher.ID)
      {$IFNDEF develop}
      iRes:= DELETEFILE(aFileName+'.xml') 
      {$ENDIF}
    ELSE
      AddToLog('Extract failed: '+aFileName+' Error: '+STR(iRes))  
    ENDIF 
  ENDIF
ENDPROCEDURE

FUNCTION GetAttemptsGuidForSurvey : STRING[36]
PARAMETERS
  pInstrumentID: STRING
  pLauncherAttemptsGUID: STRING
AUXFIELDS 
  aAttemptGUID : STRING
INSTRUCTIONS
  GetSurveySettings(pInstrumentID)
  aAttemptGUID:= GetAttemptsGUID(pLauncherAttemptsGUID)  
  IF (aAttemptGUID=EMPTY) THEN
    srvList.GET(SECONDARY,srvAttempts)
    aAttemptGUID:= srvList.ID
  ENDIF     
  Result:=aAttemptGUID          
ENDFUNCTION

FUNCTION GetAttemptsDatamodelFileForSurvey : OPEN
PARAMETERS pTopic : STRING[36]
AUXFIELDS aAttemptsGuid : STRING[36]
INSTRUCTIONS
   IF pTopic <> '' THEN
      aAttemptsGuid := GetAttemptsGuidForSurvey(pTopic, '')
      IF aAttemptsGuid <> '' THEN
         srvList.GET(primary, aAttemptsGuid)
      ENDIF
   ELSE
      srvList.GET(secondary, srvAttempts)
   ENDIF
   IF srvList.RESULTOK AND srvList.SurveyState = InstalledOnClient THEN
      RESULT := srvList.GetSurveyMetaFilename
   ENDIF
ENDFUNCTION

PROCEDURE RecoverAttemptsData
PARAMETERS
  pInstrumentID: STRING
  pID: STRING
AUXFIELDS
  aFileName: OPEN  
  aStoredName: STRING
  iRes: INTEGER
  aAttemptGUID: STRING
  aSituation: INTEGER
  i: INTEGER
  aCount: INTEGER
INSTRUCTIONS
  // get launcher record  
  sdLauncher.GET(pInstrumentID, pID)
  IF sdLauncher.RESULTOK THEN
    aFileName:= setupPath+REPLACE(sdlauncher.MainSurveyID, '-','_')+'_'+REPLACE(sdLauncher.ID, ',','_')
    aStoredName:= [[sdLauncher.GetField('CMA_Data.Attempts').DataValue.BlobValue.FileName]]
//    AddToLog('Recovering attempts. Writing attempts for survey '+ auxSelectedSurveyDisplayName + ' to file: ' + aFileName+'.xml')
    iRes:= sdLauncher.CMA_Data.Attempts.SAVETODISK(aFileName+'.xml')
    IF tConsistency.LauncherAttemptsNo<>tConsistency.AttemptsDataNo then
      aSituation:= 1 //just like it is now: launcher is leading
    ELSE //tConsistency.LastAttempt<>tConsistency.LastAttemptInData
      aSituation:= 2 
      //merge the two. requires a change in the launcher and in the attempts database
      //cma_data.attempts new xml and cma_data.attemptscount:= +1
      //write additional case in attempts database...
    ENDIF  
    IF iRes=0 THEN
      // load correct attempts metamodel
      aAttemptGUID:= GetAttemptsGuidForSurvey(sdLauncher.MainSurveyID, sdLauncher.CMA_AttemptsGUID)
//      AddToLog('Recovering attempts for survey '+ auxSelectedSurveyDisplayName + ' and attempts GUID:' + aAttemptGUID)
      IF aAttemptGUID<>EMPTY THEN
        srvList.GET(aAttemptGUID) 
        IF srvList.RESULTOK THEN
          IF aAttemptGUID<>[[Attempts.InstrumentID]] THEN
          iRes:= Attempts.LOADDATAMODEL(srvList.GetSurveyMetaFilename)
            sdAttempts.SETCONNECTIONSTRING('Serverpark='+srvList.ServerPark+';InstrumentID='+aAttemptGUID)
            iRes:= sdAttempts.OPEN
          ENDIF  
          iRes:= ufAttempts.OPEN(replace(srvList.GetSurveyDataFilename,'.bdix',''))
          IF iRes=0 THEN
            AddToLog('Recovering attempts: Opening file : '+ aFileName+'.xml')
            iRes:= iAttempts.OPEN(aFileName+'.xml')
            IF iRes=0 THEN
              ufAttempts.ERASE
              sdAttempts.SETRECORDFILTER('MainSurveyID=\''+sdLauncher.MainSurveyID+'\' AND ID=\''+sdLauncher.ID+'\'')
              IF aSituation=2 THEN 
                aCount:= 0
                //first process all cases from attempts database
                REPEAT 
                  sdAttempts.READNEXT
                  IF sdAttempts.RESULTOK THEN
                    aCount:= aCount+1
                    ufAttempts:= sdAttempts
                    ufAttempts.PUTVALUE('SeqNr',STR(aCount))
                    ufAttempts.WRITE
                  ENDIF  
                UNTIL sdAttempts.LASTRECORD OR NOT sdAttempts.RESULTOK
                REPEAT
                  iAttempts.READNEXT
                UNTIL iAttempts.LASTRECORD OR NOT iAttempts.RESULTOK 
                //add the last case from the xml...
                ufAttempts:= iAttempts
                ufAttempts.PUTVALUE('SeqNr',STR(aCount+1))
                ufAttempts.WRITE
              ELSE //aSituation=1
                //process all records from XML
              REPEAT
                iAttempts.READNEXT
                IF iAttempts.RESULTOK THEN
                    aCount:= aCount+1
                    ufAttempts:= iAttempts
                    ufAttempts.PUTVALUE('SeqNr',STR(aCount))
                    ufAttempts.Write
                ENDIF  
              UNTIL iAttempts.LASTRECORD OR NOT iAttempts.RESULTOK
              ENDIF
              iAttempts.RELEASE
              iRes:= DELETEFILE(aFileName+'.xml')
              //always replace XML...
              oAttempts.OPEN(SetupPath+aStoredName)
              ufAttempts.RESET
              FOR i:= 1 TO ufAttempts.FORMCOUNT DO
                ufAttempts.READNEXT
                oAttempts:= ufAttempts
                oAttempts.WRITE
              ENDDO 
              oAttempts.RELEASE
              iRes:= sdLauncher.CMA_Data.Attempts.LOADFROMDISK(SetupPath+aStoredName) 
              iRes:= DELETEFILE(SetupPath+aStoredName)
              sdLauncher.CMA_Data.AttemptsCount:= ufAttempts.FORMCOUNT
              sdLauncher.WRITE
              IF aSituation=1 THEN //remove all attempts records for current case on server befor upload...
                REPEAT 
                  sdAttempts.READNEXT
                  IF sdAttempts.RESULTOK THEN
                    sdAttempts.DELETE
                  ENDIF  
                UNTIL sdAttempts.LASTRECORD OR NOT sdAttempts.RESULTOK
              ENDIF  
              ufAttempts.RELEASE
              iRes:= srvList.UPLOADDATA
              AddToLog('Recovering attempts: Number of records uploaded: '+ STR(iRes))
            ELSE
              AddToLog('Problem with opening '+aFileName+'.xml'+'. Error:'+STR(iRes))  
            ENDIF   
          ENDIF
          ufAttempts.RELEASE
        ENDIF
      ENDIF
    ENDIF  
  ENDIF
ENDPROCEDURE

PROCEDURE ShowProgress
INSTRUCTIONS
  IF SelectedSurvey<>EMPTY THEN
    srvList.GET(SelectedSurvey)
    IF srvList.RESULTOK THEN
      auxSelectedSurveyDisplayName:=srvList.Name
      AddToLog('Start progress report, survey: ' + auxSelectedSurveyDisplayName)
      Display(cCalculatingProgress ,hourglass)
      DetermineProgress
      cleardisplay
      AddToLog('Progress report for survey: ' + auxSelectedSurveyDisplayName + ' resulted in ' + str(tQueryResults.FormCount) + ' report records' )
      auxTotalProgressReportRecords:= tQueryResults.FormCount
      IF tQueryResults.FormCount>0 THEN
        CurrentForWhom:= ''
        CurrentInPossession:= ''
        CurrentLocation:= ''
        CurrentStatus:= ''
        CurrentCaseClosed:= ''
        ProgressOverview(cProgressReportSurvey + SrvNames[SelectedSurveyIndex])  
      ELSE
        DISPLAY(cProgressReportNoData,WAIT)
      ENDIF
    ENDIF
  ENDIF  
ENDPROCEDURE


PROCEDURE OnProgressSelected
INSTRUCTIONS
  CurrentForWhom:= tQueryResults.CMA_ForWhom
  CurrentInPossession:= tQueryResults.CMA_InPossession
  CurrentLocation:= tQueryResults.CMA_Location
  CurrentStatus:= tQueryResults.CMA_Status
  //CurrentCaseClosed:= tQueryResults.CMA_CaseClosed
ENDPROCEDURE

PROCEDURE ShowCasesForSelectedProgressReport
AUXFIELDS
  Index : INTEGER  
  sFilter : OPEN
  tmpCurrentUserID: STRING
INSTRUCTIONS
  auxWhatSurveyToShowGUID:= '*'
  IF SelectedSurvey<>EMPTY THEN
    auxWhatSurveyToShowGUID:= SelectedSurvey
  ENDIF
  // compose filter 
  IF CurrentForWhom<>'' THEN
    sFilter:= sFilter + ' AND CMA_ForWhom=\''+ CurrentForWhom + '\'' 
  ELSE
    IF CurrentUserID<>EMPTY THEN
      sFilter:= sFilter + ' AND CMA_ForWhom=\''+ CurrentUserID + '\'' 
    ELSE
      sFilter:= sFilter + ' AND CMA_ForWhom IS NULL' 
    ENDIF    
  ENDIF    
  IF CurrentInPossession<>'' THEN
    sFilter:= sFilter + ' AND CMA_InPossession=\''+ CurrentInPossession + '\'' 
  ELSE
    sFilter:= sFilter + ' AND CMA_InPossession IS NULL' 
  ENDIF  
  IF CurrentLocation<>'' THEN
    sFilter:= sFilter + ' AND CMA_Location=\''+ CurrentLocation + '\'' 
  ELSE
    sFilter:= sFilter + ' AND CMA_Location IS NULL' 
  ENDIF  
  aShowing:= shAll
  IF CurrentStatus<>'' THEN
    // map to aShowing
    CASE CurrentStatus OF
      'Completed': aShowing:= shCompleted
      'Finalized': aShowing:= shFinalized
      'Reopened': aShowing:= shReopened
      'Started': aShowing:= shStarted
      'Interrupted': aShowing:= shStarted
      'Accepted': aShowing:= shAccepted
      'Closed': aShowing:= shClosed
    ENDCASE 
  ELSE
     sFilter:= sFilter + ' AND CMA_Status IS NULL'         
  ENDIF  
//  IF CurrentCaseClosed<>'' THEN 
//    sFilter:= sFilter + ' AND CMA_CaseClosed='+ CurrentCaseClosed 
//  ELSE
//    sFilter:= sFilter + ' AND CMA_CaseClosed IS NULL' 
//  ENDIF  
  IF sFilter<>EMPTY THEN
    // strip first AND
    sFilter:=  SUBSTRING(sFilter, 5, LEN(sFilter)-4)
  ENDIF
  auxCustomCaseFilter:= sFilter
  sdLauncher.SETRECORDFILTER(GetCasesFilter)
  tcase.ERASE
  auxSelCount:= 0
  auxCasesCount:= sdLauncher.FORMCOUNT
  AddToLog('Progress cases count: '+STR(AuxCasesCount))
  FOR Index:= 1 to auxCasesCount DO
    sdLauncher.READNEXT
    InitTemporaryCase  
    tCase.WRITE
  ENDDO
  auxCaseIsSelected:= EMPTY 
  tCase.RESET
  tCase.INITRECORD
  auxFieldFilter:= GetFieldFilter(auxWhatSurveyToShowGUID,0)
  auxFieldFilterWidths:= GetFieldWidths(auxFieldFilter,auxWhatSurveyToShowGUID)
  auxFieldFilterTitles:= GetFieldTitles(auxFieldFilter,auxWhatSurveyToShowGUID)
  auxCustomDetailsTable:= EMPTY
  ComputeStatistics
  tmpCurrentUserID:= currentuserid
  currentuserid:= currentforwhom
  IF currentuserid<>EMPTY THEN
      ShowLauncherCases(strCasesForSurvey + ' ' + SrvNames[SelectedSurveyIndex] + ', ' + currentuserid)
  ELSE
      ShowLauncherCases(strCasesForSurvey + ' ' + SrvNames[SelectedSurveyIndex])
  ENDIF      
  currentuserid:= tmpCurrentUserID
ENDPROCEDURE

PROCEDURE DetermineProgress
AUXFIELDS
  iRes: INTEGER
  sQry: OPEN
  iIndex: INTEGER
  sSupervisorFilter: OPEN
INSTRUCTIONS
  // execute query in order to populate tProgress
  //currentUserID:=USERNAME
{$IFNDEF vers_511}  
  IF currentUserID=EMPTY THEN
    AddToLog('Setting supervisor/manager filter for user: ' + USERNAME + ' user type: ' + GetCategoryName(aUsertype))  
    IF aUserType=manager THEN
      sSupervisorFilter:= GetAllForManagerFilter(USERNAME)
    ELSE
      sSupervisorFilter:= GetAllForSupervisorFilter(USERNAME)
    ENDIF  
  ELSE
    AddToLog('Setting supervisor/manager filter for user: ' + USERNAME + ' user type: ' + GetCategoryName(aUsertype) + ', selected user: ' + currentUserId) 
    IF aUserType=manager THEN
      sSupervisorFilter:= GetAllForSupervisorFilter(currentUserID)
    ELSE
      sSupervisorFilter:= 'CMA_ForWhom=\''+currentUserID+'\''
    ENDIF
  ENDIF
  IF sSupervisorFilter<>'' THEN
    IF currentUserID=EMPTY THEN
      sSupervisorFilter:= ' AND (' + sSupervisorFilter + ' OR CMA_ForWhom IS NULL)' // also include not yet assigned cases, if no user selected
    ELSE
      sSupervisorFilter:= ' AND ' + sSupervisorFilter
    ENDIF  
  ENDIF  
  sQry:= 'SELECT CMA_ForWhom,CMA_InPossession,CMA_Location,CMA_Status, MAX(LastModification) LastModification, Count(*) Counter FROM Launcher_Form WHERE ' + 
  'MainSurveyID=\'' + SelectedSurvey + '\'' +  sSupervisorFilter + ' Group BY CMA_ForWhom,CMA_InPossession,CMA_Location,CMA_Status' 

  AddToLog('Progress qry: ' + sQry)
  iRes:= sdLauncher.ExecuteQuery(sQry, tProgress)
  tQueryresults.ERASE
  tQueryResults.RESET
  tProgress.RESET
  IF iRes= 0 THEN
    FOR iIndex:= 1 to tProgress.FORMCOUNT DO
      tProgress.INITRECORD
      tProgress.READNEXT
//      AddToLog('tProgress: '+ tProgress.getvalue('CMA_ForWhom') + ' ' + tProgress.getvalue('CMA_InPossession') + ' ' +
//      tProgress.getvalue('CMA_Location') + ' '  +  tProgress.getvalue('CMA_Status') + ' ' + tProgress.getvalue('CMA_CaseClosed') + ' ' + 
//      tProgress.getvalue('LastModification') + ' ' + tProgress.getvalue('Counter'))
      // populate 
      tQueryResults.INITRECORD
      tQueryResults:= tProgress //, does't seem to work if query result contains null values: solved : BL511-889, BL512-830, BL513-91
      //addapt status column:
      IF tQueryResults.CMA_Status=EMPTY THEN
        IF tQueryResults.CMA_ForWhom=EMPTY THEN 
          tQueryResults.CMA_Status:= cNotAssigned
        ELSEIF tQueryResults.CMA_ForWhom<>EMPTY AND tQueryResults.CMA_InPossession=EMPTY THEN 
          tQueryResults.CMA_Status:= cNotDownloaded 
        ELSEIF tQueryResults.CMA_ForWhom<>EMPTY AND tQueryResults.CMA_InPossession<>EMPTY THEN 
          tQueryResults.CMA_Status:= cNotStarted
        ENDIF 
      ELSE  
        CASE tQueryResults.CMA_Status OF
          'Interrupted': tQueryResults.CMA_Status:= cInterrupted
          'Added':       tQueryResults.CMA_Status:= cAdded
          'Completed':   tQueryResults.CMA_Status:= cCompleted
          'Started':     tQueryResults.CMA_Status:= cStarted
          'Finalized':   tQueryResults.CMA_Status:= cFinalized
          'Reopened':    tQueryResults.CMA_Status:= cReopened
          'Done':        tQueryResults.CMA_Status:= cDone
          'Closed':      tQueryResults.CMA_Status:= cClosed
          'Accepted':    tQueryResults.CMA_Status:= cAccepted
        ENDCASE
      ENDIF  
      tQueryresults.WRITE
    ENDDO
  ELSE 
      AddToLog('Progressreport, error: ' + str(iRes))
  ENDIF  
  {$ELSE}
  DISPLAY('Not supported in this version of Blaise',WAIT)
  {$ENDIF}
ENDPROCEDURE


// performs a consistency check for all cases of the selected survey. if a supervisor has been selected onlu cases from this particular supervisor will be checked
PROCEDURE CheckConsistency
INSTRUCTIONS
  IF SelectedSurvey<>EMPTY THEN
   AddToLog('Start consistency check for survey: ' + SelectedSurvey)
   Display(cCheckingConsistency ,hourglass)
   PerformConsistencyCheck
   cleardisplay
   AddToLog('Consistency check for survey: ' + SelectedSurvey + ' resulted in ' + str(tConsistency.FormCount) + ' inconsistent cases' )
   auxTotalInconsistentCases:= tConsistency.FormCount
    IF auxTotalInconsistentCases=0 THEN
      DISPLAY(cNoInconsistenciesFound,WAIT)  
    ELSE
     ShowConsistencyCheckResults (cConsistencyCheckSurvey +  SrvNames[SelectedSurveyIndex] )  
    ENDIF
  ENDIF
ENDPROCEDURE

PROCEDURE DetermineAllowedOperations
INSTRUCTIONS
  aoReopen:= EMPTY
  aoClose:= EMPTY
  aoRestore:= EMPTY
  aoAccept:= EMPTY
  aoTransfer:= EMPTY
  aoRelease:= EMPTY
  aoEdit:= EMPTY
  IF tCase.tLocation<>'RELEASED' THEN
    IF tCase.tGroupType<>EMPTY THEN //for a parent case as owner of a group
      IF tCase.tCMA_GroupStatus IN ['Done','Closed'] THEN 
        aoReopen:= yes 
      ENDIF
      IF NOT (tCase.tCMA_GroupStatus IN ['Done','Closed']) THEN
        aoClose:= yes 
      ENDIF
      IF (tCase.tCMA_GroupStatus<>'Done') THEN
        aoRestore:= yes
      ENDIF
      IF (tCase.tCMA_GroupStatus<>'Done') THEN
        aoTransfer:= yes
      ENDIF
      IF (tCase.tCMA_GroupStatus='Done') THEN
        aoAccept:= yes
      ENDIF  
      IF (tCase.tCMA_GroupStatus IN ['Done','Closed']) THEN
        aoRelease:= yes
      ENDIF  
      IF (tCase.tCMA_GroupStatus<>'Done') THEN
        aoEdit:= yes
      ENDIF
    ELSE
      IF (tCase.tFinal <> EMPTY AND tCase.tCMA_Status IN ['Completed','Finalized']) OR tCase.tCMA_Status='Closed' THEN
        aoReopen:= yes
      ENDIF
      IF tCase.tFinal = EMPTY THEN
        aoClose:= yes
      ENDIF
      IF tCase.tFinal = EMPTY OR (tCase.tCMA_Status IN ['Closed']) THEN
        aoRestore:= yes
      ENDIF
      IF tCase.tFinal = EMPTY OR (tCase.tCMA_Status IN ['Closed']) THEN
        aoTransfer:= yes
      ENDIF
      IF tCase.tFinal <> EMPTY AND (tCase.tCMA_Status in ['Completed','Finalized']) THEN
        aoAccept:= yes
      ENDIF
      IF (tCase.tFinal <> EMPTY AND tCase.tCMA_Status IN ['Completed','Finalized']) OR tCase.tCMA_Status='Closed' THEN
        aoRelease:= yes
      ENDIF
      IF (tCase.tFinal=EMPTY) AND (tCase.tCMA_Status IN ['','Started','Reopened','Added','Interrupted']) THEN
        aoEdit:= yes
      ENDIF  
    ENDIF
  ENDIF  
ENDPROCEDURE

PROCEDURE OneGrpSelectCase
INSTRUCTIONS
  tCase:= tGrpCase
  OnSelectCase
ENDPROCEDURE

PROCEDURE OnSelectCase
INSTRUCTIONS
  CurrentCaseID:= tCase.tIdentifier
  CurrentCaseGUID:= tCase.tMainSurveyID
  GetSurveySettings(CurrentCaseGUID)
  auxHasInterview:= tCase.tHasInterview
  IF auxHasInterview<>EMPTY THEN
    AddToLog('On select has interview: '+tCase.tIdentifier)
  ENDIF
  auxCurrentStatus:= tCase.tCMA_Status
  auxCurrentGrpStatus:= tCase.tCMA_GroupStatus
  auxCurrentIsClosed:= tCase.tFinal
  auxCurrentLocation:= tcase.tLocation
  auxCaseIsSelected:= EMPTY
  IF tCase.tSelected<>EMPTY THEN
    auxCaseIsSelected:= yes
  ENDIF  CurrentCaseID:= tCase.tIdentifier
  CurrentCaseGUID:= tCase.tMainSurveyID

  auxCurrentAttemptsCount:= tCase.tAttemptsCount
  auxStatus:= tCase.tCaseStatus
  auxGroupStatus:= tCase.tGroupStatus
  auxGroupSummary:= tCase.tGroupSummary
  IF auxStatus=EMPTY THEN 
    auxStatus:= cNotStarted
  ENDIF
  IF auxGroupStatus=EMPTY THEN  
    auxGroupStatus:= cNotStarted
  ENDIF  
  auxLastResult:= tCase.tLastResult
  auxLastAttempt:= DateForDisplay(tCase.tLastAttempt)
  auxContactData:= tCase.tContactData
  auxCaseNote:= tCase.tCaseNote
  auxCurrentSurvey:= tCase.tMainSurveyID
  CurrentContactInfoShort:= tCase.tContactInfoShort
  CurrentGroupID:= tCase.tGroupID
  CurrentGroupSort:= tCase.tGroupSort
//  IF aShowGroup=EMPTY THEN
//    CurrentTheSortValue:= tCase.TheSortValue
//  ELSE  
//    CurrentTheSortGrpValue:= tCase.TheSortValue
//  ENDIF  
  auxFinal:= tCase.tFinal
  auxSpawnAllowed:= tCase.tAllowSpawning
  auxGroupType:= tCase.tGroupType
  IF tCase.tIsDonorCase=EMPTY THEN auxIsDonorCase:= EMPTY ELSE auxIsDonorCase:= tCase.tIsDonorCase ENDIF
  auxCustomTemplate:= GetDetailsTemplate(tCase.tDetailsTemplate)
  auxGeoLocation:= tCase.tGeoLocation
  auxHasImage:= tCase.tHasImage
  IF tCase.tMainSurveyID=EMPTY THEN
    auxCustomDetailsTable:= EMPTY
  ELSE  
    auxCustomDetailsTable:= ProcessTemplate(tCase.tContactData)
    auxCaseDetailsTable:= CreateCaseDetailsTable
  ENDIF
  auxAllowTransfer:= EMPTY
  DetermineAllowedOperations  
ENDPROCEDURE

AUXFIELDS
  QuitLogging: (Synchronize (0) EN "<img src=Synchronize>", OK (1) EN "<img src=BackButton2>")
  CurrentVersion: STRING
  VersionInfo "^{CurrentVersion}": STRING

DATASOURCE mLogging:ilog
FIELDFILTER=LogWhen,LogText 

DIALOG dShowTheLogging EN "CMA logging" 
DATASOURCEREFS mLogging ""
FIELDREFS 
  auxIsUserLog
  auxDefaultNrOfDaysLoggingHistory
  VersionInfo 
  QuitLogging(OK) 
RULES
  auxIsUserLog.KEEP
  IF auxIsUserLog=no THEN
    VersionInfo.SHOW
  ELSE
    auxDefaultNrOfDaysLoggingHistory.ASK
  ENDIF
DATASOURCE dgrpCase: tGrpCase
SEARCHKEY=SECONDARY(secSort)
FIELDFILTER=tSelected,tContactInfoShort,tSurveyName,
            tLocation,tGeoLocation,
            tInpossession,
            tCaseStatus,tGroupStatus,tStatus,
            tAttemptsCount,tLastResult,tAppointment,
            tIdentifier,tStartDate,tEndDate,
            tSpawnCount,tGroupID,tLastAttempt,
            tCaseNote,tCustomUse,tGroupSort,
            tCustomCol1,tCustomCol2,tCustomCol3,tCustomCol4,tCustomCol5,
            tCustomCol6,tCustomCol7,tCustomCol8,tCustomCol9,tCustomCol10

DIALOG ShowGroupCases EN "Group cases"
DATASOURCEREFS dGrpCase "" 
FIELDREFS
  KEEP ShowInterviewBtn
  KEEP auxParentChildView
  KEEP auxFieldFilter
  KEEP auxFieldFilterWidths
  KEEP auxFieldFilterTitles
  KEEP ShowInterviewBtn
  KEEP currentUserID
  KEEP auxHasInterview
  SHOW auxDetails
  btnGroupCases(Cancel)

DATASOURCE dsourceConsistency: tConsistency
FIELDFILTER=ID, 
            LauncherSurveyDataFoundStr, 
            SurveyDataFoundStr, 
            LauncherAttemptsNo, 
            AttemptsDataNo,
            LastAttempt,
            LastAttemptInData           

DIALOG ShowConsistencyCheckResults EN "Consistency check results"
DATASOURCEREFS dsourceConsistency "" 
FIELDREFS
  KEEP auxTotalInconsistentCases
  btnConsistencyCheck(Cancel)
  
DATASOURCE dProgress: tQueryResults
FIELDFILTER=CMA_Status,
            CMA_ForWhom,
            CMA_InPossession,
            CMA_Location,
            //CMA_CaseClosed,
            LastModification,
            Counter
            
DIALOG ProgressOverview EN "Progress overview"
DATASOURCEREFS dProgress "" 
FIELDREFS
  KEEP auxTotalProgressReportRecords
  btnProgressOverview(Cancel)

DATASOURCE dsourceCase: tCase
SEARCHKEY=SECONDARY(secSort)
FIELDFILTER=tSelected,tContactInfoShort,tSurveyName,
            tLocation,tGeoLocation,
            tInpossession,
            tForWhom,
            tSupervisor,
            tCaseStatus,tGroupStatus,tStatus,
            tAttemptsCount,tLastResult,tAppointment,
            tIdentifier,tStartDate,tEndDate,
            tSpawnCount,tGroupID,tLastAttempt,
            tCaseNote,tCustomUse,tGroupSort,
            tCustomCol1,tCustomCol2,tCustomCol3,tCustomCol4,tCustomCol5,
            tCustomCol6,tCustomCol7,tCustomCol8,tCustomCol9,tCustomCol10

DIALOG ShowLauncherCases
DATASOURCEREFS dsourceCase "" 
FIELDREFS
  ShowInterviewBtn,
  aUserType,
  AcceptBtn,RestoreBtn,TransferBtn,ReopenBtn,ReleaseBtn,CloseBtn,
  AssignBtn,AssignSupervisorBtn,EditBtn,
  ExportCSVBtn,
  MultiSelect,
  auxSelCount,auxCasesCount,auxCaseIsSelected,
  auxHasInterview,
  auxCurrentStatus,auxCurrentGrpStatus,
  auxCurrentIsClosed,
  auxCurrentAttemptsCount,
  auxCurrentLocation,
  currentUserID,
  auxDetails,
  aShowing,
  CurrentLanguage,
  SelectedSurvey,
  auxShowSummary,
  auxFinal,auxCurrentSurvey, auxStatus,auxGroupStatus,auxGroupSummary,
  auxContactData, auxLastAttempt, auxCaseNote, auxSpawnAllowed,auxIsDonorCase
  auxDetails, auxCustomTemplate, auxCustomDetailsTable,
  auxStatisticsDetails,auxStatisticsDetailsTable, 
  auxCaseDetails,auxCaseDetailsTable, 
  auxGeoLocation, auxHasImage, auxGroupType, auxParentChildView, 
  auxFieldFilter, auxFieldFilterWidths, auxFieldFilterTitles,
  btnSelect,auxSortOn,auxAllowSort,auxFilter,
  aoAccept,aoReopen,aoRestore,aoClose,aoTransfer,aoRelease,aoEdit,
  btnLauncherActions,
  auxExportSurveyPossible,
  btnLauncherCases(Cancel)
RULES
  CurrentLanguage.KEEP
  aUserType.KEEP
  auxFinal.KEEP 
  auxCurrentSurvey.KEEP 
  auxStatus.KEEP 
  auxGroupStatus.KEEP 
  auxGroupSummary.KEEP
  auxContactData.KEEP 
  auxLastAttempt.KEEP 
  auxCaseNote.KEEP 
  auxSpawnAllowed.KEEP 
  auxIsDonorCase.KEEP
  auxCustomTemplate.KEEP 
  auxCustomDetailsTable.KEEP
  auxGeoLocation.KEEP 
  auxHasImage.KEEP 
  auxGroupType.KEEP 
  auxParentChildView.KEEP 
  auxFieldFilter.KEEP 
  auxFieldFilterWidths.KEEP 
  auxFieldFilterTitles.KEEP
  auxSelCount.KEEP
  auxCasesCount.KEEP
  auxCaseIsSelected.KEEP
  ShowInterviewBtn.KEEP
  AcceptBtn.KEEP
  AssignBtn.KEEP
  AssignSupervisorBtn.KEEP
  RestoreBtn.KEEP
  ReopenBtn.KEEP
  TransferBtn.KEEP
  ReleaseBtn.KEEP
  CloseBtn.KEEP
  EditBtn.KEEP
  ExportCSVBtn.KEEP
  MultiSelect.KEEP
  auxHasInterview.KEEP
  auxCurrentStatus.KEEP
  auxCurrentGrpStatus.KEEP
  auxCurrentIsClosed.KEEP
  auxCurrentLocation.KEEP
  auxCurrentAttemptsCount.KEEP
  currentUserID.KEEP
  SelectedSurvey.KEEP
  auxShowSummary.KEEP
  auxExportSurveyPossible.KEEP
  aShowing.ASK
  IF (MultiSelect=yes AND aUserType<>Manager) OR POSITION('tSupervisor', auxFieldFilter) > 0  THEN
    btnSelect.ASK
  ENDIF
  auxAllowSort.KEEP
  IF auxAllowSort=yes THEN
    auxSortOn.ASK  
  ENDIF 
  auxFilter.ASK 
  auxDetails.SHOW
  auxStatisticsDetailsTable.KEEP
  auxStatisticsDetails.SHOW
  auxCaseDetailsTable.KEEP
  auxCaseDetails.SHOW
  aoAccept.KEEP 
  aoReopen.KEEP
  aoRestore.KEEP
  aoClose.KEEP
  aoTransfer.KEEP
  aoRelease.KEEP
  IF currentUserID<>EMPTY AND aUserType<>Manager THEN
    btnLauncherActions.ASK
  ENDIF
  
PROCEDURE OnSelectUser
INSTRUCTIONS
  IF substring(tUsers.sUserID,1,1)='<' THEN
    currentUserID:= EMPTY
    currentUserStr:= REPLACE(REPLACE(tUsers.sUserID,'<','\\<'),'>','\\>')
  ELSE
    currentUserID:= tUsers.sUserID
    currentUserStr:= currentUserID
  ENDIF 
ENDPROCEDURE 

FUNCTION ReadHeaderLineFromImport: INTEGER
PARAMETERS
  pFileName: STRING
  transit pIsExcel: (yes,no)
auxfields
  res: INTEGER  
INSTRUCTIONS
  AddToLog('Importing file '+pFileName)
  auxLastImportFolder:= ExtractFilePath(pFileName)
  IF POSITION('.xlsx',pFileName)>0 THEN
    qExcel.SETSQLCONNECTIONSTRING('Data Source='+pFileName+';') 
    res:= qExcel.OPEN('select * from [%sheet%]') //by default the first sheet
    IF res=0 THEN
      qExcel.RESET
      res:= ReadExcelValues
      IF res=1 THEN AddToLog('Empty header line in Excel') ELSE
        colcount:= VAL([[qExcel.Fields.count]])
        pIsExcel:= yes
      ENDIF  
    ENDIF  
  ELSE  
    Res:= iGenericImport.OPEN(pFileName)
    iGenericImport.READNEXT //read line with field names
    res:= SplitCSV(iGenericImport.iValues,DataImportSep,colcount)
    IF res=1 THEN AddToLog('Empty header line in Excel') ELSE
      pIsExcel:= no
    ENDIF  
  ENDIF  
  RESULT:= res
ENDFUNCTION  

FUNCTION ProcessFieldNamesOfFile: INTEGER
PARAMETERS
  pMeta: METATYPE
  pTarget: INTEGER
  TRANSIT pReport: OPEN
AUXFIELDS
  i: INTEGER
  pos: INTEGER
  ap,prefix: STRING
  IDPresent: (yes),EMPTY
  cError: INTEGER
  iRes: INTEGER
  aContactGuid: STRING
INSTRUCTIONS
  aTopicInImport:= EMPTY
  ColumnNames:= values
  FOR i:= 1 TO colcount do
    target[i]:= pTarget
    ap:= ColumnNames[i]
    IF [[pMeta.FieldExists(ap)]]='False' THEN
      pReport:= pReport+REPLACE(strFieldError,'$field',ap,true)+'<newline>'
      cError:= cError+1
    ENDIF  
  ENDDO
  RESULT:= cError
ENDFUNCTION

PROCEDURE ProcessExcelInfoImportFile
PARAMETERS
  pTarget: INTEGER
AUXFIELDS
  aError: INTEGER
  aValue: OPEN
  res: INTEGER
INSTRUCTIONS
  REPEAT
    res:= ReadExcelValues
    IF res=0 THEN ProcessInfoValues(pTarget,ColCount) ENDIF
  UNTIL qExcel.LASTRECORD OR NOT qExcel.RESULTOK 
ENDPROCEDURE

PROCEDURE ProcessCSVInfoImportFile
PARAMETERS
  pTarget: INTEGER
AUXFIELDS
  aError: INTEGER
  Colc: INTEGER
  res: INTEGER
INSTRUCTIONS
  REPEAT
    iGenericImport.READNEXT
    res:= SplitCSV(iGenericImport.iValues,DataImportSep,ColC)
    IF res=0 THEN
      ProcessInfoValues(pTarget,ColCount)
    ENDIF  
  UNTIL iGenericImport.LASTRECORD OR NOT iGenericImport.RESULTOK 
ENDPROCEDURE


PROCEDURE ImportInfo
PARAMETERS
  pMeta: METATYPE
  pTarget: INTEGER
  pImportStr: STRING
AUXFIELDS
  FName: STRING
  res, Index: INTEGER
  ReportStr: OPEN
  aValue: OPEN
  IsExcel: (yes,no)
INSTRUCTIONS
  //select file with userinfo/managementinfo to import
 auxLastImportFolder:= iSettings.sLastImportFolder
 fName:= SELECTFILE(pImportStr,auxLastImportFolder,'Data file|*.csv;*.xlsx|CSV file|*.csv|Excel spreadsheet|*.xlsx')
 IF fName<>'' THEN
   Res:= ReadHeaderLineFromImport(fName,IsExcel)    
   IF res=0 THEN
      Res:= ProcessFieldNamesOfFile(pMeta,pTarget,ReportStr) //4=tarUserInfo, 5=tarManageInfo
      IF Res=0 THEN
        IF CONFIRM(REPLACE(strSureToImportFile,'$file',fname)) THEN
          IF IsExcel=yes THEN
            ProcessExcelInfoImportFile(pTarget)
            qExcel.RELEASE
          ELSE
            ProcessCSVInfoImportFile(pTarget)
            iGenericImport.RELEASE
          ENDIF
          LoadAllUsers
        ENDIF
      ELSE
        DISPLAY(ReportStr,WAIT)  
        AddToLog('Errors found in Column names. Import not possible.')
        AddToLog(ReportStr) 
      ENDIF    
    ELSE
      AddToLog('Error opening file '+fName+' Error: '+STR(res))
    ENDIF  
  ENDIF  
ENDPROCEDURE

PROCEDURE ImportUI
AUXFIELDS
  fName: STRING
  res: INTEGER
INSTRUCTIONS
  ImportInfo([[CMA_UserInfo]],4,strImportUserInfo)
ENDPROCEDURE

PROCEDURE ImportMI
AUXFIELDS
  fName: STRING
  res: INTEGER
INSTRUCTIONS
  ImportInfo([[CMA_ManageInfo]],5,strImportManageInfo)
ENDPROCEDURE

DATASOURCE dsUsers:tUsers
FIELDFILTER=sUserID,sUserFullName,sUserType,sManagerID  

DIALOG ShowUsers 
DATASOURCEREFS dsUsers "" 
FIELDREFS 
  aUserType,
  aUserInfoCount,
  currentUserID,
  LanguageCount,
  LanguageEnum,
  CurrentLanguage,
  RestoreUserBtn,
  ExportDataBtn,
  ImportCasesBtn,
  CheckBtn,
  LoggingBtn,
  ProgressBtn,
  CustomScriptsBtn,
  MaintainUserInfoBtn,
  MaintainManagementInfoBtn,  
  InstructionBtn,
  AllowAdminTasksForManager,
  auxWhatSurveyToShow,
  SelectedSurvey,
  aIsAlsoManager,
  aUserBtnRow1,
  aIsALoneManager,
  aIsAlsoAdmin,
  auxUserFieldFilter,
  aUserBtnRow2(cancel,switch)
RULES
  aUserType.KEEP
  aUserInfoCount.KEEP
  aIsALoneManager.KEEP
  currentUserID.KEEP
  LanguageCount.KEEP
  CurrentLanguage.KEEP
  RestoreUserBtn.KEEP
  ExportDataBtn.KEEP
  ImportCasesBtn.KEEP
  CheckBtn.KEEP
  LoggingBtn.KEEP
  ProgressBtn.KEEP
  CustomScriptsBtn.KEEP
  MaintainUserInfoBtn.KEEP
  MaintainManagementInfoBtn.KEEP    
  InstructionBtn.KEEP
  AllowAdminTasksForManager.KEEP
  SelectedSurvey.KEEP
  auxUserFieldFilter.KEEP
  aIsAlsoAdmin.KEEP
  IF aUserType<>administrator THEN
    auxWhatSurveyToShow.ASK
  ENDIF  
    aIsAlsoManager.KEEP
    IF LanguageCount>1 THEN
      LanguageEnum
    ENDIF 
  aUserBtnRow1.ASK

DATASOURCE dsBlaiseUsers:tBlaiseUsers
FIELDFILTER=sUserID,sUserFullName,sUserType,sManagerID  

DIALOG dMaintainUserInfo 
DATASOURCEREFS 
   dsUsers ""
FIELDREFS 
  auxUserFieldFilter,
  auxUIAction,
  aBtnUserInfoMaintenanceRow(cancel)
RULES
  auxUserFieldFilter.KEEP
  auxUIAction.KEEP

AUXFIELDS // Auxfields Maintain manage info dialogs     
   auxMIAction: (AddMMI,EditMMI,DeleteMMI), empty
   auxMIUserID "User id": STRING[20] 
   auxMIInstrumentID "GUID of survey": STRING[36]
   auxMISurveyName "Name of survey": STRING,EMPTY //multi-lingual 
   btnMaintainManageInfoActions: (
                     Cancel   EN "Back",
                     OK       EN "OK"
                     ) ,EMPTY                     


DATASOURCE dsManagementInfo:tManagementInfo
FIELDFILTER=sUserID,sInstrumentID,sSurveyName
  
DIALOG dMaintainManagementInfo 
DATASOURCEREFS 
   dsManagementInfo ""
FIELDREFS 
  auxMIAction,
  aBtnManageInfoMaintenanceRow(cancel)
RULES
  auxMIAction.KEEP

PROCEDURE StartManagementInfoMaintenance
INSTRUCTIONS
   LoadManageInfo
   dMaintainManagementInfo(cMaintainManageInfo)
ENDPROCEDURE

PROCEDURE LoadManageInfo
AUXFIELDS
   Index: INTEGER
INSTRUCTIONS
   sdManageInfo.RESET
   sdManageInfo.SETRECORDFILTER('')
   tManagementInfo.ERASE
   IF sdManageInfo.FORMCOUNT > 0 THEN
      FOR Index:= 1 to sdManageInfo.FORMCOUNT do
         sdManageInfo.READNEXT
         tManagementInfo.sUserID:= sdManageInfo.UserID
         tManagementInfo.sInstrumentID:= sdManageInfo.InstrumentID 
         tManagementInfo.sSurveyName:= sdManageInfo.SurveyName 
         tManagementInfo.WRITE
      ENDDO
   ELSE
      tManagementInfo.sUserID:= cNoUser
      tManagementInfo.sInstrumentID:= cNoUser
      tManagementInfo.WRITE         
   ENDIF
ENDPROCEDURE

PROCEDURE EnsureUserInGrid
INSTRUCTIONS
   IF tUsers.FORMCOUNT=0 THEN
      tUsers.INITRECORD
      tUsers.sUserID:= cNoUser
      tUsers.WRITE    
   ENDIF
ENDPROCEDURE

PROCEDURE OpenMaintainManageInfoActionDialog
AUXFIELDS
   sMIHeader: STRING
   Index: INTEGER
   UsrIndex : INTEGER
INSTRUCTIONS
   IF auxMIAction=AddMMI THEN
      auxMIUserID:= EMPTY
      auxMIInstrumentID:= EMPTY
      auxMISurveyName:= EMPTY
   ELSE 
      auxMIUserID:= tManagementInfo.sUserID
      auxMIInstrumentID:= tManagementInfo.sInstrumentID
      auxMISurveyName:= tManagementInfo.sSurveyName
   ENDIF
   // populate survey list
   LoadManagementSurveyList 
   IF auxMIInstrumentID<>EMPTY THEN
      Index:= GetSelectedSurveyByInstrumentId(auxMIInstrumentID)
      auxWhatSurveyToShow:= Index
   ELSE
      srvNames[0]:= cNoUser
      srvID[0]:= ''
      srvSupervisorCount[0]:= 0
      auxWhatSurveyToShow:= 0    
   ENDIF
   // populate user list with supervisors and managers only
   LoadManagementUsers 
   IF auxMIUserID<>EMPTY THEN
      UsrIndex:= GetSelectedUserById(auxMIUserID)
      auxWhatuserToShow:= UsrIndex
   ELSE
      usrNames[0]:= cNoUser
      auxWhatuserToShow:= 0    
   ENDIF
   // compose dialog header
   IF UsrIndex> 0 THEN
      sMIHeader:= usrNames[UsrIndex] + ', '
   ELSE
      sMIHeader:= auxMIUserID + ', '
   ENDIF
   IF Index>0 THEN
      sMIHeader:= sMIHeader + srvNames[Index]
   ELSE
      sMIHeader:= sMIHeader + auxMIInstrumentID
   ENDIF
   IF auxMIAction=DeleteMMI THEN
      sMIHeader:= cDeleteManInfo + ' ' + sMIHeader
   ELSEIF auxMIAction=EditMMI THEN
      sMIHeader:= cEditManInfo + ' ' + sMIHeader
   ELSE 
      sMIHeader:= cAddManInfo   
   ENDIF
   dMaintainManageInfoAction(sMIHeader)
ENDPROCEDURE

PROCEDURE OnSelectManageInfoUser
   AUXFIELDS
      Index: INTEGER
INSTRUCTIONS
      Index:= ORD(auxWhatUserToShow)
      auxMIUserID:= usrNames[Index]
ENDPROCEDURE 

PROCEDURE OnSelectManageInfoSurvey
   AUXFIELDS
      Index: INTEGER
INSTRUCTIONS
      Index:= ORD(auxWhatSurveyToShow)
      auxMISurveyName:= srvNames[Index]
      auxMIInstrumentID:=  srvID[Index]
ENDPROCEDURE 

FUNCTION GetSelectedUserById: INTEGER
PARAMETERS
   pUserID : STRING[36]
AUXFIELDS 
   Index: INTEGER
INSTRUCTIONS
    FOR Index:= 0 to 20 do 
      IF LOWERCASE(usrNames[Index]) = LOWERCASE(pUserID) THEN
         RESULT:= Index  
         EXITFOR
      ENDIF    
    ENDDO
ENDFUNCTION

FUNCTION GetSelectedSurveyByInstrumentId: INTEGER
PARAMETERS
   pInstrumentID : STRING[36]
AUXFIELDS 
   Index: INTEGER
INSTRUCTIONS
    FOR Index:= 0 to 20 do 
      IF srvID[Index] = pInstrumentID THEN
         RESULT:= Index  
         EXITFOR
      ENDIF    
    ENDDO
ENDFUNCTION

DIALOG dMaintainManageInfoAction 
FIELDREFS 
   auxWhatSurveyToShow
   auxWhatUserToShow,
   auxMIAction,
   auxMIUserID, 
   auxMIInstrumentID,
   auxMISurveyName,
   btnMaintainManageInfoActions(cancel)
RULES
   auxWhatSurveyToShow.ask
   auxWhatUserToShow.ask
   auxMIAction.keep
   auxMIUserID.keep
   auxMIInstrumentID.keep
   auxMISurveyName.ask

PROCEDURE ProcessManageInfoActionResult
AUXFIELDS
   dRes: INTEGER
INSTRUCTIONS
   dRes:= 0
   IF auxMIAction=DeleteMMI THEN
      // delete manage info
      sdManageInfo.RESET
      sdManageInfo.GET(primary, auxMIUserID, auxMIInstrumentID)
      IF sdManageInfo.RESULTOK then
         sdManageInfo.DELETE
         IF sdManageInfo.IOResultCode=0 THEN
            AddToLog('Manage info deleted for userid: ' + auxMIUserID + ' and instrumentid:' + auxMIInstrumentID)
         ELSE
            dRes:= sdManageInfo.IOResultCode   
            AddToLog('Manage info deletion failed for userid: ' + auxUIUserID + ' and instrumentid: ' + auxMIInstrumentID + ', IOResultCode: ' + STR(dRes))
         ENDIF
      ENDIF
   ELSEIF auxMIAction=EditMMI THEN
      // save changes
      sdManageInfo.GET(primary, auxMIUserID, auxMIInstrumentID)
      IF sdManageInfo.RESULTOK THEN
         sdManageInfo.UserID:= auxMIUserID
         sdManageInfo.InstrumentID:= auxMIInstrumentID
         sdManageInfo.SurveyName:= auxMISurveyName
         sdManageInfo.WRITE
         AddToLog('Manage info updated for user id: ' + auxMIUserID + ' and instrument id ' + auxMIInstrumentID)
      ENDIF
   ELSE 
      // insert a new manage info record
      sdManageInfo.INITRECORD
      sdManageInfo.UserID:= auxMIUserID
      sdManageInfo.InstrumentID:= auxMIInstrumentID
      sdManageInfo.SurveyName:= auxMISurveyName
      sdManageInfo.WRITE
      AddToLog('Manage info added with user id: ' + auxMIUserID + ' and instrument id ' + auxMIInstrumentID)
   ENDIF 
   // refresh grid
   LoadManageInfo
   tManagementInfo.RESET
   tManagementInfo.GET(primary, auxMIUserID,auxMIInstrumentID)
ENDPROCEDURE


PROCEDURE StartUserInfoMaintenance
INSTRUCTIONS
   SelectedSurvey:=EMPTY
   LoadAllUsers
   dMaintainUserInfo(cMaintainUserInfo)
ENDPROCEDURE
  
FUNCTION ValidLanguage: INTEGER
PARAMETERS pLanguageID: STRING
INSTRUCTIONS
  RESULT:= 0
  IF [[_locals.Languages.Contains(pLanguageID)]]='True' THEN
    RESULT:= 1
  ENDIF  
ENDFUNCTION    
  
PROCEDURE HandleFlag
AUXFIELDS
  aLan: STRING
INSTRUCTIONS
  aLan:= GetCategoryName(ACTIVELANGUAGE)
  CurLan:= LanguageId[ord(LanguageEnum)]
  CurrentLanguage:= GetCategoryName(CurLan)
  Translate(CurrentLanguage)
ENDPROCEDURE 

PROCEDURE SelectSurveyForScript
AUXFIELDS
  x: INTEGER
INSTRUCTIONS
  x:= ORD(auxWhatSurveyToShow)
  IF x>0 THEN
    SelectedReportSurvey:= srvID[x]
    SelectedReportSurveyIndex:= x 
  ELSE
    SelectedReportSurvey:= ''   
    SelectedReportSurveyIndex:= EMPTY
  ENDIF   
ENDPROCEDURE

PROCEDURE SelectSurvey
AUXFIELDS
  x: INTEGER
INSTRUCTIONS
  x:= ORD(auxWhatSurveyToShow)
  IF x>0 THEN
    SelectedSurvey:= srvID[x]
    SelectedSurveyIndex:= x 
  ELSE
    SelectedSurvey:= ''   
    SelectedSurveyIndex:= EMPTY
  ENDIF
  GetUsersToSupervise   
ENDPROCEDURE

PROCEDURE Translate
PARAMETERS pLanguageID: STRING
AUXFIELDS
  aNewLan: STRING
  aCulLan: STRING
INSTRUCTIONS
  IF pLanguageID<>GetCategoryName(ACTIVELANGUAGE) THEN
    aNewLan:= pLanguageID
    IF aNewLan='' THEN
      aCulLan:= CURRENTCULTURE
      IF POSITION('-',aCulLan)>0 THEN aCulLan:= SUBSTRING(aCulLan,1,POSITION('-',aCulLan)-1) ENDIF
      aNewLan:= aCulLan
    ENDIF
    IF ValidLanguage(aNewLan)=1 THEN
      AddToLog('Switch language from '+GetCategoryName(ACTIVELANGUAGE)+' to '+aNewLan)
      CurrentLanguage:= aNewLan
      SETLANGUAGE(aNewLan)
      PrepareSort
      IF aUserType<>administrator THEN
        FillSurveyNamesArray
        GetUsersToSupervise
      ELSE
        sdUsers.SETRECORDFILTER('')
        IF sdUsers.FORMCOUNT=0 THEN
          tUsers.ERASE
          tUsers.INITRECORD
          tUsers.sUserID:= cNoUser
          tUsers.WRITE    
        ELSE
            LoadAllUsers
        ENDIF
      ENDIF  
    ELSE
      AddToLog('Switch language from '+GetCategoryName(ACTIVELANGUAGE)+' to '+aNewLan+' NOT possible!')
    ENDIF  
  ENDIF  
ENDPROCEDURE    

PROCEDURE Start
AUXFIELDS res: INTEGER
INSTRUCTIONS
  AddToLog(FILL('=',80))
  AddToLog('Network connectivity: '+NETWORKCONNECTIVITYTYPE)
  AddtoLog('Blaise run-time version: '+BLAISERUNTIMEVERSION)
  AddToLog('Blaise setup version: '+BLAISEVERSION)
  AddToLog('Operation system: '+CurrentOS+', '+CurrentOSVersion)
  AddToLog('Current culture: '+CURRENTCULTURE)  //prepare EnumBlock
  AddToLog('Memory: '+CURRENTMEMORYINFO)
  AddToLog('User: '+USERNAME)
  SetupPath:= ExtractFilePath(SETUPNAME)
  SETMESSAGEFILENAME(SetupPath+cMessageName)
  AddToLog('Path: '+SetupPath)
  cTab:= CHAR(9)
  res:= srvList.GETLISTOFSURVEYS(true)
  srvList.GET(SECONDARY,cAdminTool)
  CMAServerparkName:= LOWERCASE(srvList.ServerPark)
  AddToLog('Serverpark: '+CMAServerparkName)      
  AddToLog('LauncherServerpark: '+LauncherServerparkName)      
  IF srvList.RESULTOK THEN
    CurrentVersion:= cVersion + '/'+DateToStr(srvList.InstallDate,'yyyyMMdd')+','+TimeToStr(srvList.InstallTime,'HH:mm:ss') 
    AddToLog('CMA_AdminTool started - '+CurrentVersion)
  ELSE  
    AddToLog('CMA_AdminTool started - '+CVersion+'/ Installed date/time could not be established')
  ENDIF  
  srvList.GET(SECONDARY,srvCases)
  LauncherServerparkName:= LOWERCASE(srvList.ServerPark)
ENDPROCEDURE

FUNCTION GetValueForSort: STRING
PARAMETERS pKeyNr: INTEGER
AUXFIELDS
  Index: INTEGER
  L: INTEGER
INSTRUCTIONS
  RESULT:= ''
  FOR Index:= 1 TO iSettings.sDefSort[pKeyNr].FieldCount DO
    RESULT:= RESULT+tCase.GETVALUE(iSettings.sDefSort[pKeyNr].FieldName[Index])
  ENDDO 
  L:= LEN(tCase.tMainSurveyID+tCase.tIdentifier)
  RESULT:= RESULT+
           FILL(' ',255-LEN(RESULT)-L)+
           tCase.tMainSurveyID+tCase.tIdentifier 
ENDFUNCTION

PROCEDURE SortCases
INSTRUCTIONS
  IF tCase.FORMCOUNT>0 THEN
    AddToLog('Sort cases '+ToString(auxSortOn))
    tCase.SETREADKEY(PRIMARY)
    tCase.RESET
    REPEAT
      tCase.READNEXT
      tCase.TheSortValue:= GetValueForSort(ORD(auxSortOn))
      tCase.WRITE
    UNTIL tCase.LASTRECORD   
    tCase.SETREADKEY(SECONDARY,secSort)
    tCase.RESET
    AddToLog('After sort')
    tCase.INITRECORD
  ENDIF
ENDPROCEDURE

FUNCTION ExtractTextForDisplay: STRING
PARAMETERS
  pName: STRING
AUXFIELDS
  aPosStart, aPosEnd: INTEGER
  aString: STRING
INSTRUCTIONS
  aPosStart:= POSITION(UPPERCASE(GetCategoryName(ACTIVELANGUAGE))+'=',UPPERCASE(pName))
  //check for language. If present use it.
  IF aPosStart>0 THEN
    aPosEnd:= POSITION(',',pName,aPosStart)   
    IF aPosEnd=0 THEN aPosEnd:= LEN(pName)+1 ENDIF
    aString:= SUBSTRING(pName,aPosStart,aPosEnd-aPosStart)
    RESULT:= SUBSTRING(aString,POSITION('=',aString)+1,255)
  ELSE
    RESULT:= pName
  ENDIF  
ENDFUNCTION  

PROCEDURE PrepareSort
AUXFIELDS  i: INTEGER
INSTRUCTIONS
  IF iSettings.sDefSortCount>0 THEN
    FOR i:= 1 TO iSettings.sDefSortCount DO
      auxSortText[i]:= ExtractTextForDisplay(iSettings.sDefSort[i].Title)
    ENDDO  
//    auxSortOn:= SelectedSortOn
    IF auxSortOn=EMPTY THEN auxSortOn:= 1 ENDIF
//    SelectedSortOn:= ORD(auxSortOn)
  ENDIF
  IF iSettings.sDefSortCount>1 THEN auxAllowSort:= yes ENDIF
//  IF iSettings.sDefSortGrpCount>0 THEN
//    FOR i:= 1 TO iSettings.sDefSortGrpCount DO
//      auxSortGrpText[i]:= ExtractTextForDisplay(iSettings.sDefSortGrp[i].Title)
//    ENDDO  
//    auxSortGrpOn:= SelectedSortGrpOn
//    IF auxSortGrpOn=EMPTY THEN auxSortGrpOn:= 1 ENDIF
//    SelectedSortGrpOn:= ORD(auxSortGrpOn)
//  ENDIF
//  IF iSettings.sDefSortGrpCount>1 THEN auxAllowGrpSort:= yes ENDIF  
ENDPROCEDURE

FUNCTION LanguageAllowed: INTEGER
PARAMETERS
  pLan: STRING
AUXFIELDS
  i,j: INTEGER  
INSTRUCTIONS  
  RESULT:= 0
  IF iSettings.sLanguageCount<>EMPTY THEN
    FOR i:= 1 TO iSettings.sLanguageCount DO
      j:= iSettings.sLanguages[i]
      IF VAL([[_locals.GetField('CurLan').Type.Categories.Count]])>=j THEN
        IF UPPERCASE([[_locals.GetField('CurLan').Type.Categories[j-1].Name]])=UPPERCASE(pLan) THEN
          RESULT:= 1
        ENDIF  
      ENDIF  
    ENDDO  
  ENDIF
ENDFUNCTION

PROCEDURE ImportSettingsFromInstallation
AUXFIELDS
  aLastLogUpload: DATETYPE
  aSelectedLanguage: STRING[10] //start language of UI.
  aSelectedSurvey: STRING[36] //GUID of the survey selected in the Survey dropdown box
  aSelectedUser: STRING[20]
  aLastImportFolder: STRING
  aNrOfDaysLoggingHistory: INTEGER
  iRes: INTEGER
  aPresent: (yes),EMPTY
INSTRUCTIONS
  IF FILEEXISTS(SetupPath+cLocSettings) THEN
    iRes:= iSettings.OPEN(SetupPath+cLocSettings) 
    IF iRes=0 THEN 
      iSettings.READNEXT
      iSettings.RELEASE
      aLastLogUpload:= iSettings.sLastLogUpload
      aSelectedLanguage:= iSettings.sSelectedLanguage
      aSelectedSurvey:= iSettings.sSelectedSurvey
      aSelectedUser:= iSettings.sSelectedUser
      aLastImportFolder:= iSettings.sLastImportFolder
      aNrOfDaysLoggingHistory:= iSettings.sNrOfDaysLoggingHistory
      aPresent:= yes
    ENDIF  
  ENDIF
  iRes:= iSettings.OPEN(SetupPath+cSettings)
  IF iRes=0 THEN 
    iSettings.READNEXT
    oSettings:= iSettings
    iSettings.RELEASE
    iSettings.ERASE
  ENDIF
  IF FILEEXISTS(SetupPath+cCMASettings) THEN
    iRes:= iCMASettings.OPEN(SetupPath+cCMASettings)
    IF iRes=0 THEN 
      iCMASettings.READNEXT
      oSettings:= iCMASettings
      iCMASettings.RELEASE
      iCMASettings.ERASE
    ENDIF
  ENDIF  
  oSettings.sLastLogUpload:= aLastLogUpload
  IF aPresent=yes THEN
    IF LanguageAllowed(aSelectedLanguage)=1 THEN
      oSettings.sSelectedLanguage:= aSelectedLanguage
    ELSE  
      oSettings.sSelectedLanguage:= iSettings.sSelectedLanguage
    ENDIF  
  ENDIF  
  oSettings.sSelectedSurvey:= aSelectedSurvey
  oSettings.sSelectedUser:= aSelectedUser
  IF aLastImportFolder<>EMPTY THEN
      oSettings.sLastImportFolder:= aLastImportFolder
  ENDIF
  oSettings.sNrOfDaysLoggingHistory:= aNrOfDaysLoggingHistory 
  iRes:= oSettings.OPEN(SetupPath+cLocSettings)
  oSettings.WRITE
  oSettings.RELEASE
ENDPROCEDURE
  
PROCEDURE Prepare
AUXFIELDS
  res, i: INTEGER
  aLan: INTEGER
INSTRUCTIONS
  //CurrentLanguage:= 'EL'
  customDataSep1:= '='
  customDataSep2:= ';'
  contactDataSep1:= cTab
  contactDataSep2:= cTab
  DataImportSep:= ';'
  DataExportSep:= ';'
  IF FILEEXISTS(SetupPath+cSettings) THEN
    ImportSettingsFromInstallation
  ENDIF
  IF FILEEXISTS(SetupPath+cLocSettings) THEN
    iSettings.OPEN(SetupPath+cLocSettings) 
    iSettings.READNEXT
    iSettings.RELEASE
    //Translate(iSettings.sSelectedLanguage)
    AddToLog('Settings read')
    ExportDataBtn:= iSettings.sExportDataBtn
    ShowInterviewBtn:= iSettings.sShowInterviewBtn
    AcceptBtn:= iSettings.sAcceptBtn
    AssignBtn:= iSettings.sAssignBtn
    AssignSupervisorBtn:= iSettings.sAssignSupervisorBtn
    RestoreUserBtn:= iSettings.sRestoreUserBtn
    RestoreBtn:= iSettings.sRestoreBtn
    TransferBtn:= iSettings.sTransferBtn
    ReopenBtn:= iSettings.sReopenBtn
    ReleaseBtn:= iSettings.sReleaseBtn
    CloseBtn:= iSettings.sCloseBtn
    EditBtn:= iSettings.sEditBtn
    EditParts:= iSettings.sEditParts
    ExportCSVBtn:= iSettings.sExportCSVBtn
    ImportCasesBtn:= iSettings.sImportCasesBtn
    CheckBtn:= iSettings.sCheckBtn
    LoggingBtn:= iSettings.sLoggingBtn
    ProgressBtn:= iSettings.sProgressBtn
    CustomScriptsBtn:= iSettings.sCustomReportsBtn
    MaintainUserInfoBtn:= iSettings.sMaintainUserInfoBtn
    MaintainManagementInfoBtn:= iSettings.sMaintainManagementInfoBtn   
    InstructionBtn:= iSettings.sInstructionBtn
    AllowAdminTasksForManager:= iSettings.sAllowAdminTasksForManager
    MultiSelect:= iSettings.sMultiSelect
    auxLastImportFolder:= iSettings.sLastImportFolder
    IF iSettings.sCustomDataSep<>EMPTY THEN
      IF uppercase(iSettings.sCustomDataSep)='TAB' THEN
        customDataSep1:= cTab customDataSep2:= cTab
      ELSE
        IF LEN(iSettings.sCustomDataSep)=2 THEN
          customDataSep1:= SUBSTRING(iSettings.sCustomDataSep,1,1)   
          customDataSep2:= SUBSTRING(iSettings.sCustomDataSep,2,1)   
        ELSEIF LEN(iSettings.sCustomDataSep)=1 THEN
          customDataSep1:= iSettings.sCustomDataSep   
          customDataSep2:= customDataSep1
        ELSEIF LEN(iSettings.sCustomDataSep)=4 THEN
          IF UPPERCASE(SUBSTRING(iSettings.sCustomDataSep,2,3))='TAB' THEN
            customDataSep2:= cTab
            customDataSep1:= SUBSTRING(iSettings.sCustomDataSep,1,1)   
          ENDIF     
        ENDIF  
      ENDIF  
    ENDIF
    IF iSettings.sContactDataSep<>EMPTY THEN
      IF uppercase(iSettings.sContactDataSep)='TAB' THEN
        contactDataSep1:= cTab contactDataSep2:= cTab
      ELSE
        IF LEN(iSettings.sContactDataSep)=2 THEN
          contactDataSep1:= SUBSTRING(iSettings.sContactDataSep,1,1)   
          contactDataSep2:= SUBSTRING(iSettings.sContactDataSep,2,1)   
        ELSEIF LEN(iSettings.sContactDataSep)=1 THEN
          contactDataSep1:= iSettings.sContactDataSep   
          contactDataSep2:= contactDataSep1   
        ELSEIF LEN(iSettings.sContactDataSep)=4 THEN
          IF UPPERCASE(SUBSTRING(iSettings.sContactDataSep,2,3))='TAB' THEN
            contactDataSep2:= cTab
            contactDataSep1:= SUBSTRING(iSettings.sContactDataSep,1,1)   
          ENDIF     
        ENDIF 
      ENDIF  
    ENDIF
    IF iSettings.sDataImportSep<>EMPTy THEN
      IF UPPERCASE(iSettings.sDataImportSep)='TAB' THEN
        DataImportSep:= cTab
      ELSE
        DataImportSep:= iSettings.sDataImportSep  
      ENDIF  
    ENDIF
    IF iSettings.sDataExportSep<>EMPTy THEN
      IF UPPERCASE(iSettings.sDataExportSep)='TAB' THEN
        DataExportSep:= cTab
      ELSE
        DataExportSep:= iSettings.sDataExportSep  
      ENDIF  
    ENDIF
    IF iSettings.sNrOfDaysLoggingHistory<>EMPTy THEN
      auxDefaultNrOfDaysLoggingHistory:= iSettings.sNrOfDaysLoggingHistory
    ELSEIF iSettings.sDefaultNrOfDaysLoggingHistory<>EMPTY THEN
      auxDefaultNrOfDaysLoggingHistory:= iSettings.sDefaultNrOfDaysLoggingHistory
    ELSE
      auxDefaultNrOfDaysLoggingHistory:= 7
    ENDIF
    IF iSettings.sLastLogUpload=EMPTY THEN
      LastLogUpload:= SYSDATE  //no upload on first day... 
    ELSE  
      LastLogUpload:= iSettings.sLastLogUpload
    ENDIF  
    LanguageCount:= iSettings.sLanguageCount
    IF LanguageCount<>EMPTY THEN
      FOR i:= 1 TO LanguageCount DO
        LanguageID[i]:= iSettings.sLanguages[i]
        aLan:= LanguageID[i]
        LanguageImage[i]:= 'Flag_'+[[_locals.GetField('CurLan').Type.Categories[aLan-1].Name]]
      ENDDO  
      CurrentLanguage:= iSettings.sSelectedLanguage
      Translate(CurrentLanguage)
    ELSE
      LanguageCount:= 1
      FOR i:= 0 TO val([[_locals.GetField('CurLan').Type.Categories.Count]])-1 DO
        IF [[_locals.GetField('CurLan').Type.Categories[i].Name]]=iSettings.sSelectedLanguage THEN
          LanguageID[1]:= i+1
        ENDIF  
      ENDDO  
      CurrentLanguage:= iSettings.sSelectedLanguage
      Translate(iSettings.sSelectedLanguage)
    ENDIF 
  ENDIF     
  srvList.GET(SECONDARY,srvCases)
  CMALauncherFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE) 
  srvList.GET(SECONDARY,srvContactInfo)
  CMAContactInfoPath:= ExtractFilePath(srvList.GetSurveyMetaFileName)
  srvList.GET(SECONDARY,srvAttempts)
  CMAAttemptsPath:= ExtractFilePath(srvList.GetSurveyMetaFileName)
  CurrentAttemptsGUID:= srvList.ID
  DefaultCMA_AttemptsGUID:= srvList.ID //GUID of default Attempts survey shipped with CMA  
  res:= Attempts.LOADDATAMODEL(srvList.GetSurveyMetaFilename)   
  aAttemptsFileName:= REPLACE(srvList.GetSurveyDataFilename,'.bdix','',IGNORE) 
  res:= ufAttempts.OPEN(aAttemptsFileName)
  PrepareSort 
  SelectedSurvey:= iSettings.sSelectedSurvey 
  DoNotAllowOverwrite:= yes //when not set existing cases will always be overwritten... 
  //auxSelectMoveNext:= yes 
ENDPROCEDURE

PROCEDURE WriteSettings
INSTRUCTIONS
  oSettings.OPEN(SetupPath+cLocSettings)
  oSettings:= iSettings
  oSettings.sSelectedLanguage:= GetCategoryName(ACTIVELANGUAGE)
  oSettings.sLastLogUpload:= LastLogUpload
  oSettings.sSelectedSurvey:= SelectedSurvey
  oSettings.sSelectedUser:= CurrentUserID
  oSettings.sLastImportFolder:= auxLastImportFolder
  oSettings.sNrOfDaysLoggingHistory:= auxDefaultNrOfDaysLoggingHistory
  oSettings.WRITE
  oSettings.RELEASE
  AddToLog('Settings updated. '+CurrentUserID+' '+SelectedSurvey)
ENDPROCEDURE

FUNCTION GetCredentialsDBPath : STRING
AUXFIELDS
  dbPath: STRING
  iPos: INTEGER
INSTRUCTIONS
   dbPath:= LOWERCASE(SetupPath)
   iPos:= POSITION(LOWERCASE(username), dbPath) + LEN(username)
   Result:= SUBSTRING(SetupPath,1,iPos)+'Settings\credentials.db;' 
ENDFUNCTION

PROCEDURE CheckIfCMA_Admin
AUXFIELDS
  res: INTEGER
  sDBPath: STRING
INSTRUCTIONS
  sDBPath:= GetCredentialsDBPath
  AddToLog('Checking Credentials db for admin rights. DataSourcePath: ' + sDBPath)
  tCredentials.SETSQLCONNECTIONSTRING('Data Source='+ sDBPath)
  res:= tCredentials.OPEN('select * from userpermission where userid=1 and action=\'CMA_Administrator\'')
  IF res=0 AND tCredentials.FORMCOUNT=1 THEN 
    aUserType:= administrator
    AccessAllowed:= yes
  ENDIF
  IF res=0 THEN 
    IF tCredentials.FORMCOUNT=1 THEN 
      aUserType:= administrator
      AccessAllowed:= yes
    ELSE 
     AddToLog('Credential db formCount : ' + STR(tCredentials.FORMCOUNT))
    ENDIF
  ELSE
     AddToLog('Error: Not able to open credentials db : ' + sDBPath)
  ENDIF
ENDPROCEDURE

PROCEDURE VerifyAccessRight
INSTRUCTIONS
  sdUsers.GET(USERNAME)
  IF sdUsers.RESULTOK THEN
    IF sdUsers.UserType=supervisor or sdUsers.UserType=manager THEN
      AccessAllowed:= yes
      aUserType:= sdUsers.UserType
      aManagerID:= sdUsers.ManagerID
    ENDIF
  ENDIF 
  IF AccessAllowed<>yes THEN
    CheckIfCMA_Admin
  ENDIF  
ENDPROCEDURE

FUNCTION SystemSurvey: INTEGER
PARAMETERS srv: STRING
INSTRUCTIONS
  IF LOWERCASE(srv)=srvCases OR 
     LOWERCASE(srv)=srvAttempts OR 
     LOWERCASE(srv)=srvLogging OR
     LOWERCASE(srv)=srvContactInfo OR
     LOWERCASE(srv)=srvClientInfo OR
     LOWERCASE(srv)=srvManageInfo OR
     LOWERCASE(srv)=srvUserInfo
  THEN
    RESULT:= 1
  ELSE
    RESULT:= 0
  ENDIF    
ENDFUNCTION

FUNCTION InstalledTopic: INTEGER
PARAMETERS
  pName: STRING
INSTRUCTIONS
  IF SystemSurvey(pName)<>1 AND 
     srvList.SetupFileName='' AND 
     srvList.SurveyState = InstalledOnClient AND 
     LOWERCASE(srvList.ServerPark)<>CMAServerParkName AND
     LOWERCASE(srvList.ServerPark)<>LauncherServerParkName 
  THEN 
    RESULT:= 1 
  ELSE 
    RESULT:= 0 
  ENDIF
ENDFUNCTION

PROCEDURE RefreshDependenciesList
AUXFIELDS 
  srv: STRING
  index, I: INTEGER
  aCurrentSurveyGUID: STRING
INSTRUCTIONS
  aCurrentSurveyGUID:= CurrentSurveyGUID
  srvList.RESET
  tDependency.ERASE
  FOR index:= 1 TO srvList.FORMCOUNT DO
    srvList.READNEXT
    IF srvList.SurveyState=InstalledOnClient THEN
      srv:= LOWERCASE(srvList.Name)
      IF InstalledTopic(srv)=1 THEN 
        GetSurveySettingsForGUID(srvList.Id)
        tDependency.ParentGUID:= srvList.Id  
        IF iSurveySettings.Survey_ChildrenCount<>EMPTY THEN
          FOR I:= 1 TO iSurveySettings.Survey_ChildrenCount DO
            tDependency.ChildGUID:= iSurveySettings.Survey_Children[I]
            AddToLog('Dependency: '+tDependency.ParentGUID+' <-- '+tDependency.ChildGUID)
            tDependency.WRITE
          ENDDO
        ENDIF  
        IF srvList.MainInstrumentId<>'' THEN //a wave
          tDependency.ParentGUID:= srvList.Id
          tDependency.ChildGUID:= srvList.MainInstrumentId
          AddToLog('Wave dependency: '+tDependency.ParentGUID+' --> '+tDependency.ChildGUID)
          tDependency.WRITE
        ENDIF
        IF iSurveySettings.Survey_AttemptsGUID<>'' THEN
          tDependency.ParentGUID:= srvList.Id
          tDependency.ChildGUID:= iSurveySettings.Survey_AttemptsGUID
          tDependency.WRITE
          AddToLog('Attempts dependency: '+tDependency.ParentGUID+' --> '+tDependency.ChildGUID)
        ENDIF
        IF iSurveySettings.Survey_ContactInfoGUID<>'' THEN
          tDependency.ParentGUID:= srvList.Id
          tDependency.ChildGUID:= iSurveySettings.Survey_ContactInfoGUID
          tDependency.WRITE
          AddToLog('ContactInfo dependency: '+tDependency.ParentGUID+' --> '+tDependency.ChildGUID)
        ENDIF
      ENDIF  
    ENDIF  
  ENDDO 
  CurrentSurveyGUID:= ''
  GetSurveySettings(aCurrentSurveyGUID)
ENDPROCEDURE

PROCEDURE GetSurveysToSupervise
AUXFIELDS 
  index: INTEGER
  aFilter: STRING
INSTRUCTIONS
  IF aUserType=supervisor THEN
    sdManageInfo.SETRECORDFILTER('UserID=\''+USERNAME+'\'') 
    sdManageInfo.RESET
    tManageInfo.ERASE
    FOR Index:= 1 to sdManageInfo.FORMCOUNT do
      sdManageInfo.READNEXT
      tManageInfo.sInstrumentID:= sdManageInfo.InstrumentID
      tManageInfo.sSurveyName:= sdManageInfo.SurveyName
      tManageInfo.WRITE
    ENDDO 
  ELSE
    IF aIsAlsoSupervisor=yes THEN
      sdUsers.SETRECORDFILTER('ManagerID=\''+USERNAME+'\' OR UserID=\''+USERNAME+'\'') 
    ELSE
      sdUsers.SETRECORDFILTER('ManagerID=\''+USERNAME+'\' ') 
    ENDIF  
    sdUsers.RESET
    tUsers.ERASE
    aFilter:= ''
    IF sdUsers.FORMCOUNT=0 THEN
      aFilter:= 'UserID=\''+USERNAME+'\''
      aIsALoneManager:= yes
    ELSE
      FOR Index:= 1 to sdUsers.FORMCOUNT do
        sdUsers.READNEXT
        IF aFilter<>'' THEN aFilter:= AFilter+' OR ' ENDIF
        aFilter:= aFilter + 'UserID=\''+sdUsers.UserID+'\''
      ENDDO
      AddtoLog('Supervisors to manage: '+aFilter)
    ENDIF 
    IF aFilter<>'' THEN
      sdManageInfo.SETRECORDFILTER(aFilter) 
      //get all surveys for all supervisors..
      sdManageInfo.RESET
      tManageInfo.ERASE
      FOR Index:= 1 to sdManageInfo.FORMCOUNT do
        sdManageInfo.READNEXT
        tManageInfo.sInstrumentID:= sdManageInfo.InstrumentID
        tManageInfo.sSurveyName:= sdManageInfo.SurveyName
        tManageInfo.WRITE
      ENDDO 
    ENDIF  
  ENDIF  
  FillSurveyNamesArray 
  tManageInfo.RESET
  sdManageInfo.SETRECORDFILTER('')
ENDPROCEDURE

FUNCTION NumberOfSupervisorsForSurvey : INTEGER
PARAMETERS
  pInstrumentID: STRING
AUXFIELDS
  aSupCount: INTEGER  
INSTRUCTIONS
    sdManageInfo.SETRECORDFILTER('InstrumentID=\''+pInstrumentID+'\'')
    sdManageInfo.RESET
  REPEAT
    sdManageInfo.READNEXT
    sdUsers.GET(sdManageInfo.UserID)
    IF sdUsers.UserType=supervisor THEN RESULT:= RESULT+1 ENDIF 
  UNTIL sdManageInfo.LASTRECORD
  AddToLog('Number of supervisors found for survey: '+pInstrumentID+' : '+STR(RESULT))
ENDFUNCTION

FUNCTION GetSupervisorsForSurveyFilter : OPEN
PARAMETERS
  pInstrumentID: STRING
AUXFIELDS
  sResult: OPEN
  Index: INTEGER
INSTRUCTIONS
  sdManageInfo.SETRECORDFILTER('InstrumentID=\''+pInstrumentID+'\'')
  sdManageInfo.RESET
  IF sdManageInfo.FORMCOUNT>0 THEN
    FOR Index:= 1 TO sdManageInfo.FORMCOUNT DO
      IF Index>1 THEN
        sResult:= sResult + ','
      ENDIF
      sResult:= sResult+ '\''+sdManageInfo.UserID+'\''
    ENDDO
    IF sResult<>EMPTY THEN
      sResult:= 'CMA_Supervisor IN ('+sResult+')'
    ENDIF
  ENDIF  
  Result:= sResult 
ENDFUNCTION

FUNCTION IsSupervisorAlsoTheManager: INTEGER
AUXFIELDS 
  index: INTEGER
  aFilter: STRING
INSTRUCTIONS
  IF aUserType=2 AND aManagerID=EMPTY THEN 
    RESULT:= 1 
  ELSE 
    RESULT:= 0 
  ENDIF
ENDFUNCTION

PROCEDURE CheckManagers
AUXFIELDS 
  aFilter: OPEN
  Index: INTEGER
  ListIDs: ARRAY[0..20] OF STRING
  ListNames: ARRAY[0..20] OF STRING
  OKCount: INTEGER
INSTRUCTIONS
  sdUsers.SETRECORDFILTER('UserType=2 AND ManagerID IS NULL AND UserID<>\''+USERNAME+'\'') 
  IF sdUsers.FORMCOUNT>0 THEN //check surveys to manage are exclusive...
    //remove surveys from dropdown list if they are also managed by someone else...
    REPEAT 
      sdUsers.READNEXT
      addtolog('Checking user:'+sdUsers.UserID)
      OKCount:= 0
      ListIDs:= EMPTY
      ListNames:=  EMPTY
      FOR Index:= 1 to srvNamesCount do
        aFilter:= 'UserID=\''+sdUsers.UserID+'\' AND InstrumentID=\''+srvID[Index]+'\''
        sdManageInfo.SETRECORDFILTER(aFilter)
        IF sdManageInfo.FORMCOUNT=0 THEN
          OKCount:= OKCount+1
          LIstIDs[OKCount]:= srvID[Index]
          ListNames[OKCount]:= srvNames[Index]
        ENDIF
      ENDDO
      srvNamesCount:= OKCount
      srvID:= ListIDs
      srvNames:= ListNames
    UNTIL sdUsers.LASTRECORD 
  ENDIF 
ENDPROCEDURE 

PROCEDURE GetUsersToSupervise
AUXFIELDS 
  index: INTEGER
  aFilter: STRING
INSTRUCTIONS
  IF aIsAlsoSupervisor=yes THEN
    sdUsers.SETRECORDFILTER('ManagerID=\''+USERNAME+'\' OR UserID=\''+USERNAME+'\'')
  ELSE  
    sdUsers.SETRECORDFILTER('ManagerID=\''+USERNAME+'\'') 
  ENDIF  
  sdUsers.RESET
  tUsers.ERASE
  IF SelectedSurvey=EMPTY THEN   
    FOR Index:= 1 to sdUsers.FORMCOUNT do
      sdUsers.READNEXT
      IF (aUserType=manager AND sdUsers.UserType=supervisor) OR (aUserType=supervisor AND sdUsers.UserType=interviewer) THEN
        tUsers.sUserID:= sdUsers.UserID
        tUsers.sUserFullName:= sdUsers.UserName
        tUsers.sUserType:= sdUsers.UserType
        tUsers.sManagerID:= sdUsers.ManagerID
        tUsers.WRITE
      ENDIF  
    ENDDO
  ELSE
    //determine per user if they are allowed access to this survey
    //requires: access to the server park (cannot be checked at this moment) and
    //either having as user no entry in manageinfo database or an entry for the selected survey
    FOR Index:= 1 to sdUsers.FORMCOUNT do
      sdUsers.READNEXT
      IF IsAllowedUser(sdUsers.UserID,SelectedSurvey)=1 THEN
        IF (aUserType=manager AND sdUsers.UserType=supervisor) OR (aUserType=supervisor AND sdUsers.UserType=interviewer) THEN
          tUsers.sUserID:= sdUsers.UserID
          tUsers.sUserFullName:= sdUsers.UserName
          tUsers.sUserType:= sdUsers.UserType
          tUsers.sManagerID:= sdUsers.ManagerID
          tUsers.WRITE
        ENDIF  
      ENDIF  
    ENDDO
  ENDIF
  aUserInfoCount:= tUsers.FORMCOUNT  
  IF tUsers.FORMCOUNT>0 OR aIsALoneManager=yes THEN
    tUsers.INITRECORD
    tUsers.sUserID:= cNoUser
    tUsers.WRITE
  ENDIF  
  tUsers.RESET
ENDPROCEDURE

{$IFNDEF usebdix}
FUNCTION Initialise: INTEGER
AUXFIELDS
  res, res1, res2, res3, res4, res5: INTEGER
  GUID: STRING
INSTRUCTIONS
  RESULT:= -1
  IF srvList.USERISAUTHENTICATED THEN
    res:= srvList.GETLISTOFSURVEYS
    IF res=0 THEN
      GUID:= [[Launcher.InstrumentID]]
      srvList.GET(GUID)
      IF srvList.RESULTOK THEN
        ConnectionStr:= ';Serverpark='+srvList.ServerPark
        SurveyStr:= 'InstrumentID='+GUID
        sdLauncher.SETCONNECTIONSTRING(SurveyStr+ConnectionStr)
        res1:= sdLauncher.OPEN
        GUID:= [[CMA_UserInfo.InstrumentID]]
        srvList.GET(GUID)
        SurveyStr:= 'InstrumentID='+GUID
        sdUsers.SETCONNECTIONSTRING(SurveyStr+ConnectionStr)
        res2:= sdUsers.OPEN
        GUID:= [[CMA_ManageInfo.InstrumentID]]
        srvList.GET(GUID)
        SurveyStr:= 'InstrumentID='+GUID
        sdManageInfo.SETCONNECTIONSTRING(SurveyStr+ConnectionStr)
        res3:= sdManageInfo.OPEN
        GUID:= [[Logging.InstrumentID]]
        srvList.GET(GUID)
        SurveyStr:= 'InstrumentID='+GUID
        sdLogging.SETCONNECTIONSTRING(SurveyStr+ConnectionStr)
        res4:= sdLogging.OPEN
        GUID:= [[CMA_CustomScript.InstrumentID]]
        srvList.GET(GUID)
        CustomReportStr:= 'InstrumentID='+GUID
        sdCustomScript.SETCONNECTIONSTRING(CustomReportStr+ConnectionStr)
        res5:= sdCustomScript.OPEN
        RESULT:= res1+res2+res3+res4+res5
      ENDIF
    ENDIF    
    AddToLog('Admin tool using SURVEYDATAFILE access. Result: '+STR(res1+res2+res3+res4+res5))
  ELSE
    AddToLog('User is not authenticated')
  ENDIF  
ENDFUNCTION
{$ELSE}
AUXFIELDS
  launcherbdix: STRING 
  usersbdix: STRING
  manageinfobdix: STRING
  loggingbdix: STRING
  reportbdix: STRING 
FUNCTION Initialise: INTEGER
AUXFIELDS
  res, res1, res2, res3, res4: INTEGER
INSTRUCTIONS
  launcherbdix:= setuppath+'launcher.bdix' 
  usersbdix:= setuppath+'cma_userinfo.bdix'
  manageinfobdix:= setuppath+'cma_manageinfo.bdix'
  loggingbdix:= setuppath+'cma_logging.bdix'

  res:= srvList.GETLISTOFSURVEYS
  res1:= sdLauncher.OPEN(launcherbdix) //in package!
  res2:= sdUsers.OPEN(usersbdix)
  res3:= sdManageInfo.OPEN(manageinfobdix)
  res4:= sdLogging.OPEN(loggingbdix)
  res5= sdLogging.OPEN(reportbdix)
  RESULT:= res1+res2+res3+res4+res5
  AddToLog('Admin tool using BDIX access. Result: '+STR(res1) +' '+ STR(res2)+' '+STR(res3)+ ' '+STR(res4) + ' '+STR(res5))
ENDFUNCTION
{$ENDIF}

PROCEDURE ShowCases
INSTRUCTIONS
  aShowing:= shAll
  IF aUserType=supervisor THEN
    IF CurrentUserID='' THEN
      auxShowSummary:= EMPTY
    ELSE
      auxShowSummary:= iSettings.sShowSummary
    ENDIF  
    auxCustomCaseFilter:= EMPTY
    GetLauncherCasesForSelectedUser
    IF currentUserID='' THEN
      IF SelectedSurvey<>'' THEN 
        ShowLauncherCases(strListOfUnassignedCases+', “'+srvNames[SelectedSurveyIndex]+'“')
      ELSE
        ShowLauncherCases(strListOfUnassignedCases)
      ENDIF
    ELSE
      IF SelectedSurvey<>'' THEN
        srvList.GET(SelectedSurvey)
        IF srvList.SetupFilename=EMPTY THEN auxExportSurveyPossible:= yes ENDIF
        ShowLauncherCases(strCasesForUser+' “'+currentUserID+'“, “'+srvNames[SelectedSurveyIndex]+'“')
      ELSE
        ShowLauncherCases(strCasesForUser+' “'+currentUserID+'“')
      ENDIF  
    ENDIF
  ELSE  
    auxShowSummary:= iSettings.sShowSummary
    srvList.GET(SelectedSurvey)
    IF srvList.SetupFilename=EMPTY THEN auxExportSurveyPossible:= yes ENDIF
    IF currentUserID<>'' THEN
      sdUsers.SETRECORDFILTER('ManagerID=\''+currentUserID+'\'') 
      IF sdUsers.FORMCOUNT>0 THEN
        auxCustomCaseFilter:= EMPTY
        GetLauncherCasesForSelectedUser
      ELSE
        tCase.ERASE
      ENDIF  
      ShowLauncherCases(strCasesForSupervisor+' “'+currentUserID+'“, “'+srvNames[SelectedSurveyIndex]+'“')
    ELSE
      auxCustomCaseFilter:= EMPTY
      GetLauncherCasesForSelectedUser
      ShowLauncherCases(strCasesForSurvey+' “'+srvNames[SelectedSurveyIndex]+'“')
    ENDIF 
  ENDIF
ENDPROCEDURE

PROCEDURE LoadAllUsers
AUXFIELDS Index: INTEGER
INSTRUCTIONS
  IF aUserType=administrator THEN
    sdUsers.SETRECORDFILTER('')
    tUsers.ERASE
    FOR Index:= 1 to sdUsers.FORMCOUNT do
      sdUsers.READNEXT
      tUsers.sUserID:= sdUsers.UserID
      tUsers.sUserFullName:= sdUsers.UserName
      tUsers.sUserType:= sdUsers.UserType
      tUsers.sManagerID:= sdUsers.ManagerID
      tUsers.WRITE
    ENDDO
  ELSE
    GetUsersToSupervise
  ENDIF  
  aUserInfoCount:= tUsers.FORMCOUNT
ENDPROCEDURE

PROCEDURE LoadManagementUsers
AUXFIELDS 
   Index: INTEGER
   UserCount: INTEGER
INSTRUCTIONS
  IF aUserType=administrator THEN
    sdUsers.SETRECORDFILTER('')
    FOR Index:= 1 to 20 do usrNames[Index]:= '' ENDDO
    FOR Index:= 1 to sdUsers.FORMCOUNT do
      sdUsers.READNEXT
      IF sdUsers.UserType = supervisor OR sdUsers.UserType = manager THEN
         UserCount:= UserCount + 1
         usrNames[UserCount]:= sdUsers.UserID            
      ENDIF
    ENDDO
  ENDIF  
ENDPROCEDURE

PROCEDURE LoadManagementSurveyList
AUXFIELDS Index: INTEGER
INSTRUCTIONS
  IF aUserType=administrator THEN
    srvList.Reset
    FOR Index:= 0 to 20 do srvNames[Index]:= '' srvID[Index]:= '' srvSupervisorCount[Index]:= 0 ENDDO
    FOR Index:= 1 to srvList.FORMCOUNT do
      srvList.READNEXT
      IF srvList.IsActive=yes AND srvList.SyncDataWhenConnected=no AND srvList.SyncSurveysWhenConnected=no THEN // only include active and managed by cma surveys
         srvNames[Index]:=  srvList.Name
         srvID[Index]:= srvList.Id
      ENDIF
    ENDDO
  ENDIF  
ENDPROCEDURE


FUNCTION DetermineUserTypeForBlaiseRole : INTEGER // ( interviewer (1), supervisor (2), manager (3), adminstrator(9))
PARAMETERS
   pUserRole: STRING
AUXFIELDS
   iRes: INTEGER
INSTRUCTIONS
   IF pUserRole=Empty THEN
      iRes:= 1
   ELSEIF POSITION('admin', LOWERCASE(pUserRole)) > 0 THEN
      iRes:= 9
   ELSEIF POSITION('manager', LOWERCASE(pUserRole)) > 0 THEN
      iRes:= 3
   ELSEIF POSITION('interviewer', LOWERCASE(pUserRole)) > 0 OR POSITION('user', LOWERCASE(pUserRole)) = 1 THEN
      iRes:= 1
   ELSEIF POSITION('supervisor', LOWERCASE(pUserRole)) > 0 THEN
      iRes:= 2
   ELSE
      iRes:= 0
   ENDIF
   RESULT:= iRes        
ENDFUNCTION

PROCEDURE Main
AUXFIELDS
  Index: INTEGER
INSTRUCTIONS
  IF aUserType=administrator THEN
    //dAdmin 
    auxLastImportFolder:= iSettings.sLastImportFolder
    auxUserFieldFilter:= 'sUserID,sUserType,sManagerID,sUserFullName'
    sdUsers.SETRECORDFILTER('')
    IF sdUsers.FORMCOUNT=0 THEN
      tUsers.INITRECORD
      tUsers.sUserID:= cNoUser
      tUsers.WRITE    
    ELSE
      LoadAllUsers
      //LoadBlaiseUsers
    ENDIF
    ShowUsers(strAdministratorTool)
    aQuit:= yes
  ELSE
    auxUserFieldFilter:= 'sUserID,sUserFullName'
    GetSurveysToSupervise
    SelectSurvey //to synchronize selection with iSettings
    GetUsersToSupervise
    CurrentUserID:= iSettings.sSelectedUser
    auxLastImportFolder:= iSettings.sLastImportFolder
    IF tManageInfo.FORMCOUNT>0 THEN
      IF aUserType=supervisor THEN
        tUsers.RESET
        IF currentUserID<>'' THEN tUsers.GET(currentUserID) ENDIF
        ShowUsers(strSupervisorTool)
      ELSE
        IF srvNamesCount>0 THEN
          ShowUsers(strManagerTool)
        ELSE
          DISPLAY(strNoSurveysToManage,WAIT)
          aUserBtnRow2:=Switch
        ENDIF  
      ENDIF  
      IF aUserBtnRow2<>Switch THEN aQuit:= yes ENDIF
    ELSE
      DISPLAY(strNoSurveysToManage,WAIT)
      aQuit:= yes
    ENDIF
  ENDIF  
ENDPROCEDURE

PROCEDURE StartApplication
INSTRUCTIONS
  auxWhatSurveyToShow:= srvAll
  IF IsSupervisorAlsoTheManager=1 THEN
    aIsAlsoManager:= yes
  ENDIF  
  IF aUserType in [supervisor,manager] AND AllowAdminTasksForManager=yes THEN
    aIsAlsoAdmin:= yes  
  ENDIF  
  REPEAT
    Main
    IF aUserBtnRow2=Switch THEN
      aIsAlsoSupervisor:= EMPTY
      IF aUserType=Manager THEN 
        aUserType:= Supervisor 
      ELSE 
        aUserType:= Manager 
        aIsAlsoSupervisor:= yes 
      ENDIF
    ELSEIF aUserBtnRow2=Admin THEN
      aUserType:= administrator 
      aQuit:= EMPTY
      Addtolog('3 '+str(aUserBtnRow2)) 
    ELSEIF aUserBtnRow2=Manage THEN
      aUserType:= Manager 
      aQuit:= EMPTY
      Addtolog('4 '+str(aUserBtnRow2)) 
    ENDIF  
  UNTIL aQuit=yes  
  UploadLogging(0)
  WriteSettings
ENDPROCEDURE


MANIPULATE
  Start
  res:= Initialise
  IF res=0 THEN
    Prepare
    VerifyAccessRight //needs to be a supervisor or a manager or an administrator...
    IF AccessAllowed=yes THEN
      StartApplication
    ELSE
      DISPLAY(strWrongUser,WAIT)
    ENDIF 
  ELSE  
    IF srvList.USERISAUTHENTICATED THEN
      DISPLAY(strConnectionFailed,WAIT)
    ELSE
      DISPLAY(strUserNotAuthenticated,WAIT)
    ENDIF  
  ENDIF  
