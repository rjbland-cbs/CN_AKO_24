SETUP CustomReports

INCLUDE "../Settings.incx"
   
CONST 
   cNullGuid = '00000000-0000-0000-0000-000000000000'
   cMeervoudigeBewoning = 'MeervoudigeBewoning'
   cOorspronkelijke = 'Oorspronkelijke Uitzet'
   cBuurtomschrijving = 'Buurtomschrijving'
   cIslands = ["Bonaire", "Saba", "Statia"]
   cMeervoudige = 'Meervoudige Bewoning'
   cEindresultaten = 'Eindresultaten'
   cInterviewer = 'Interviewer'
   cOpenStaand = 'Openstaand'
   cVoortgang = 'Voortgang'
   cVoltooid = 'Voltooid'
   cEiland = 'Eiland'
   cTotaal = 'Totaal'
   cEmpty = '<LEEG>'
   cIslandCount = 3
   cFalse = 'False'
   cTrue = 'True'
   cNL = 'nl-NL'

USES
   Launcher 'Launcher'
   CMA_UserInfo 'CMA_UserInfo'
   CN_Attempts 'CN_Attempts'
   
   DATAMODEL mBasicTable 
   PRIMARY Key
   FIELDS
      Key : STRING
      Field1 : INTEGER
      Field2 : INTEGER
   ENDMODEL
   
   DATAMODEL mCodes
   PRIMARY Code
   FIELDS
      Code : STRING
      Name : STRING
      Text : STRING
      Count : INTEGER
   ENDMODEL
   
   DATAMODEL mCodeKey
   PRIMARY Code, Key
   FIELDS
      Code : STRING
      Key : STRING
      Count : INTEGER
   ENDMODEL
   
   DATAMODEL mKeyCount
   PRIMARY Key
   FIELDS
      Key : STRING
      Count : INTEGER
   ENDMODEL
   
   DATAMODEL mOutput
   FIELDS
      Text : STRING[10000]
   ENDMODEL
   

INPUTFILE iLauncher : Launcher({$IFDEF Debug}'../TestData/Launcher'{$ELSE} '../Data/Launcher' {$ENDIF}, BDIX)
INPUTFILE iUserInfo : CMA_UserInfo({$IFDEF Debug}'../TestData/CMA_UserInfo' {$ELSE} '../Data/CMA_UserInfo' {$ENDIF}, BDIX)
INPUTFILE iAttempts : CN_Attempts({$IFDEF Debug} '../TestData/CN_Attempts' {$ELSE} '../Data/CN_Attempts' {$ENDIF}, BDIX)

TEMPORARYFILE tCodes : mCodes
TEMPORARYFILE tProgressInterviewer : mBasicTable
TEMPORARYFILE tProgressIsland : mBasicTable
TEMPORARYFILE tProgressNeighborhood : mBasicTable
TEMPORARYFILE tSpawnInterviewer : mBasicTable
TEMPORARYFILE tSpawnIsland : mBasicTable
TEMPORARYFILE tSpawnNeighborhood : mBasicTable

TEMPORARYFILE tCodesInterviewer : mCodeKey
TEMPORARYFILE tCodesIsland : mCodeKey
TEMPORARYFILE tCodesNeighborhood : mCodeKey

TEMPORARYFILE tInterviewerCodeCount : mKeyCount
TEMPORARYFILE tIslandCodeCount : mKeyCount
TEMPORARYFILE tNeighborhoodCodeCount : mKeyCount

OUTPUTFILE oOut1 : mOutput(ASCII)
SETTINGS
   OPEN=NO
   TRAILINGSPACES=NO
   CREATEBDIX=NO
   
OUTPUTFILE oOut2 : mOutput(ASCII)
SETTINGS
   OPEN=NO
   TRAILINGSPACES=NO
   CREATEBDIX=NO

INCLUDE "../Shared.incx"

INCLUDE "Functions.incx"

INCLUDE "TableFunctions.incx"

PROCEDURE DWAIT
PARAMETERS p : OPEN
INSTRUCTIONS
   DISPLAY(p, WAIT)
   MESSAGE('Display: ' + p)
ENDPROCEDURE

PROCEDURE GetInterviewers
INSTRUCTIONS
   AddToLog('Unfiltered users: ' + STR(iUserInfo.RECORDCOUNT))
   iUserInfo.SETRECORDFILTER('UserType=1')
   AddToLog('Filtered users: ' + STR(iUserInfo.RECORDCOUNT))
ENDPROCEDURE

PROCEDURE IntializeFiles
AUXFIELDS i : INTEGER
INSTRUCTIONS

   iUserInfo.RESET
   REPEAT
      iUserInfo.READNEXT
      tProgressInterviewer.INITRECORD
      tProgressInterviewer.Key := iUserInfo.UserId
      tProgressInterviewer.WRITE
      tSpawnInterviewer.INITRECORD
      tSpawnInterviewer.Key := iUserInfo.UserId
      tSpawnInterviewer.WRITE
   UNTIL iUserInfo.LASTRECORD
   
   FOR i := 1 TO cIslandCount DO
      tProgressIsland.INITRECORD
      tProgressIsland.Key := cIslands[i]
      tProgressIsland.WRITE
      
      tSpawnIsland.INITRECORD
      tSpawnIsland.Key := cIslands[i]
      tSpawnIsland.WRITE
   ENDDO
ENDPROCEDURE

PROCEDURE InitializeFiles
AUXFIELDS i : INTEGER
INSTRUCTIONS

   iUserInfo.RESET
   REPEAT
      iUserInfo.READNEXT
      tProgressInterviewer.INITRECORD
      tProgressInterviewer.Key := iUserInfo.UserId
      tProgressInterviewer.WRITE
      tSpawnInterviewer.INITRECORD
      tSpawnInterviewer.Key := iUserInfo.UserId
      tSpawnInterviewer.WRITE
   UNTIL iUserInfo.LASTRECORD
   
   FOR i := 1 TO cIslandCount DO
      tProgressIsland.INITRECORD
      tProgressIsland.Key := cIslands[i]
      tProgressIsland.WRITE
      
      tSpawnIsland.INITRECORD
      tSpawnIsland.Key := cIslands[i]
      tSpawnIsland.WRITE
   ENDDO
ENDPROCEDURE

FUNCTION CodeInCategory : STRING
PARAMETERS 
//   pMeta : METATYPE
   pFieldName : STRING
   pCode : STRING
AUXFIELDS
   i : INTEGER
   Categories : STRING
INSTRUCTIONS
   RESULT := cFalse
   Categories := CreateReflectionField([[iAttempts.Datamodel.GetField(pFieldName).Type.Categories]])
   FOR i := 0 TO VAL([[Categories.Count]]) - 1 DO
      IF pCode = [[Categories[i].Code]] THEN 
         RESULT := cTrue
         EXITFOR
      ENDIF
   ENDDO
ENDFUNCTION

FUNCTION IsEndResult : STRING
PARAMETERS 
//   pMeta : METATYPE
   pCode : STRING
AUXFIELDS
   i : INTEGER
   Categories : STRING
INSTRUCTIONS
   {$IFDEF Debug}
      RESULT := cTrue
   {$ELSE} 
      RESULT := CodeInCategory({[[iAttempts.Datamodel]],} 'Endresult', pCode)
      IF RESULT = cFalse THEN
         RESULT := CodeInCategory({[[iAttempts.Datamodel]],} 'ReasonRefusal', pCode)
      ENDIF
   {$ENDIF}   
ENDFUNCTION

// need to only include end results - get from types in the actual attempts survey
PROCEDURE PrepareCodes
PARAMETERS
   pLang : INTEGER
AUXFIELDS
   Categories : STRING
   i : INTEGER
INSTRUCTIONS
   Categories := CreateReflectionField([[iAttempts.Datamodel.GetField('Happenings').Type.Categories]])
   FOR i := 0 TO VAL([[Categories.Count]]) - 1 DO
      IF IsEndResult({[[iAttempts.Datamodel]],} [[Categories[i].Code]]) = cTrue THEN
         tCodes.INITRECORD
         tCodes.Code := [[Categories[i].Code]]
         tCodes.Name := [[Categories[i].Name]]
         tCodes.Text := RemoveEnds([[Categories[i].Texts[pLang]]])
         IF LEN(tCodes.Code) > MaxLen THEN MaxLen := LEN(tCodes.Code) ENDIF
         AddToLog('Adding code ' + tCodes.Name + ' (' + tCodes.Code + ')')
         tCodes.WRITE
      ENDIF
   ENDDO
   tCodes.SETREADKEY(PRIMARY)
ENDPROCEDURE

PROCEDURE HandleRecordFilter
AUXFIELDS
   RecordFilter : OPEN
INSTRUCTIONS
   AddToLog('Records before filter: ' + STR(iLauncher.RECORDCOUNT))
   RecordFilter := '(MainSurveyId <> \'' + cNullGuid + '\')'
   AddToLog('Record Filter: ' + RecordFilter)
   iLauncher.SETRECORDFILTER(RecordFilter)
   AddToLog('Records after filter: ' + STR(iLauncher.RECORDCOUNT))
ENDPROCEDURE

FUNCTION GetPrefill : STRING
PARAMETERS pFieldName : STRING
INSTRUCTIONS
   RESULT := GetEntryOnName(iLauncher.CMA_PreloadForEdit, pFieldName, '=', ',')
ENDFUNCTION

PROCEDURE SetVariables
INSTRUCTIONS
   aMainSurveyId := iLauncher.MainSurveyID
   aId := iLauncher.ID
   aPrefill := SUBSTRING(iLauncher.CMA_PreLoadForEdit, 2, LEN(iLauncher.CMA_PreLoadForEdit)-2)
   aForWhom := iLauncher.CMA_ForWhom
   aHappeningsCod := iLauncher.CMA_HappeningsCod
   IF aForWhom = EMPTY THEN aForWhom := cEmpty ENDIF
   aNeighborhood := GetPrefill('Main.NAW.Plaatsnaam')
   aIsland := 1 // ?
   aIslandName := cIslands[aIsland]
   IF iLauncher.CMA_CaseClosed = yes THEN aCaseClosed := cTrue ELSE aCaseClosed := cFalse ENDIF
   IF aHappeningsCod = EMPTY THEN aHappeningsCod := cEmpty ENDIF
   IF POSITION('-', aId) > 0 THEN aCaseSpawned := cTrue ELSE aCaseSpawned := cFalse ENDIF
   INC(CaseCount)
ENDPROCEDURE

AUXFIELDS
   ReportTime : STRING
   OutputPath : OPEN
   MaxLen : INTEGER
   aMainSurveyId : STRING[36]
   aId : STRING
   aPrefill : OPEN
   aForWhom : STRING
   aHappeningsCod : STRING
   aNeighborhood : STRING
   aIsland : 1..3
   aIslandName : STRING
   aCaseClosed : STRING
   aCaseSpawned : STRING
   CaseCount : INTEGER
   CompleteCount : INTEGER
   IncompleteCount : INTEGER
   SpawnCount : INTEGER
   OriginalCount : INTEGER
   EndResultCount : INTEGER
   
PROCEDURE ProcessProgress
INSTRUCTIONS

   IF aCaseClosed = cTrue THEN INC(CompleteCount) ELSE INC(IncompleteCount) ENDIF

   // Interviewers
   tProgressInterviewer.GET(aForWhom)
   IF NOT tProgressInterviewer.RESULTOK THEN
      tProgressInterviewer.INITRECORD
      tProgressInterviewer.Key := aForWhom
   ENDIF
   IF aCaseClosed = cFalse THEN
      Inc(tProgressInterviewer.Field1)
   ELSEIF aCaseClosed = cTrue THEN
      Inc(tProgressInterviewer.Field2)
   ENDIF
   tProgressInterviewer.WRITE
   
   // Islands
   tProgressIsland.GET(cIslands[aIsland])
   IF NOT tProgressIsland.RESULTOK THEN
      tProgressIsland.INITRECORD
      tProgressIsland.Key := cIslands[aIsland]
   ENDIF
   IF aCaseClosed = cFalse THEN
      Inc(tProgressIsland.Field1)
   ELSEIF aCaseClosed = cTrue THEN
      Inc(tProgressIsland.Field2)
   ENDIF
   tProgressIsland.WRITE
   
   // Neighborhoods
   tProgressNeighborhood.GET(aNeighborhood)
   IF NOT tProgressNeighborhood.RESULTOK THEN
      tProgressNeighborhood.INITRECORD
      tProgressNeighborhood.Key := aNeighborhood
   ENDIF
   IF aCaseClosed = cFalse THEN
      Inc(tProgressNeighborhood.Field1)
   ELSEIF aCaseClosed = cTrue THEN
      Inc(tProgressNeighborhood.Field2)
   ENDIF
   tProgressNeighborhood.WRITE
ENDPROCEDURE

PROCEDURE ProcessSpawn
INSTRUCTIONS

   IF aCaseSpawned = cTrue THEN INC(SpawnCount) ELSE INC(OriginalCount) ENDIF
   
   // Interviewer
   tSpawnInterviewer.GET(aForWhom)
   IF NOT tSpawnInterviewer.RESULTOK THEN
      tSpawnInterviewer.INITRECORD
      tSpawnInterviewer.Key := aForWhom
   ENDIF
   IF aCaseSpawned = cTrue THEN 
      INC(tSpawnInterviewer.Field1)
   ELSE
      INC(tSpawnInterviewer.Field2)
   ENDIF
   tSpawnInterviewer.WRITE
   
   // Island
   tSpawnIsland.GET(aIslandName)
   IF NOT tSpawnIsland.RESULTOK THEN 
      tSpawnIsland.INITRECORD
      tSpawnIsland.Key := aIslandName
   ENDIF
   IF aCaseSpawned = cTrue THEN 
      INC(tSpawnIsland.Field1)
   ELSE
      INC(tSpawnIsland.Field2)
   ENDIF
   tSpawnIsland.WRITE
   
   // Neighborhood
   tSpawnNeighborhood.GET(aNeighborhood)
   IF NOT tSpawnNeighborhood.RESULTOK THEN
      tSpawnNeighborhood.INITRECORD
      tSpawnNeighborhood.Key := aNeighborhood
   ENDIF
   IF aCaseSpawned = cTrue THEN 
      INC(tSpawnNeighborhood.Field1)
   ELSE
      INC(tSpawnNeighborhood.Field2)
   ENDIF
   tSpawnNeighborhood.WRITE
   
ENDPROCEDURE

PROCEDURE ProcessCodes
INSTRUCTIONS
   tCodes.GET(aHappeningsCod)
   IF tCodes.RESULTOK THEN
      INC(EndResultCount)
      INC(tCodes.Count)
      tCodes.WRITE
      
      // Endresults Interviewers
      tCodesInterviewer.GET(aHappeningsCod, aForWhom)
      IF NOT tCodesInterviewer.RESULTOK THEN
         tCodesInterviewer.INITRECORD
         tCodesInterviewer.Code := aHappeningsCod
         tCodesInterviewer.Key := aForWhom
      ENDIF
      INC(tCodesInterviewer.Count)
      tCodesInterviewer.WRITE
      tInterviewerCodeCount.GET(aForWhom)
      IF NOT tInterviewerCodeCount.RESULTOK THEN
         tInterviewerCodeCount.INITRECORD
         tInterviewerCodeCount.Key := aForWhom
      ENDIF
      INC(tInterviewerCodeCount.Count)
      tInterviewerCodeCount.WRITE
      
      // Endresults Islands
      tCodesIsland.GET(aHappeningsCod, aIslandName)
      IF NOT tCodesIsland.RESULTOK THEN
         tCodesIsland.INITRECORD
         tCodesIsland.Code := aHappeningsCod
         tCodesIsland.Key := aIslandName
      ENDIF
      INC(tCodesIsland.Count)
      tCodesIsland.WRITE
      tIslandCodeCount.GET(aIslandName)
      IF NOT tIslandCodeCount.RESULTOK THEN
         tIslandCodeCount.INITRECORD
         tIslandCodeCount.Key := aIslandName
      ENDIF
      INC(tIslandCodeCount.Count)
      tIslandCodeCount.WRITE
      
      // Endresults Neighborhoods
      tCodesNeighborhood.GET(aHappeningsCod, aNeighborhood)
      IF NOT tCodesNeighborhood.RESULTOK THEN
         tCodesNeighborhood.INITRECORD
         tCodesNeighborhood.Code := aHappeningsCod
         tCodesNeighborhood.Key := aNeighborhood
      ENDIF
      INC(tCodesNeighborhood.Count)
      tCodesNeighborhood.WRITE
      tNeighborhoodCodeCount.GET(aNeighborhood)
      IF NOT tNeighborhoodCodeCount.RESULTOK THEN
         tNeighborhoodCodeCount.INITRECORD
         tNeighborhoodCodeCount.Key := aNeighborhood
      ENDIF
      INC(tNeighborhoodCodeCount.Count)
      tNeighborhoodCodeCount.WRITE
      
   ENDIF
ENDPROCEDURE

FUNCTION OpenOutputFile : INTEGER
PARAMETERS
   pDir : STRING
   pFileName : STRING
AUXFIELDS
   Output, Output1, Output2 : OPEN
   aFileName : OPEN
INSTRUCTIONS
   Output := OutputPath
   IF pDir <> '' THEN Output := Output + '\\' + pDir ENDIF
   IF NOT FOLDEREXISTS(Output) THEN
      AddToLog('Creating folder: ' + Output)
      RESULT := CREATEFOLDER(Output)
   ENDIF
   IF RESULT = 0 THEN
      IF pDir <> '' THEN
         aFileName := pDir + '_' + pFileName
      ELSE
         aFileName := pFileName
      ENDIF
      Output1 := Output + '\\' + aFileName + '_' + ReportTime + '.csv'
      Output2 := Output + '\\' + AddPercent(aFileName) + '_' + ReportTime + '.csv'
      AddToLog('Opening File: ' + Output1)
      RESULT := oOut1.OPEN(Output1)
      IF RESULT = 0 THEN 
         AddToLog('Opening File: ' + Output2)
         RESULT := oOut2.OPEN(Output2)
      ENDIF
   ENDIF
ENDFUNCTION

PROCEDURE WriteProgress
INSTRUCTIONS
   IF OpenOutputFile(cVoortgang, cTotaal) = 0 THEN
      oOut1.INITRECORD
      AddToText(oOut1.Text, cOpenstaand)
      AddToText(oOut1.Text, STR(IncompleteCount))
      oOut1.WRITE
      oOut1.INITRECORD
      AddToText(oOut1.Text, cVoltooid)
      AddToText(oOut1.Text, STR(CompleteCount))
      oOut1.WRITE
      oOut1.INITRECORD
      AddToText(oOut1.Text, cTotaal)
      AddToText(oOut1.Text, STR(CaseCount))
      oOut1.WRITE
      
      oOut2.INITRECORD
      AddToText(oOut2.Text, cOpenstaand)
      AddToText(oOut2.Text, ToPerc(IncompleteCount, CaseCount))
      oOut2.WRITE
      oOut2.INITRECORD
      AddToText(oOut2.Text, cVoltooid)
      AddToText(oOut2.Text, ToPerc(CompleteCount, CaseCount))
      oOut2.WRITE
      oOut2.INITRECORD
      AddToText(oOut2.Text, cTotaal)
      AddToText(oOut2.Text, ToPerc(CaseCount, CaseCount))
      oOut2.WRITE
      
      oOut1.RELEASE
      oOut2.RELEASE
   ENDIF
   
   // Interviewer Progress
   InitProgressTables
   tProgressInterviewer.SETREADKEY(PRIMARY)
   REPEAT
      tProgressInterviewer.READNEXT
      AddRecord([[tProgressInterviewer]])
   UNTIL tProgressInterviewer.LASTRECORD
   WriteTables(cVoortgang, cInterviewer)
   
   // Island Progress
   InitProgressTables
   tProgressIsland.SETREADKEY(PRIMARY)
   REPEAT
      tProgressIsland.READNEXT
      AddRecord([[tProgressIsland]])
   UNTIL tProgressIsland.LASTRECORD
   WriteTables(cVoortgang, cEiland)
   
   // Neighborhood Progress
   InitProgressTables
   tProgressNeighborhood.SETREADKEY(PRIMARY)
   REPEAT
      tProgressNeighborhood.READNEXT
      AddRecord([[tProgressNeighborhood]])
   UNTIL tProgressNeighborhood.LASTRECORD
   WriteTables(cVoortgang, cBuurtomschrijving)
ENDPROCEDURE

PROCEDURE WriteSpawn
INSTRUCTIONS
   IF OpenOutputFile(cMeervoudigeBewoning, cTotaal) = 0 THEN
      oOut1.INITRECORD
      AddToText(oOut1.Text, cMeervoudige)
      AddToText(oOut1.Text, STR(SpawnCount))
      oOut1.WRITE
      oOut1.INITRECORD
      AddToText(oOut1.Text, cOorspronkelijke)
      AddToText(oOut1.Text, STR(OriginalCount))
      oOut1.WRITE
      oOut1.INITRECORD
      AddToText(oOut1.Text, cTotaal)
      AddToText(oOut1.Text, STR(CaseCount))
      oOut1.WRITE
      
      oOut2.INITRECORD
      AddToText(oOut2.Text, cMeervoudige)
      AddToText(oOut2.Text, ToPerc(SpawnCount, CaseCount))
      oOut2.WRITE
      oOut2.INITRECORD
      AddToText(oOut2.Text, cOorspronkelijke)
      AddToText(oOut2.Text, ToPerc(OriginalCount, CaseCount))
      oOut2.WRITE
      oOut2.INITRECORD
      AddToText(oOut2.Text, cTotaal)
      AddToText(oOut2.Text, ToPerc(CaseCount, CaseCount))
      oOut2.WRITE
      
      oOut1.RELEASE
      oOut2.RELEASE
   ENDIF
   
   // Interviewer Spawn
   InitSpawnTables
   tSpawnInterviewer.SETREADKEY(PRIMARY)
   REPEAT
      tSpawnInterviewer.READNEXT
      AddRecord([[tSpawnInterviewer]])
   UNTIL tSpawnInterviewer.LASTRECORD
   WriteTables(cMeervoudigeBewoning, cInterviewer)
   
   // Island Spawn 
   InitSpawnTables
   tSpawnIsland.SETREADKEY(PRIMARY)
   REPEAT
      tSpawnIsland.READNEXT
      AddRecord([[tSpawnIsland]])
   UNTIL tSpawnIsland.LASTRECORD
   WriteTables(cMeervoudigeBewoning, cEiland)
   
   // Neighborhood Spawn
   InitSpawnTables
   tSpawnNeighborhood.SETREADKEY(PRIMARY)
   REPEAT
      tSpawnNeighborhood.READNEXT
      AddRecord([[tSpawnNeighborhood]])
   UNTIL tSpawnNeighborhood.LASTRECORD
   WriteTables(cMeervoudigeBewoning, cBuurtomschrijving)
ENDPROCEDURE

PROCEDURE WriteCodes
AUXFIELDS 
   CurrentKey : STRING 
   i : INTEGER
INSTRUCTIONS

   // Endresults total
   tCodes.SETREADKEY(PRIMARY)
   IF OpenOutputFile(cEindresultaten, cTotaal) = 0 THEN
      REPEAT
         tCodes.READNEXT
         oOut1.INITRECORD
         AddToText(oOut1.Text, GetCodeCol)
         AddToText(oOut1.Text, STR(tCodes.Count))
         
         oOut2.INITRECORD
         AddToText(oOut2.Text, GetCodeCol)
         AddToText(oOut2.Text, ToPerc(tCodes.Count, EndResultCount))
         
         WriteBoth
      UNTIL tCodes.LASTRECORD
   ENDIF
   
   // Endresults Interviewer
   IF OpenOutputFile(cEindresultaten, cInterviewer) = 0 THEN
      tProgressInterviewer.RESET
      AddToBoth('')
      REPEAT
         tProgressInterviewer.READNEXT
         AddToBoth(tProgressInterviewer.Key)
      UNTIL tProgressInterviewer.LASTRECORD
      WriteBoth
      tCodes.RESET
      REPEAT
         tCodes.READNEXT
         AddToBoth(GetCodeCol)
         tProgressInterviewer.RESET
         REPEAT
            tProgressInterviewer.READNEXT
            tCodesInterviewer.GET(tCodes.Code, tProgressInterviewer.Key)
            tInterviewerCodeCount.GET(tProgressInterviewer.Key)
            WriteNumPerc(tCodesInterviewer.Count, tInterviewerCodeCount.Count)
         UNTIL tProgressInterviewer.LASTRECORD
         WriteBoth
      UNTIL tCodes.LASTRECORD
      AddToBoth(cTotaal)
      tProgressInterviewer.RESET
      REPEAT
         tProgressInterviewer.READNEXT
         tInterviewerCodeCount.GET(tProgressInterviewer.Key)
         WriteNumPerc(tInterviewerCodeCount.Count, tInterviewerCodeCount.Count)
      UNTIL tProgressInterviewer.LASTRECORD
      WriteBoth
   ENDIF
   
   // Endresults Island
   IF OpenOutputFile(cEindresultaten, cEiland) = 0 THEN
      AddToBoth('')
      FOR i := 1 TO cIslandCount DO
         AddToBoth(cIslands[i])
      ENDDO
      WriteBoth
      tCodes.RESET
      REPEAT
         tCodes.READNEXT
         AddToBoth(GetCodeCol)
         FOR i := 1 TO cIslandCount DO
            CurrentKey := cIslands[i]
            tCodesIsland.GET(tCodes.Code, CurrentKey)
            tIslandCodeCount.GET(CurrentKey)
            WriteNumPerc(tCodesIsland.Count, tIslandCodeCount.Count)
         ENDDO
         WriteBoth
      UNTIL tCodes.LASTRECORD
      AddToBoth(cTotaal)
      FOR i := 1 TO cIslandCount DO
         tIslandCodeCount.GET(cIslands[i])
         WriteNumPerc(tIslandCodeCount.Count, tIslandCodeCount.Count)
      ENDDO
      WriteBoth
   ENDIF
   
   // Endresults Neighborhood
   IF OpenOutputFile(cEindresultaten, cBuurtomschrijving) = 0 THEN
      AddToBoth('')
      tProgressNeighborhood.SETREADKEY(PRIMARY)
      REPEAT
         tProgressNeighborhood.READNEXT
         AddToBoth(tProgressNeighborhood.Key)
      UNTIL tProgressNeighborhood.LASTRECORD
      WriteBoth
      tCodes.RESET
      REPEAT
         tCodes.READNEXT
         AddToBoth(GetCodeCol)
         tProgressNeighborhood.RESET
         REPEAT
            tProgressNeighborhood.READNEXT
            tCodesNeighborhood.GET(tCodes.Code, tProgressNeighborhood.Key)
            tNeighborhoodCodeCount.GET(tProgressNeighborhood.Key)
            WriteNumPerc(tCodesNeighborhood.Count, tNeighborhoodCodeCount.Count)
         UNTIL tProgressNeighborhood.LASTRECORD
         WriteBoth
      UNTIL tCodes.LASTRECORD
      tProgressNeighborhood.RESET
      AddToBoth(cTotaal)
      REPEAT
         tProgressNeighborhood.READNEXT
         tNeighborhoodCodeCount.GET(tProgressNeighborhood.Key)
         WriteNumPerc(tNeighborhoodCodeCount.Count, tNeighborhoodCodeCount.Count)
      UNTIL tProgressNeighborhood.LASTRECORD
      WriteBoth
   ENDIF
ENDPROCEDURE

PROCEDURE SetOutputPath
AUXFIELDS
   aPath : STRING[1000]
INSTRUCTIONS
   ReadCache
   aPath := tCache.ReportsOutputPath
   AddToLog('Cached Output Path: ' + aPath)
   IF aPath = '' THEN aPath := GetSpecialFolderPath('MyDocuments') ENDIF
   aPath := SelectFolder('Select Output Folder', aPath)
   IF aPath = '' THEN HALT ENDIF
   tCache.ReportsOutputPath := aPath
   WriteCache
ENDPROCEDURE

PROCEDURE OpenOutputFolder
AUXFIELDS Res : INTEGER
INSTRUCTIONS
   Res := RUN('Start ' + OutputPath)
ENDPROCEDURE
   
MANIPULATE
   SetOutputPath
//   NewLog
//   ReportTime := DATETOSTR(SYSDATETIME, 'yyyyMMddHHmmss')
//   OutputPath := GetSpecialFolderPath('MyDocuments') + '\\AKO_Reports\\' + ReportTime
   
//   GetInterviewers
//   PrepareCodes(0)
//   IntializeFiles
//   HandleRecordFilter
//   REPEAT
//      iLauncher.READNEXT
//      SetVariables
//      IF CaseCount MOD 25 = 0 THEN 
//          AddToLog('Processing record ' + STR(CaseCount) + '/' + STR(iLauncher.RECORDCOUNT))
//      ENDIF
//      ProcessProgress
//      ProcessSpawn
//      ProcessCodes
//   UNTIL iLauncher.LASTRECORD
//   WriteProgress
//   WriteSpawn
//   WriteCodes
//   OpenOutputFolder